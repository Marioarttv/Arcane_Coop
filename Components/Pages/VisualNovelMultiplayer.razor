@page "/visual-novel-multiplayer"
@page "/visual-novel-multiplayer/{RoomId}"
@using Arcane_Coop.Models
@using Microsoft.AspNetCore.SignalR.Client
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@implements IAsyncDisposable

<link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Cinzel:wght@400;600;700&family=Rajdhani:wght@300;400;600;700&display=swap" rel="stylesheet">

<div class="visual-novel-multiplayer @GetThemeClass()">
    @if (!IsConnected)
    {
        <!-- Connection/Room Setup -->
        <div class="connection-screen @GetThemeClass()">
            <div class="connection-content">
                <h1>Visual Novel - Multiplayer</h1>
                
                @if (string.IsNullOrEmpty(RoomId))
                {
                    <div class="room-setup">
                        <h2>Join or Create Room</h2>
                        <div class="input-group">
                            <input @bind="roomInput" placeholder="Enter Room ID" class="room-input" />
                        </div>
                        <div class="input-group">
                            <input @bind="playerName" placeholder="Enter Your Name" class="player-input" />
                        </div>
                        <button @onclick="JoinRoom" disabled="@(string.IsNullOrEmpty(roomInput) || string.IsNullOrEmpty(playerName))" 
                                class="join-btn @GetControlButtonClass()">Join Room</button>
                    </div>
                }
                else
                {
                    <div class="room-setup">
                        <h2>Room: @RoomId</h2>
                        <div class="input-group">
                            <input @bind="playerName" placeholder="Enter Your Name" class="player-input" />
                        </div>
                        <button @onclick="JoinCurrentRoom" disabled="@string.IsNullOrEmpty(playerName)" 
                                class="join-btn @GetControlButtonClass()">Join Room</button>
                    </div>
                }
                
                @if (!string.IsNullOrEmpty(statusMessage))
                {
                    <div class="status-message">@statusMessage</div>
                }
            </div>
        </div>
    }
    else if (playerView == null || playerView.GameStatus == VisualNovelGameStatus.WaitingForPlayers)
    {
        <!-- Waiting for Players -->
        <div class="waiting-screen @GetThemeClass()">
            <div class="waiting-content">
                <div class="loading-spinner @GetSpinnerClass()"></div>
                <h2>@(statusMessage ?? "Waiting for players...")</h2>
                <div class="connected-players">
                    <h3>Connected Players:</h3>
                    @if (playerView?.ConnectedPlayers != null)
                    {
                        @foreach (var player in playerView.ConnectedPlayers)
                        {
                            <div class="player-tag">@player</div>
                        }
                    }
                </div>
            </div>
        </div>
    }
    else if (playerView?.CurrentScene != null)
    {
        <!-- Game Scene -->
        <div class="visual-novel @GetThemeClass()">
            <!-- Background -->
            <div class="scene-background @GetBackgroundClass()">
                @if (!string.IsNullOrEmpty(playerView.CurrentScene.BackgroundImage))
                {
                    <img src="@playerView.CurrentScene.BackgroundImage" alt="Scene background" class="background-image" />
                }
                <div class="background-overlay"></div>
                <div class="atmospheric-effects"></div>
            </div>

            <!-- Character Layer -->
            <div class="characters-layer @GetLayoutClass()">
                @if (playerView.CurrentScene.Layout == SceneLayout.SingleCenter && GetCurrentSpeaker() != null)
                {
                    <div class="character-container center-character @(GetCurrentSpeaker()?.IsActive == true ? "active" : "")">
                        <div class="character-portrait">
                            <img src="@GetCurrentSpeaker()?.GetCurrentImagePath()" alt="@GetCurrentSpeaker()?.Name (@GetCurrentSpeaker()?.CurrentExpression)" class="portrait-image" />
                            <div class="character-glow"></div>
                        </div>
                    </div>
                }
                else if (playerView.CurrentScene.Layout == SceneLayout.DualCharacters)
                {
                    @foreach (var character in playerView.CurrentScene.Characters.Take(2))
                    {
                        <div class="character-container @GetCharacterPositionClass(character) @(character.IsActive ? "active" : "inactive")">
                            <div class="character-portrait">
                                <img src="@character.GetCurrentImagePath()" alt="@character.Name (@character.CurrentExpression)" class="portrait-image" />
                                <div class="character-glow"></div>
                            </div>
                        </div>
                    }
                }
            </div>

            <!-- Multiplayer Status Bar -->
            <div class="multiplayer-status">
                <div class="player-role-indicator @GetRoleClass()">
                    Playing as: @playerView.PlayerRole
                </div>
                <div class="players-online">
                    Players: @(playerView.ConnectedPlayers.Count)/2
                </div>
            </div>

            <!-- Dialogue Box -->
            <div class="dialogue-section">
                <div class="dialogue-box @GetDialogueBoxClass()">
                    <!-- Character Name -->
                    @if (GetCurrentSpeaker() != null)
                    {
                        <div class="character-name-tag @GetNameTagClass()">
                            <span class="character-name">@GetCurrentSpeaker()?.DisplayName</span>
                            <div class="name-tag-decoration"></div>
                        </div>
                    }

                    <!-- Dialogue Text Container -->
                    <div class="dialogue-content">
                        <div class="dialogue-text-container">
                            <div class="dialogue-text @GetTextAnimationClass()">
                                @((MarkupString)GetFormattedText())
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Control Buttons -->
                <div class="dialogue-controls-external">
                    @if (playerView.CanSkip)
                    {
                        <button class="control-btn skip-btn @GetControlButtonClass()" @onclick="SkipText" title="Skip to end of text">
                            <span class="btn-icon">⏭️</span>
                            <span class="btn-text">Skip</span>
                            <div class="btn-effect"></div>
                        </button>
                    }

                    @if (playerView.CanContinue)
                    {
                        <button class="control-btn continue-btn @GetControlButtonClass()" @onclick="ContinueToNext" title="Continue to next dialogue">
                            <span class="btn-icon">▶️</span>
                            <span class="btn-text">Continue</span>
                            <div class="btn-effect"></div>
                        </button>
                    }
                </div>
            </div>
        </div>
    }
    else if (playerView?.GameStatus == VisualNovelGameStatus.Completed)
    {
        <!-- Game Completed -->
        <div class="completion-screen @GetThemeClass()">
            <div class="completion-content">
                <h1>Story Completed!</h1>
                <p>Thank you for playing the multiplayer Visual Novel experience.</p>
                <div class="completion-actions">
                    <button @onclick="RestartGame" class="control-btn @GetControlButtonClass()">
                        Restart Story
                    </button>
                    <button @onclick="LeaveRoom" class="control-btn @GetControlButtonClass()">
                        Leave Room
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string? RoomId { get; set; }
    
    private HubConnection? hubConnection;
    private VisualNovelPlayerView? playerView;
    private string roomInput = "";
    private string playerName = "";
    private string statusMessage = "";
    private string currentRoomId = "";
    private DialogueLine? currentDialogue;
    private string displayedText = "";
    private bool isDisposed = false;
    private CancellationTokenSource? animationCancellationTokenSource;
    private bool isTextAnimationActive = false;
    private readonly object animationLock = new();

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
            .Build();

        SetupSignalRHandlers();
        await hubConnection.StartAsync();

        // If RoomId provided in URL, set it
        if (!string.IsNullOrEmpty(RoomId))
        {
            roomInput = RoomId;
        }
    }

    private void SetupSignalRHandlers()
    {
        if (hubConnection == null) return;

        hubConnection.On<VisualNovelPlayerView>("VisualNovelGameJoined", async (view) =>
        {
            await InvokeAsync(() =>
            {
                playerView = view;
                currentRoomId = view.RoomId;
                UpdateCurrentDialogue();
                StateHasChanged();
            });
        });

        hubConnection.On<VisualNovelPlayerView>("VisualNovelPlayerViewUpdated", async (view) =>
        {
            await InvokeAsync(() =>
            {
                playerView = view;
                UpdateCurrentDialogue();
                StateHasChanged();
            });
        });

        hubConnection.On("VisualNovelTextSkipped", async () =>
        {
            await InvokeAsync(() =>
            {
                StopCurrentAnimation();
                if (currentDialogue != null)
                {
                    displayedText = ""; // Clear first to prevent duplication
                    displayedText = currentDialogue.Text;
                    StateHasChanged();
                }
            });
        });

        hubConnection.On<int>("VisualNovelDialogueContinued", async (newDialogueIndex) =>
        {
            await InvokeAsync(() =>
            {
                StopCurrentAnimation();
                displayedText = ""; // Ensure clean start
                UpdateCurrentDialogue();
                _ = StartTypewriterAnimation();
                StateHasChanged();
            });
        });

        hubConnection.On("VisualNovelGameCompleted", async () =>
        {
            await InvokeAsync(() =>
            {
                statusMessage = "Story completed!";
                StateHasChanged();
            });
        });

        hubConnection.On("VisualNovelGameRestarted", async () =>
        {
            await InvokeAsync(() =>
            {
                StopCurrentAnimation();
                displayedText = "";
                UpdateCurrentDialogue();
                _ = StartTypewriterAnimation();
                StateHasChanged();
            });
        });

        hubConnection.On("VisualNovelGameFull", async () =>
        {
            await InvokeAsync(() =>
            {
                statusMessage = "Room is full! Please try another room.";
                StateHasChanged();
            });
        });

        hubConnection.On<string>("VisualNovelError", async (error) =>
        {
            await InvokeAsync(() =>
            {
                statusMessage = $"Error: {error}";
                StateHasChanged();
            });
        });
    }

    private async Task JoinRoom()
    {
        if (hubConnection != null && !string.IsNullOrEmpty(roomInput) && !string.IsNullOrEmpty(playerName))
        {
            currentRoomId = roomInput;
            statusMessage = "Joining room...";
            StateHasChanged();
            await hubConnection.SendAsync("JoinVisualNovelGame", roomInput, playerName);
        }
    }

    private async Task JoinCurrentRoom()
    {
        if (!string.IsNullOrEmpty(RoomId))
        {
            roomInput = RoomId;
            await JoinRoom();
        }
    }

    private async Task SkipText()
    {
        if (hubConnection != null && !string.IsNullOrEmpty(currentRoomId))
        {
            await hubConnection.SendAsync("SkipVisualNovelText", currentRoomId);
        }
    }

    private async Task ContinueToNext()
    {
        if (hubConnection != null && !string.IsNullOrEmpty(currentRoomId))
        {
            await hubConnection.SendAsync("ContinueVisualNovel", currentRoomId);
        }
    }

    private async Task RestartGame()
    {
        if (hubConnection != null && !string.IsNullOrEmpty(currentRoomId))
        {
            await hubConnection.SendAsync("RestartVisualNovel", currentRoomId);
        }
    }

    private Task LeaveRoom()
    {
        playerView = null;
        currentRoomId = "";
        statusMessage = "";
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void UpdateCurrentDialogue()
    {
        if (playerView?.CurrentScene?.DialogueLines != null && 
            playerView.GameState != null &&
            playerView.GameState.CurrentDialogueIndex < playerView.CurrentScene.DialogueLines.Count)
        {
            currentDialogue = playerView.CurrentScene.DialogueLines[playerView.GameState.CurrentDialogueIndex];
            UpdateCharacterStates();
        }
    }

    private async Task StartTypewriterAnimation()
    {
        if (currentDialogue == null || isDisposed) return;
        
        lock (animationLock)
        {
            if (isTextAnimationActive)
            {
                StopCurrentAnimation();
            }
            isTextAnimationActive = true;
        }

        if (currentDialogue.AnimationType != TextAnimationType.Typewriter) 
        {
            displayedText = currentDialogue.Text;
            StateHasChanged();
            lock (animationLock)
            {
                isTextAnimationActive = false;
            }
            return;
        }
        
        // Small delay to ensure UI is updated before animation starts
        await Task.Delay(10);

        displayedText = ""; // Clear any existing text
        var speed = currentDialogue.TypewriterSpeed > 0 ? currentDialogue.TypewriterSpeed : 50;
        
        // Create cancellation token for this animation
        animationCancellationTokenSource?.Cancel();
        animationCancellationTokenSource?.Dispose();
        animationCancellationTokenSource = new CancellationTokenSource();
        var token = animationCancellationTokenSource.Token;
        
        try
        {
            for (int i = 0; i < currentDialogue.Text.Length && !isDisposed && !token.IsCancellationRequested; i++)
            {
                displayedText += currentDialogue.Text[i];
                StateHasChanged();
                
                if (!token.IsCancellationRequested)
                {
                    await Task.Delay(speed, token);
                }
            }
        }
        catch (OperationCanceledException)
        {
            // Animation was cancelled - expected behavior
        }
        finally
        {
            lock (animationLock)
            {
                isTextAnimationActive = false;
            }
        }
    }

    private void UpdateCharacterStates()
    {
        if (playerView?.CurrentScene == null || currentDialogue == null) return;

        // Reset all characters to inactive
        foreach (var character in playerView.CurrentScene.Characters)
            character.IsActive = false;

        // Set current speaker as active
        var speaker = playerView.CurrentScene.Characters.FirstOrDefault(c => c.Id == currentDialogue.CharacterId);
        if (speaker != null)
        {
            speaker.IsActive = true;
            
            // Update speaker expression if specified
            if (currentDialogue.SpeakerExpression.HasValue)
                speaker.CurrentExpression = currentDialogue.SpeakerExpression.Value;
        }

        // Update expressions for other characters if specified
        foreach (var expressionChange in currentDialogue.CharacterExpressions)
        {
            var character = playerView.CurrentScene.Characters.FirstOrDefault(c => c.Id == expressionChange.Key);
            if (character != null)
                character.CurrentExpression = expressionChange.Value;
        }
    }

    private VisualNovelCharacter? GetCurrentSpeaker()
    {
        if (playerView?.CurrentScene == null || currentDialogue == null) return null;
        return playerView.CurrentScene.Characters.FirstOrDefault(c => c.Id == currentDialogue.CharacterId);
    }

    private string GetFormattedText()
    {
        return displayedText.Replace("\n", "<br/>");
    }

    // CSS Class Methods
    private string GetThemeClass() => playerView?.CurrentScene?.Theme.ToString().ToLower() ?? "piltover";
    private string GetBackgroundClass() => $"background-{GetThemeClass()}";
    private string GetLayoutClass() => playerView?.CurrentScene?.Layout.ToString().ToLower() ?? "single";
    private string GetDialogueBoxClass() => $"dialogue-{GetThemeClass()}";
    private string GetNameTagClass() => $"name-tag-{GetThemeClass()}";
    private string GetTextAnimationClass() => currentDialogue?.AnimationType.ToString().ToLower() ?? "typewriter";
    private string GetControlButtonClass() => $"control-{GetThemeClass()}";
    private string GetSpinnerClass() => $"spinner-{GetThemeClass()}";
    private string GetRoleClass() => $"role-{playerView?.PlayerRole.ToString().ToLower() ?? "piltover"}";
    
    private string GetCharacterPositionClass(VisualNovelCharacter character)
    {
        return character.Position.ToString().ToLower() + "-character";
    }

    private void StopCurrentAnimation()
    {
        animationCancellationTokenSource?.Cancel();
        animationCancellationTokenSource?.Dispose();
        animationCancellationTokenSource = null;
    }

    public async ValueTask DisposeAsync()
    {
        isDisposed = true;
        StopCurrentAnimation();
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

<style>
/* Import all styles from original VisualNovel.razor */
/********************************************
 * Visual Novel Container & Base Styling
 ********************************************/
.visual-novel-multiplayer, .visual-novel {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    overflow: hidden;
    font-family: 'Rajdhani', sans-serif;
    color: #fff;
    display: flex;
    flex-direction: column;
    z-index: 1000;
}

/********************************************
 * Connection and Setup Screens
 ********************************************/
.connection-screen, .waiting-screen, .completion-screen {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100vh;
    background: linear-gradient(135deg, #2c1810 0%, #5a4a3a 30%, #c8aa6e 100%);
}

.connection-screen.zaun, .waiting-screen.zaun, .completion-screen.zaun {
    background: linear-gradient(135deg, #0a1e16 0%, #1a3a2e 30%, #00d4aa 100%);
}

.connection-content, .waiting-content, .completion-content {
    text-align: center;
    color: #fff;
    max-width: 500px;
    padding: 2rem;
}

.room-setup {
    margin-top: 2rem;
}

.input-group {
    margin-bottom: 1rem;
}

.room-input, .player-input {
    width: 100%;
    padding: 0.75rem;
    font-size: 1rem;
    border: 2px solid rgba(200, 170, 110, 0.5);
    background: rgba(0, 0, 0, 0.3);
    color: #fff;
    border-radius: 4px;
    font-family: 'Rajdhani', sans-serif;
}

.room-input:focus, .player-input:focus {
    outline: none;
    border-color: rgba(200, 170, 110, 1);
    box-shadow: 0 0 10px rgba(200, 170, 110, 0.3);
}

.join-btn {
    padding: 0.75rem 2rem;
    font-size: 1.1rem;
    margin-top: 1rem;
}

.status-message {
    margin-top: 1rem;
    padding: 0.5rem;
    background: rgba(0, 0, 0, 0.3);
    border-radius: 4px;
    color: #fff;
}

/********************************************
 * Multiplayer Status Bar
 ********************************************/
.multiplayer-status {
    position: absolute;
    top: 20px;
    right: 20px;
    z-index: 100;
    display: flex;
    gap: 15px;
    font-family: 'Orbitron', monospace;
    font-size: 0.9rem;
}

.player-role-indicator, .players-online {
    background: rgba(0, 0, 0, 0.8);
    padding: 8px 16px;
    border: 1px solid rgba(200, 170, 110, 0.5);
    color: #fff;
    clip-path: polygon(0 0, calc(100% - 6px) 0, 100% 6px, 100% 100%, 6px 100%, 0 calc(100% - 6px));
}

.role-piltover {
    border-color: rgba(200, 170, 110, 0.8);
    color: rgba(200, 170, 110, 1);
}

.role-zaunite {
    border-color: rgba(0, 212, 170, 0.8);
    color: rgba(0, 212, 170, 1);
}

/********************************************
 * Connected Players Display
 ********************************************/
.connected-players {
    margin-top: 2rem;
}

.player-tag {
    display: inline-block;
    margin: 0.5rem;
    padding: 0.5rem 1rem;
    background: rgba(0, 0, 0, 0.5);
    border: 1px solid rgba(200, 170, 110, 0.5);
    border-radius: 20px;
    color: #fff;
}

/********************************************
 * Completion Screen
 ********************************************/
.completion-actions {
    margin-top: 2rem;
    display: flex;
    gap: 1rem;
    justify-content: center;
}

.completion-actions .control-btn {
    min-width: 150px;
}

/* Copy all other styles from VisualNovel.razor */
/********************************************
 * Theme-Specific Backgrounds
 ********************************************/
.visual-novel.piltover {
    background: linear-gradient(135deg, #2c1810 0%, #5a4a3a 30%, #c8aa6e 100%);
}

.visual-novel.zaun {
    background: linear-gradient(135deg, #0a1e16 0%, #1a3a2e 30%, #00d4aa 100%);
}

/********************************************
 * Scene Background
 ********************************************/
.scene-background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
}

.background-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    filter: brightness(0.8);
}

.background-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.4);
    z-index: 2;
}

.atmospheric-effects {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 3;
    pointer-events: none;
}

.background-piltover .atmospheric-effects {
    background: radial-gradient(circle at 20% 50%, rgba(200, 170, 110, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 215, 0, 0.05) 0%, transparent 50%);
}

.background-zaun .atmospheric-effects {
    background: radial-gradient(circle at 30% 70%, rgba(0, 212, 170, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 70% 30%, rgba(0, 255, 200, 0.05) 0%, transparent 50%);
}

/********************************************
 * Character Layer
 ********************************************/
.characters-layer {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 4;
    display: flex;
    align-items: flex-end;
    justify-content: center;
}

.characters-layer.single {
    justify-content: center;
}

.characters-layer.dualcharacters {
    justify-content: space-around;
    padding: 0 5%;
}

.character-container {
    position: relative;
    bottom: 25%;
    transition: all 0.6s cubic-bezier(0.25, 0.8, 0.25, 1);
    transform: scale(0.95) translateY(10px);
}

.character-container.active {
    transform: scale(1.05) translateY(0px);
    z-index: 5;
}

.character-container.inactive {
    transform: scale(0.88) translateY(15px);
}

.character-portrait {
    position: relative;
    display: flex;
    align-items: flex-end;
    justify-content: center;
}

.portrait-image {
    max-height: 70vh;
    max-width: 400px;
    object-fit: contain;
    transition: all 0.4s ease-in-out;
    transform-origin: center bottom;
}

/* Active character glow effect for transparent PNGs */
.character-container.active .portrait-image {
    filter: drop-shadow(0 0 20px rgba(255, 255, 255, 0.3))
            drop-shadow(0 10px 40px rgba(0, 0, 0, 0.8))
            drop-shadow(0 0 60px rgba(200, 170, 110, 0.2));
}

/* Inactive character subtle shadow */
.character-container.inactive .portrait-image {
    filter: drop-shadow(0 5px 20px rgba(0, 0, 0, 0.6));
    opacity: 0.6;
}

.character-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 120%;
    height: 120%;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.8s cubic-bezier(0.4, 0, 0.2, 1), 
                transform 0.8s cubic-bezier(0.4, 0, 0.2, 1);
    transform: translate(-50%, -50%) scale(0.8);
    z-index: -1;
}

.character-container.active .character-glow {
    opacity: 0.4;
    transform: translate(-50%, -50%) scale(1);
}

.visual-novel.piltover .character-container.active .character-glow {
    background: radial-gradient(ellipse at center, 
        rgba(200, 170, 110, 0.15) 0%, 
        rgba(200, 170, 110, 0.08) 30%, 
        transparent 70%);
    filter: blur(40px);
}

.visual-novel.zaun .character-container.active .character-glow {
    background: radial-gradient(ellipse at center, 
        rgba(0, 212, 170, 0.15) 0%, 
        rgba(0, 212, 170, 0.08) 30%, 
        transparent 70%);
    filter: blur(40px);
}

/* Enhanced theme-specific portrait shadows */
.visual-novel.piltover .character-container.active .portrait-image {
    filter: drop-shadow(0 0 15px rgba(200, 170, 110, 0.4))
            drop-shadow(0 10px 40px rgba(0, 0, 0, 0.7))
            drop-shadow(0 0 40px rgba(255, 215, 0, 0.15));
}

.visual-novel.zaun .character-container.active .portrait-image {
    filter: drop-shadow(0 0 15px rgba(0, 212, 170, 0.4))
            drop-shadow(0 10px 40px rgba(0, 0, 0, 0.7))
            drop-shadow(0 0 40px rgba(0, 255, 200, 0.15));
}

.left-character {
    align-self: flex-end;
}

.right-character {
    align-self: flex-end;
}

.center-character {
    align-self: flex-end;
}

/********************************************
 * Dialogue Section
 ********************************************/
.dialogue-section {
    position: absolute;
    bottom: 3rem;
    left: 50%;
    transform: translateX(-50%);
    width: 70%;
    max-width: 900px;
    z-index: 6;
}

.dialogue-box {
    position: relative;
    min-height: 200px;
    background: linear-gradient(135deg, 
        rgba(0, 0, 0, 0.92) 0%, 
        rgba(15, 10, 25, 0.88) 50%,
        rgba(0, 0, 0, 0.92) 100%);
    padding: 2.5rem 3rem 2rem 3rem;
    border: none;
    overflow: visible;
    animation: dialogueBoxEntrance 0.8s cubic-bezier(0.25, 0.8, 0.25, 1);
    
    /* Hextech-inspired border design */
    box-shadow: 
        inset 0 0 0 1px rgba(200, 170, 110, 0.8),
        inset 0 0 0 3px rgba(0, 0, 0, 0.9),
        inset 0 0 0 4px rgba(200, 170, 110, 0.4),
        inset 0 0 20px rgba(200, 170, 110, 0.1),
        0 0 50px rgba(0, 0, 0, 0.8),
        0 0 80px rgba(200, 170, 110, 0.15);
    
    /* More dramatic angular corners */
    clip-path: polygon(
        0 15px, 15px 0,
        calc(100% - 15px) 0, 100% 15px,
        100% calc(100% - 15px), calc(100% - 15px) 100%,
        15px 100%, 0 calc(100% - 15px)
    );
}

@@keyframes dialogueBoxEntrance {
    from {
        transform: translateY(50px);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}

.dialogue-piltover {
    background: linear-gradient(135deg, 
        rgba(10, 5, 0, 0.95) 0%, 
        rgba(25, 15, 5, 0.9) 50%,
        rgba(10, 5, 0, 0.95) 100%);
    box-shadow: 
        inset 0 0 0 1px rgba(200, 170, 110, 0.9),
        inset 0 0 0 3px rgba(0, 0, 0, 0.9),
        inset 0 0 0 4px rgba(255, 215, 0, 0.5),
        inset 0 0 30px rgba(255, 215, 0, 0.1),
        0 0 60px rgba(0, 0, 0, 0.8),
        0 0 100px rgba(200, 170, 110, 0.2);
}

.dialogue-zaun {
    background: linear-gradient(135deg, 
        rgba(0, 10, 8, 0.95) 0%, 
        rgba(5, 20, 15, 0.9) 50%,
        rgba(0, 10, 8, 0.95) 100%);
    box-shadow: 
        inset 0 0 0 1px rgba(0, 212, 170, 0.9),
        inset 0 0 0 3px rgba(0, 0, 0, 0.9),
        inset 0 0 0 4px rgba(0, 255, 200, 0.5),
        inset 0 0 30px rgba(0, 255, 200, 0.1),
        0 0 60px rgba(0, 0, 0, 0.8),
        0 0 100px rgba(0, 212, 170, 0.2);
}

/********************************************
 * Dialogue Controls
 ********************************************/
.dialogue-controls-external {
    position: absolute;
    top: -55px;
    right: 20px;
    display: flex;
    gap: 15px;
    z-index: 100;
}

.control-btn {
    padding: 10px 18px;
    border: none;
    background: linear-gradient(135deg, rgba(0, 0, 0, 0.9) 0%, rgba(30, 30, 30, 0.8) 100%);
    color: #fff;
    font-size: 1rem;
    font-family: 'Orbitron', monospace;
    font-weight: 600;
    cursor: pointer;
    position: relative;
    overflow: hidden;
    transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    animation: buttonEntrance 0.6s ease-out;
    
    /* Arcane-style angular shape */
    clip-path: polygon(0 0, calc(100% - 6px) 0, 100% 6px, 100% 100%, 6px 100%, 0 calc(100% - 6px));
    
    /* Glowing border effect */
    box-shadow: 
        inset 0 0 0 1px rgba(200, 170, 110, 0.5),
        0 0 12px rgba(200, 170, 110, 0.2),
        0 2px 8px rgba(0, 0, 0, 0.3);
}

@@keyframes buttonEntrance {
    from {
        transform: translateX(30px);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

.control-btn:hover {
    transform: translateY(-3px) scale(1.05);
    box-shadow: 
        inset 0 0 0 1px rgba(200, 170, 110, 0.9),
        0 0 25px rgba(200, 170, 110, 0.5),
        0 6px 20px rgba(0, 0, 0, 0.4);
}

.control-btn:active {
    transform: translateY(0);
    transition: all 0.1s ease;
}

.control-piltover {
    box-shadow: 
        inset 0 0 0 1px rgba(200, 170, 110, 0.6),
        0 0 15px rgba(200, 170, 110, 0.3),
        0 2px 8px rgba(0, 0, 0, 0.3);
}

.control-piltover:hover {
    box-shadow: 
        inset 0 0 0 1px rgba(200, 170, 110, 0.9),
        0 0 25px rgba(200, 170, 110, 0.5),
        0 4px 16px rgba(0, 0, 0, 0.4);
}

.control-zaun {
    box-shadow: 
        inset 0 0 0 1px rgba(0, 212, 170, 0.6),
        0 0 15px rgba(0, 212, 170, 0.3),
        0 2px 8px rgba(0, 0, 0, 0.3);
}

.control-zaun:hover {
    box-shadow: 
        inset 0 0 0 1px rgba(0, 212, 170, 0.9),
        0 0 25px rgba(0, 212, 170, 0.5),
        0 4px 16px rgba(0, 0, 0, 0.4);
}

/********************************************
 * Character Name Tag
 ********************************************/
.character-name-tag {
    display: inline-block;
    margin-bottom: 1rem;
    padding: 8px 16px;
    background: linear-gradient(135deg, rgba(0, 0, 0, 0.8) 0%, rgba(20, 20, 20, 0.6) 100%);
    border: none;
    font-weight: 700;
    font-size: 1.1rem;
    color: #fff;
    font-family: 'Orbitron', monospace;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    position: relative;
    overflow: hidden;
    animation: nameTagEntrance 0.6s cubic-bezier(0.25, 0.8, 0.25, 1);
    
    /* Arcane-style angular shape */
    clip-path: polygon(0 0, calc(100% - 8px) 0, 100% 8px, 100% 100%, 8px 100%, 0 calc(100% - 8px));
    
    /* Glowing border effect */
    box-shadow: 
        inset 0 0 0 1px rgba(200, 170, 110, 0.6),
        0 0 15px rgba(200, 170, 110, 0.3);
}

@@keyframes nameTagEntrance {
    from {
        transform: translateX(-30px);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

.name-tag-piltover {
    box-shadow: 
        inset 0 0 0 1px rgba(200, 170, 110, 0.8),
        0 0 20px rgba(200, 170, 110, 0.4);
    color: rgba(200, 170, 110, 1);
}

.name-tag-zaun {
    box-shadow: 
        inset 0 0 0 1px rgba(0, 212, 170, 0.8),
        0 0 20px rgba(0, 212, 170, 0.4);
    color: rgba(0, 212, 170, 1);
}

/********************************************
 * Dialogue Content
 ********************************************/
.dialogue-text {
    font-size: 1.3rem;
    line-height: 1.6;
    color: #f8f8f8;
    font-family: 'Rajdhani', sans-serif;
    font-weight: 400;
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.5);
    position: relative;
    z-index: 10;
}

/* Text Animation Classes */
.dialogue-text.typewriter {
    /* Typewriter effect handled by C# code */
}

.dialogue-text.fadein {
    animation: fadeInText 1s ease-in;
}

.dialogue-text.slideup {
    animation: slideUpText 0.8s ease-out;
}

.dialogue-text.instant {
    /* No animation */
}

@@keyframes fadeInText {
    from {
        opacity: 0;
        transform: translateY(10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@@keyframes slideUpText {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/********************************************
 * Loading Screen
 ********************************************/
.loading-spinner {
    width: 60px;
    height: 60px;
    border: 4px solid rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    border-top-color: #c8aa6e;
    animation: spin 1s linear infinite;
    margin: 0 auto;
}

.spinner-piltover {
    border-top-color: #c8aa6e;
}

.spinner-zaun {
    border-top-color: #00d4aa;
}

@@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}

/********************************************
 * Responsive Design
 ********************************************/
@@media (max-width: 768px) {
    .dialogue-section {
        width: 85%;
        bottom: 2rem;
    }
    
    .dialogue-box {
        padding: 2rem 2rem 1.5rem 2rem;
        min-height: 160px;
    }
    
    .dialogue-text {
        font-size: 1.1rem;
    }
    
    .character-name-tag {
        font-size: 0.9rem;
        padding: 3px 6px;
    }
    
    .characters-layer.dualcharacters {
        padding: 0 2%;
        padding-bottom: 35%;
    }
    
    .portrait-image {
        max-height: 60vh;
        max-width: 300px;
    }
    
    .control-btn {
        padding: 8px 14px;
        font-size: 0.9rem;
    }
    
    .dialogue-controls-external {
        top: -50px;
        gap: 10px;
        right: 15px;
    }
    
    .multiplayer-status {
        top: 10px;
        right: 10px;
        font-size: 0.8rem;
        gap: 10px;
    }
    
    .player-role-indicator, .players-online {
        padding: 6px 12px;
    }
}

@@media (max-width: 480px) {
    .dialogue-section {
        width: 95%;
        bottom: 1rem;
    }
    
    .dialogue-text {
        font-size: 1rem;
    }
    
    .portrait-image {
        max-height: 50vh;
        max-width: 250px;
    }
    
    .dialogue-box {
        min-height: 140px;
        padding: 1.5rem 1.5rem 1rem 1.5rem;
    }
    
    .character-name-tag {
        font-size: 0.8rem;
    }
    
    .control-btn {
        padding: 6px 12px;
        font-size: 0.8rem;
    }
    
    .dialogue-controls-external {
        top: -45px;
        gap: 8px;
        right: 10px;
    }
}

/********************************************
 * Hardware Acceleration & Performance
 ********************************************/
.character-container,
.dialogue-box,
.control-btn {
    will-change: transform;
    transform: translateZ(0);
}

.portrait-image {
    backface-visibility: hidden;
    perspective: 1000px;
}

/* Smooth scrolling for long dialogue */
.dialogue-text {
    scroll-behavior: smooth;
}
</style>
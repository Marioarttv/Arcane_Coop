@page "/finalpuzzle"
@page "/finalpuzzle/{*parameters}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using Arcane_Coop.Hubs
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Truth Echo - Final Transition</PageTitle>

<style>
    .page-container {
        min-height: 100vh;
        padding: 2rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
        font-family: 'Segoe UI', system-ui, sans-serif;
        color: #e6e6e6;
    }

    .title-header {
        text-align: center;
        margin-bottom: 1.5rem;
    }

    .title-header h1 {
        font-size: 2.25rem;
        background: linear-gradient(45deg, #00d4ff, #ff00ff);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 0.25rem;
        text-shadow: 0 0 30px rgba(0, 212, 255, 0.35);
    }

    .subtitle {
        color: #a0a0a0;
        font-size: 1rem;
    }

    .status-card {
        background: rgba(20, 20, 40, 0.85);
        border: 1px solid rgba(0, 212, 255, 0.25);
        border-radius: 12px;
        padding: 1rem 1.25rem;
        margin-top: 1rem;
        width: 100%;
        max-width: 720px;
    }

    .row {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .row > div { flex: 1; min-width: 220px; }

    .label { color: #7bdff6; font-weight: 600; }
    .value { color: #e6e6e6; }

    .actions {
        margin-top: 1.5rem;
        display: flex;
        justify-content: center;
    }

    .continue-story-button {
        background: linear-gradient(135deg, #00d4ff, #ff00ff);
        color: white;
        padding: 1rem 2rem;
        font-size: 1.1rem;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        font-weight: bold;
        text-transform: uppercase;
        letter-spacing: 1px;
        transition: all 0.2s ease;
        box-shadow: 0 5px 18px rgba(0, 212, 255, 0.35);
    }

    .continue-story-button:hover:not(:disabled) {
        transform: translateY(-1px);
        box-shadow: 0 8px 24px rgba(0, 212, 255, 0.45);
    }

    .continue-story-button:disabled { opacity: 0.6; cursor: not-allowed; }

    .connecting {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        color: #a0a0a0;
    }

    .spinner {
        width: 16px;
        height: 16px;
        border: 3px solid rgba(0, 212, 255, 0.25);
        border-top: 3px solid #00d4ff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
</style>

<div class="page-container">
    <div class="title-header">
        <h1>Truth Echo</h1>
        <div class="subtitle">Final transition back to the story</div>
    </div>

    <div class="status-card">
        <div class="row">
            <div>
                <div class="label">Connection</div>
                <div class="value">
                    @if (isConnected)
                    {
                        <span>Connected</span>
                    }
                    else
                    {
                        <span class="connecting"><span class="spinner"></span> Connecting...</span>
                    }
                </div>
            </div>
            <div>
                <div class="label">Room</div>
                <div class="value">@(!string.IsNullOrEmpty(gameCode) ? gameCode : "-")</div>
            </div>
            <div>
                <div class="label">Role</div>
                <div class="value">@(!string.IsNullOrEmpty(playerRole) ? playerRole : preservedRole)</div>
            </div>
        </div>

        <div class="actions">
            <button class="continue-story-button" @onclick="ContinueStory">
                Continue Story
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public string? Parameters { get; set; }
    private HubConnection? hubConnection;
    private bool isConnected = false;

    // URL/Join parameters
    private string gameCode = "";              // Unique roomId for final puzzle (squad + transition)
    private string preservedRole = "";         // role from URL (piltover/zaun or A/B)
    private string playerRole = "";            // effective role after join (canonical: piltover/zaun)
    private string squadName = "";
    private string transitionSource = "";
    private bool isStoryMode = false;
    private string playerNameFromUrl = "";

    protected override async Task OnInitializedAsync()
    {
        await SetupSignalR();
        ParseUrlParameters();
        await AutoConnect();
    }

    private async Task SetupSignalR()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
            .Build();

        // Minimal events: redirect + joined
        hubConnection.On<string>("RedirectToNextScene", async (url) =>
        {
            var finalUrl = AppendVolumeParams(url);
            await InvokeAsync(() => Navigation.NavigateTo(finalUrl, forceLoad: true));
        });

        hubConnection.On<string>("RedirectToAct1", async (url) =>
        {
            var finalUrl = AppendVolumeParams(url);
            await InvokeAsync(() => Navigation.NavigateTo(finalUrl, forceLoad: true));
        });

        hubConnection.On<string, string>("PlayerJoined", (role, name) =>
        {
            // If both players needed, server validates; here we just ensure join state is acknowledged
        });

        try
        {
            await hubConnection.StartAsync();
            isConnected = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[FinalPuzzle] Hub start failed: {ex.Message}");
        }
    }

    private string AppendVolumeParams(string url)
    {
        try
        {
            var sep = url.Contains("?") ? "&" : "?";
            var current = new Uri(Navigation.Uri);
            var q = System.Web.HttpUtility.ParseQueryString(current.Query);
            var mv = q["musicVol"] ?? "1.00";
            var sv = q["sfxVol"] ?? "1.00";
            var vv = q["voiceVol"] ?? "1.00";
            return $"{url}{sep}musicVol={Uri.EscapeDataString(mv)}&sfxVol={Uri.EscapeDataString(sv)}&voiceVol={Uri.EscapeDataString(vv)}";
        }
        catch { return url; }
    }

    private void ParseUrlParameters()
    {
        try
        {
            var uri = new Uri(Navigation.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

            var codeParam = query["code"]; // optional legacy/manual
            preservedRole = query["role"] ?? preservedRole;
            var name = query["name"];
            var squad = query["squad"];
            var story = query["story"];
            transitionSource = query["transition"] ?? transitionSource;

            if (!string.IsNullOrEmpty(name)) playerNameFromUrl = Uri.UnescapeDataString(name);
            if (!string.IsNullOrEmpty(squad)) squadName = Uri.UnescapeDataString(squad);
            isStoryMode = story == "true";

            // Prefer explicit room code if provided; otherwise build unique room id (squad + transition)
            if (!string.IsNullOrEmpty(codeParam))
            {
                gameCode = codeParam;
            }
            else if (isStoryMode && !string.IsNullOrEmpty(squadName))
            {
                gameCode = !string.IsNullOrEmpty(transitionSource) ? $"{squadName}_{transitionSource}" : squadName;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[FinalPuzzle] Error parsing URL: {ex.Message}");
        }
    }

    private async Task AutoConnect()
    {
        if (!isConnected) return;
        await Task.Delay(300);
        if (string.IsNullOrEmpty(gameCode)) return;

        // Use room-based lobby like other puzzles; store role/name for personalized redirects
        var displayName = string.IsNullOrEmpty(playerNameFromUrl) ? "Player" : playerNameFromUrl;
        var canonicalRole = CanonicalizeRole(preservedRole);

        await hubConnection.SendAsync("JoinRoom", gameCode, displayName);
        await hubConnection.SendAsync("UpdateLobbyPlayerInfo", gameCode, canonicalRole, "1", displayName);

        playerRole = canonicalRole;
        await InvokeAsync(StateHasChanged);
    }

    private async Task ContinueStory()
    {
        if (hubConnection is null) return;
        try
        {
            var originalRoomId = gameCode;
            var originalSquad = string.IsNullOrEmpty(squadName)
                ? (gameCode.Contains("_") ? gameCode.Substring(0, gameCode.IndexOf("_")) : gameCode)
                : squadName;
            var targetStoryLobby = $"{originalSquad}_FromFinalPuzzle";
            var displayName = string.IsNullOrEmpty(playerNameFromUrl) ? "Player" : playerNameFromUrl;
            var canonicalRole = string.IsNullOrEmpty(playerRole) ? CanonicalizeRole(preservedRole) : playerRole;

            // Scene 16 (truth_revealed) -> sceneIndex 22
            await hubConnection.SendAsync(
                "RedirectPlayersToAct1WithScene",
                originalRoomId,
                targetStoryLobby,
                canonicalRole,
                "1",
                displayName,
                22
            );
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[FinalPuzzle] ContinueStory error: {ex.Message}");
        }
    }

    private static string CanonicalizeRole(string role)
    {
        return (role ?? string.Empty).Trim().ToLowerInvariant() switch
        {
            "piltover" => "piltover",
            "a" => "piltover",
            "zaun" => "zaun",
            "b" => "zaun",
            _ => "piltover"
        };
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
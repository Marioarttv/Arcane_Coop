@page "/lobby/{role}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using Arcane_Coop.Hubs
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Cinzel:wght@400;600;700&family=Rajdhani:wght@300;400;600;700&display=swap" rel="stylesheet">

<div class="character-lobby @GetRoleClass()">
    <!-- Background -->
    <div class="lobby-background">
        <div class="bg-overlay"></div>
        <div class="atmospheric-effects"></div>
    </div>

    <!-- Main Content -->
    <div class="lobby-content">
        <!-- Header Section -->
        <div class="lobby-header">
            <h1 class="lobby-title">
                @if (selectedRole == "zaun")
                {
                    <span class="zaun-title">ZAUN OPERATIVE</span>
                    <span class="subtitle">Underground Network Access</span>
                }
                else
                {
                    <span class="piltover-title">PILTOVER AGENT</span>
                    <span class="subtitle">Hextech Command Interface</span>
                }
            </h1>
            <div class="role-badge @GetRoleClass()">
                <span class="badge-icon">@(selectedRole == "zaun" ? "‚ö°" : "‚öôÔ∏è")</span>
                <span>@(selectedRole.ToUpper()) ALLIANCE</span>
            </div>
        </div>

        <!-- Character Customization Section -->
        <div class="customization-section">
            <div class="customization-grid">
                <!-- Profile Picture Selection -->
                <div class="profile-section">
                    <h3>Choose Your Avatar</h3>
                    <div class="avatar-grid">
                        @foreach (var avatar in GetAvailableAvatars())
                        {
                            <div class="avatar-option @(selectedAvatar == avatar.Index ? "selected" : "")" 
                                 @onclick="() => SelectAvatar(avatar.Index)">
                                <img src="@avatar.ImagePath" 
                                     alt="@avatar.Name" 
                                     class="avatar-image" />
                                <div class="avatar-overlay">
                                    @if (selectedAvatar == avatar.Index)
                                    {
                                        <div class="selected-indicator">‚úì</div>
                                    }
                                    <div class="avatar-name">@avatar.Name</div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Character Details -->
                <div class="details-section">
                    <div class="input-group">
                        <label for="characterName" class="input-label">Operative Codename</label>
                        <input type="text" 
                               id="characterName" 
                               class="character-input @GetRoleClass()" 
                               @bind="characterName" 
                               @bind:event="oninput"
                               placeholder="@(selectedRole == "zaun" ? "Street Name..." : "Agent ID...")"
                               maxlength="20" />
                        <div class="input-decoration"></div>
                    </div>

                    <div class="input-group">
                        <label for="squadName" class="input-label">Squad Designation</label>
                        <input type="text" 
                               id="squadName" 
                               class="character-input @GetRoleClass() @(squadVerified ? "locked" : "")" 
                               @bind="squadName" 
                               @bind:event="oninput"
                               placeholder="@(selectedRole == "zaun" ? "Gang Tag..." : "Unit Name...")"
                               maxlength="15"
                               disabled="@squadVerified" />
                        <div class="input-decoration"></div>
                        <small class="input-help">@(squadVerified ? "Squad verified and locked for this session" : "This will be your lobby name for all multiplayer missions")</small>
                        @if (squadVerified)
                        {
                            <div class="field-lock-icon">üîí</div>
                        }
                    </div>

                    <!-- Character Preview -->
                    <div class="character-preview">
                        <h4>Mission Brief Preview</h4>
                        <div class="preview-card @GetRoleClass()">
                            <div class="preview-avatar">
                                <img src="@GetSelectedAvatarImage()" 
                                     alt="Selected Avatar" 
                                     class="preview-image" />
                            </div>
                            <div class="preview-info">
                                <div class="preview-name">@(string.IsNullOrWhiteSpace(characterName) ? "Unnamed Operative" : characterName)</div>
                                <div class="preview-role">@(selectedRole == "zaun" ? "Zaun Underground" : "Piltover Command")</div>
                                <div class="preview-squad">Squad: @(string.IsNullOrWhiteSpace(squadName) ? "No Squad" : squadName)</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Squad Lobby System -->
        @if (IsFormValid())
        {
            <div class="squad-verification-section">
                @if (!inRoom)
                {
                    <h3>Join Squad Lobby</h3>
                    <div class="verification-card">
                        <div class="verification-header">
                            <div class="verification-icon">üè†</div>
                            <h4>Connect to Squad Lobby</h4>
                        </div>
                        <div class="verification-content">
                            <p>First, both players need to join the same squad lobby with the name: <strong>"@squadName"</strong></p>
                            <div class="verification-buttons">
                                <button class="nav-btn test-btn @GetRoleClass()" @onclick="JoinSquadRoom" disabled="@(!IsFormValid())">
                                    <span class="btn-icon">üö™</span>
                                    <span>Join Squad Lobby</span>
                                </button>
                            </div>
                            
                            @if (!string.IsNullOrEmpty(connectionTestMessage))
                            {
                                <div class="test-message @connectionTestClass">
                                    @connectionTestMessage
                                </div>
                            }
                        </div>
                    </div>
                }
                else if (inRoom)
                {
                    <h3>Squad Members</h3>
                    <div class="verification-card">
                        <div class="verification-header">
                            <div class="verification-icon">@(squadVerified ? "‚úÖ" : "üë•")</div>
                            <h4>Squad Lobby: "@squadName"</h4>
                        </div>
                        <div class="verification-content">
                            <div class="players-section">
                                <div class="players-list">
                                    @foreach (var player in connectedPlayers)
                                    {
                                        <div class="player-card">
                                            <div class="player-icon">üë§</div>
                                            <div class="player-name">@player</div>
                                            <div class="player-status">‚úÖ</div>
                                        </div>
                                    }
                                    @if (connectedPlayers.Count < 2)
                                    {
                                        <div class="player-card waiting">
                                            <div class="player-icon">‚è≥</div>
                                            <div class="player-name">Waiting for partner...</div>
                                        </div>
                                    }
                                </div>
                            </div>
                            
                            @if (squadVerified)
                            {
                                <div class="verified-status">
                                    <p>‚úÖ Squad ready! Both players can now start the story campaign independently.</p>
                                    <small>Squad name is locked for this session.</small>
                                </div>
                            }
                            else if (connectedPlayers.Count < 2)
                            {
                                <p class="waiting-message">Waiting for both players to join the lobby...</p>
                            }
                            
                            @if (!string.IsNullOrEmpty(connectionTestMessage))
                            {
                                <div class="test-message @connectionTestClass">
                                    @connectionTestMessage
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        }


        <!-- Development Testing Section -->
        @if (squadVerified)
        {
            <div class="testing-section">
                <div class="testing-card">
                    <div class="testing-header">
                        <div class="testing-icon">üß™</div>
                        <h4>Development Testing</h4>
                    </div>
                    <div class="testing-content">
                        @if (!showSceneSelection)
                        {
                            <p>Want to continue where you left off or test specific scenes?</p>
                            <div class="testing-buttons">
                                <button class="nav-btn test-option-btn @GetRoleClass()" @onclick="ShowSceneSelection">
                                    <span class="btn-icon">üéØ</span>
                                    <span>Continue Where You Left Off</span>
                                </button>
                            </div>
                        }
                        else
                        {
                            <p>Select where you want to start your story campaign:</p>
                            <div class="scene-selection-grid">
                                <div class="scene-group">
                                    <h5>üìñ Visual Novel Scenes</h5>
                                    <button class="scene-btn scene-btn-story @GetRoleClass()" @onclick="() => StartFromScene(0)">
                                        <span class="scene-icon">üö®</span>
                                        <span class="scene-name">Emergency Briefing</span>
                                        <span class="scene-desc">Scenes 1 & 2 - Story Start</span>
                                    </button>
                                    <button class="scene-btn scene-btn-story @GetRoleClass()" @onclick="() => StartFromScene(2)">
                                        <span class="scene-icon">üóÑÔ∏è</span>
                                        <span class="scene-name">Database Revelation</span>
                                        <span class="scene-desc">Scene 3 - After Picture Puzzle</span>
                                    </button>
                                </div>
                                
                                <div class="scene-group">
                                    <h5>üß© Puzzle Transitions</h5>
                                    <button class="scene-btn scene-btn-puzzle @GetRoleClass()" @onclick="StartFromPictureExplanation">
                                        <span class="scene-icon">üñºÔ∏è</span>
                                        <span class="scene-name">Picture Explanation</span>
                                        <span class="scene-desc">After Emergency Briefing</span>
                                    </button>
                                    <button class="scene-btn scene-btn-puzzle @GetRoleClass()" @onclick="StartFromSignalDecoder">
                                        <span class="scene-icon">üì°</span>
                                        <span class="scene-name">Signal Decoder</span>
                                        <span class="scene-desc">After Database Revelation</span>
                                    </button>
                                </div>
                            </div>
                            <div class="testing-buttons">
                                <button class="nav-btn back-test-btn" @onclick="HideSceneSelection">
                                    <span class="btn-icon">‚Üê</span>
                                    <span>Back</span>
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }

        <!-- Navigation Controls -->
        <div class="navigation-controls">
            <button class="nav-btn back-btn" @onclick="GoBack">
                <span class="btn-icon">‚Üê</span>
                <span>Back to Alliance Selection</span>
            </button>

            <button class="nav-btn continue-btn @GetRoleClass()" 
                    @onclick="StartStoryMode" 
                    disabled="@(!squadVerified)">
                <span>Begin Story Campaign</span>
                <span class="btn-icon">‚Üí</span>
                <div class="btn-effect"></div>
            </button>
        </div>
    </div>
</div>

<style>
/* Character Lobby Styles */
.character-lobby {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    font-family: 'Rajdhani', sans-serif;
    color: #fff;
    overflow-y: auto;
}

.character-lobby.zaun {
    --primary-color: #00d4aa;
    --secondary-color: #0f3427;
    --accent-color: #00ffc8;
    --bg-gradient: linear-gradient(135deg, #0a1e16 0%, #1a3a2e 30%, #00d4aa 100%);
}

.character-lobby.piltover {
    --primary-color: #c8aa6e;
    --secondary-color: #2c1810;
    --accent-color: #ffd700;
    --bg-gradient: linear-gradient(135deg, #2c1810 0%, #5a4a3a 30%, #c8aa6e 100%);
}

.lobby-background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--bg-gradient);
    z-index: 1;
}

.bg-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.3);
}

.atmospheric-effects {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: radial-gradient(circle at 20% 50%, rgba(0, 212, 170, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(0, 255, 200, 0.05) 0%, transparent 50%);
}

.lobby-content {
    position: relative;
    z-index: 2;
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    gap: 2rem;
}

/* Header Section */
.lobby-header {
    text-align: center;
    margin-bottom: 2rem;
}

.lobby-title {
    font-family: 'Arcane Nine', 'Cinzel', serif;
    font-size: 3rem;
    margin-bottom: 0.5rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.zaun-title {
    color: var(--primary-color);
    text-shadow: 0 0 20px var(--accent-color)30;
}

.piltover-title {
    color: var(--primary-color);
    text-shadow: 0 0 20px var(--accent-color)30;
}

.subtitle {
    font-size: 1.2rem;
    font-family: 'Orbitron', monospace;
    opacity: 0.8;
    text-transform: uppercase;
    letter-spacing: 0.1em;
}

.role-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: linear-gradient(135deg, rgba(0, 0, 0, 0.6) 0%, rgba(20, 20, 20, 0.4) 100%);
    border: 2px solid var(--primary-color);
    border-radius: 25px;
    font-family: 'Orbitron', monospace;
    font-weight: 600;
    margin-top: 1rem;
    box-shadow: 0 0 20px var(--primary-color)20;
}

/* Customization Section */
.customization-section {
    flex: 1;
}

.customization-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    align-items: start;
}

.profile-section h3,
.details-section h4 {
    font-family: 'Orbitron', monospace;
    color: var(--primary-color);
    margin-bottom: 1rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
}

/* Avatar Selection */
.avatar-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
}

.avatar-option {
    position: relative;
    aspect-ratio: 1;
    border-radius: 10px;
    overflow: hidden;
    cursor: pointer;
    transition: all 0.3s ease;
    border: 3px solid transparent;
}

.avatar-option:hover {
    transform: scale(1.05);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
}

.avatar-option.selected {
    border-color: var(--primary-color);
    box-shadow: 0 0 25px var(--primary-color)50;
}

.avatar-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.avatar-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, transparent 0%, rgba(0, 0, 0, 0.7) 100%);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.avatar-option:hover .avatar-overlay,
.avatar-option.selected .avatar-overlay {
    opacity: 1;
}

.avatar-name {
    font-size: 0.8rem;
    font-weight: 600;
    text-align: center;
    margin-top: 0.5rem;
    color: #fff;
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.8);
}

.selected-indicator {
    background: var(--primary-color);
    color: #000;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    box-shadow: 0 0 15px var(--primary-color);
}

/* Input Styling */
.input-group {
    position: relative;
    margin-bottom: 1.5rem;
}

.input-label {
    display: block;
    font-family: 'Orbitron', monospace;
    color: var(--primary-color);
    margin-bottom: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-size: 0.9rem;
}

.character-input {
    width: 100%;
    padding: 1rem;
    background: linear-gradient(135deg, rgba(0, 0, 0, 0.6) 0%, rgba(20, 20, 20, 0.4) 100%);
    border: 2px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    color: #fff;
    font-family: 'Rajdhani', sans-serif;
    font-size: 1.1rem;
    transition: all 0.3s ease;
}

.character-input:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 15px var(--primary-color)30;
}

.character-input.zaun:focus {
    box-shadow: 0 0 15px #00d4aa30;
}

.character-input.piltover:focus {
    box-shadow: 0 0 15px #c8aa6e30;
}

.input-decoration {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 2px;
    background: var(--primary-color);
    transition: width 0.3s ease;
}

.character-input:focus + .input-decoration {
    width: 100%;
}

.input-help {
    font-size: 0.8rem;
    opacity: 0.7;
    margin-top: 0.5rem;
    font-style: italic;
}

.character-input.locked {
    background: rgba(100, 100, 100, 0.3);
    color: rgba(255, 255, 255, 0.6);
    cursor: not-allowed;
    border-color: rgba(255, 255, 255, 0.2);
}

.character-input.locked:focus {
    border-color: rgba(255, 255, 255, 0.2);
    box-shadow: none;
}

.field-lock-icon {
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    font-size: 1.2rem;
    color: var(--primary-color);
    opacity: 0.7;
}

/* Character Preview */
.character-preview {
    margin-top: 2rem;
}

.preview-card {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: linear-gradient(135deg, rgba(0, 0, 0, 0.4) 0%, rgba(20, 20, 20, 0.2) 100%);
    border: 2px solid var(--primary-color);
    border-radius: 10px;
    backdrop-filter: blur(10px);
}

.preview-avatar {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    overflow: hidden;
    border: 2px solid var(--primary-color);
}

.preview-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.preview-info {
    flex: 1;
}

.preview-name {
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--primary-color);
}

.preview-role,
.preview-squad {
    font-size: 0.9rem;
    opacity: 0.8;
    margin-top: 0.2rem;
}

/* Squad Verification Section */
.squad-verification-section {
    margin-bottom: 2rem;
}

.squad-verification-section h3 {
    font-family: 'Orbitron', monospace;
    color: var(--primary-color);
    text-align: center;
    margin-bottom: 1.5rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
}

.verification-card {
    background: linear-gradient(135deg, rgba(0, 0, 0, 0.6) 0%, rgba(20, 20, 20, 0.4) 100%);
    border: 2px solid var(--primary-color);
    border-radius: 15px;
    padding: 2rem;
    backdrop-filter: blur(10px);
}

.verification-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1.5rem;
    text-align: center;
    justify-content: center;
}

.verification-icon {
    font-size: 2rem;
}

.verification-header h4 {
    font-family: 'Orbitron', monospace;
    color: var(--primary-color);
    margin: 0;
    text-transform: uppercase;
}

.verification-steps {
    margin: 1.5rem 0;
}

.step {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
    padding: 0.5rem;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 8px;
}

.step-number {
    background: var(--primary-color);
    color: #000;
    width: 25px;
    height: 25px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    font-size: 0.9rem;
}


.test-btn {
    background: linear-gradient(135deg, var(--accent-color) 0%, var(--primary-color) 100%);
    color: #000;
}

.disconnect-btn {
    background: rgba(220, 53, 69, 0.8);
    color: #fff;
    border: 1px solid rgba(220, 53, 69, 0.5);
}

.disconnect-btn:hover {
    background: rgba(220, 53, 69, 1);
    box-shadow: 0 0 15px rgba(220, 53, 69, 0.4);
}

.verification-buttons {
    display: flex;
    justify-content: center;
    margin: 1.5rem 0;
    gap: 1rem;
    flex-wrap: wrap;
}

.test-message {
    text-align: center;
    padding: 1rem;
    border-radius: 8px;
    margin-top: 1rem;
    font-weight: 600;
}

.test-warning {
    background: rgba(255, 193, 7, 0.2);
    border: 1px solid rgba(255, 193, 7, 0.5);
    color: #ffc107;
}

.test-success {
    background: rgba(40, 167, 69, 0.2);
    border: 1px solid rgba(40, 167, 69, 0.5);
    color: #28a745;
}

.test-info {
    background: rgba(23, 162, 184, 0.2);
    border: 1px solid rgba(23, 162, 184, 0.5);
    color: #17a2b8;
}

.verified-status {
    text-align: center;
    padding: 1.5rem;
    background: rgba(40, 167, 69, 0.1);
    border-radius: 10px;
    border: 2px solid rgba(40, 167, 69, 0.3);
}

.verified-status p {
    margin-bottom: 0.5rem;
    font-size: 1.1rem;
    font-weight: 600;
    color: #28a745;
}

.verified-status small {
    opacity: 0.8;
}


@@keyframes spin {
    to { transform: rotate(360deg); }
}

/* Players Section */
.players-section {
    margin: 1.5rem 0;
}

.players-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    margin-bottom: 1.5rem;
}

.player-card {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    background: rgba(40, 167, 69, 0.1);
    border: 1px solid #28a745;
    border-radius: 8px;
    padding: 0.75rem 1rem;
}

.player-card.waiting {
    background: rgba(200, 170, 110, 0.05);
    border-color: rgba(200, 170, 110, 0.5);
    opacity: 0.7;
}

.player-icon {
    font-size: 1.2rem;
    color: #28a745;
}

.player-card.waiting .player-icon {
    color: var(--primary-color);
    animation: pulse-waiting 2s infinite;
}

.player-name {
    flex: 1;
    color: #f0e6d2;
    font-family: 'Orbitron', sans-serif;
    font-weight: 600;
    font-size: 0.9rem;
}

.player-status {
    font-size: 1rem;
    color: #28a745;
}

.waiting-message {
    text-align: center;
    color: rgba(255, 255, 255, 0.7);
    font-style: italic;
    margin: 1rem 0;
}

@@keyframes pulse-waiting {
    0%, 100% { opacity: 0.5; }
    50% { opacity: 1; }
}

/* Development Testing Section */
.testing-section {
    margin-bottom: 2rem;
}

.testing-card {
    background: linear-gradient(135deg, rgba(255, 140, 0, 0.1) 0%, rgba(255, 165, 0, 0.05) 100%);
    border: 2px solid rgba(255, 140, 0, 0.3);
    border-radius: 15px;
    padding: 2rem;
    backdrop-filter: blur(10px);
}

.testing-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1.5rem;
    text-align: center;
    justify-content: center;
}

.testing-icon {
    font-size: 2rem;
    color: #ff8c00;
}

.testing-header h4 {
    font-family: 'Orbitron', monospace;
    color: #ff8c00;
    margin: 0;
    text-transform: uppercase;
    text-shadow: 0 0 10px rgba(255, 140, 0, 0.5);
}

.testing-content p {
    text-align: center;
    margin-bottom: 1.5rem;
    color: rgba(255, 255, 255, 0.9);
}

.testing-buttons {
    display: flex;
    justify-content: center;
    gap: 1rem;
    flex-wrap: wrap;
}

.test-option-btn {
    background: linear-gradient(135deg, #ff8c00 0%, #ffa500 100%);
    color: #000;
    border: 2px solid #ff8c00;
    box-shadow: 0 0 15px rgba(255, 140, 0, 0.3);
}

.test-option-btn:hover {
    box-shadow: 0 0 25px rgba(255, 140, 0, 0.5);
    transform: translateY(-2px);
}

.scene-selection-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    margin-bottom: 2rem;
}

.scene-group h5 {
    font-family: 'Orbitron', monospace;
    color: var(--primary-color);
    text-transform: uppercase;
    margin-bottom: 1rem;
    text-align: center;
    font-size: 1rem;
    letter-spacing: 0.05em;
}

.scene-btn {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    padding: 1.5rem 1rem;
    margin-bottom: 1rem;
    background: linear-gradient(135deg, rgba(0, 0, 0, 0.6) 0%, rgba(20, 20, 20, 0.4) 100%);
    border: 2px solid rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    color: #fff;
    font-family: 'Rajdhani', sans-serif;
    cursor: pointer;
    transition: all 0.3s ease;
    text-align: center;
    width: 100%;
}

.scene-btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
}

.scene-btn-story {
    border-color: #4a90e2;
}

.scene-btn-story:hover {
    border-color: #5da3f5;
    box-shadow: 0 8px 25px rgba(77, 144, 226, 0.3);
}

.scene-btn-puzzle {
    border-color: #e67e22;
}

.scene-btn-puzzle:hover {
    border-color: #f39c12;
    box-shadow: 0 8px 25px rgba(230, 126, 34, 0.3);
}

.scene-btn.zaun:hover {
    border-color: var(--primary-color);
    box-shadow: 0 8px 25px var(--primary-color)30;
}

.scene-btn.piltover:hover {
    border-color: var(--primary-color);
    box-shadow: 0 8px 25px var(--primary-color)30;
}

.scene-icon {
    font-size: 2rem;
    margin-bottom: 0.5rem;
}

.scene-name {
    font-weight: 700;
    font-size: 1.1rem;
    color: var(--primary-color);
    margin-bottom: 0.25rem;
}

.scene-desc {
    font-size: 0.9rem;
    opacity: 0.8;
    font-style: italic;
}

.back-test-btn {
    background: rgba(108, 117, 125, 0.8);
    color: #fff;
    border: 1px solid rgba(108, 117, 125, 0.5);
}

.back-test-btn:hover {
    background: rgba(108, 117, 125, 1);
    box-shadow: 0 0 15px rgba(108, 117, 125, 0.4);
}

/* Navigation Controls */
.navigation-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 2rem;
    padding-top: 2rem;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
}

.nav-btn {
    padding: 1rem 2rem;
    border: none;
    border-radius: 8px;
    font-family: 'Orbitron', monospace;
    font-weight: 600;
    text-transform: uppercase;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    position: relative;
    overflow: hidden;
}

.back-btn {
    background: rgba(255, 255, 255, 0.1);
    color: #fff;
    border: 1px solid rgba(255, 255, 255, 0.3);
}

.back-btn:hover {
    background: rgba(255, 255, 255, 0.2);
}

.continue-btn {
    background: linear-gradient(135deg, var(--primary-color) 0%, var(--accent-color) 100%);
    color: #000;
    border: 2px solid var(--primary-color);
    box-shadow: 0 0 20px var(--primary-color)30;
}

.continue-btn:hover:not(:disabled) {
    box-shadow: 0 0 30px var(--primary-color)50;
    transform: translateY(-2px);
}

.continue-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
}

.btn-effect {
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s ease;
}

.continue-btn:hover:not(:disabled) .btn-effect {
    left: 100%;
}

/* Responsive Design */
@@media (max-width: 768px) {
    .lobby-content {
        padding: 1rem;
    }
    
    .lobby-title {
        font-size: 2rem;
    }
    
    .customization-grid {
        grid-template-columns: 1fr;
    }
    
    .scene-selection-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
    }
    
    .navigation-controls {
        flex-direction: column;
        gap: 1rem;
    }
    
    .nav-btn {
        width: 100%;
        justify-content: center;
    }
}

@@media (max-width: 480px) {
    .lobby-title {
        font-size: 1.5rem;
    }
    
    .avatar-grid {
        grid-template-columns: repeat(2, 1fr);
    }
}
</style>

@code {
    [Parameter] public string Role { get; set; } = "";
    
    private string selectedRole = "";
    private int selectedAvatar = 1;
    private string characterName = "";
    private string squadName = "";
    
    // Squad verification
    private bool squadVerified = false;
    private bool inRoom = false;
    private string connectionTestMessage = "";
    private string connectionTestClass = "";
    private bool isTestingConnection = false;
    private List<string> connectedPlayers = new();
    private string? piltoverTakenBy = null;
    private string? zaunTakenBy = null;
    
    // SignalR connections
    private HubConnection? lobbyConnection;
    private HubConnection? verificationConnection;
    
    // Development testing
    private bool showSceneSelection = false;

    public class AvatarOption
    {
        public int Index { get; set; }
        public string Name { get; set; } = "";
        public string ImagePath { get; set; } = "";
    }

    protected override void OnInitialized()
    {
        selectedRole = Role?.ToLower() ?? "zaun";
    }

    private List<AvatarOption> GetAvailableAvatars()
    {
        if (selectedRole == "zaun")
        {
            return new List<AvatarOption>
            {
                new AvatarOption { Index = 1, Name = "Vi", ImagePath = "/images/Vi.jpeg" },
                new AvatarOption { Index = 2, Name = "Caitlyn", ImagePath = "/images/Cait.jpeg" },
                new AvatarOption { Index = 3, Name = "Street Fighter", ImagePath = "/images/Vi.jpeg" } // Placeholder
            };
        }
        else
        {
            return new List<AvatarOption>
            {
                new AvatarOption { Index = 1, Name = "Jayce", ImagePath = "/images/Jayce.jpeg" },
                new AvatarOption { Index = 2, Name = "Viktor", ImagePath = "/images/Viktor.jpeg" },
                new AvatarOption { Index = 3, Name = "Enforcer", ImagePath = "/images/Cait.jpeg" } // Placeholder
            };
        }
    }

    private string GetSelectedAvatarImage()
    {
        var avatars = GetAvailableAvatars();
        var selectedAvatarOption = avatars.FirstOrDefault(a => a.Index == selectedAvatar);
        return selectedAvatarOption?.ImagePath ?? avatars.First().ImagePath;
    }

    private void SelectAvatar(int avatarIndex)
    {
        selectedAvatar = avatarIndex;
    }

    private string GetRoleClass()
    {
        return selectedRole == "zaun" ? "zaun" : "piltover";
    }

    private bool AreRolesDistinct()
    {
        return !string.IsNullOrWhiteSpace(piltoverTakenBy) && !string.IsNullOrWhiteSpace(zaunTakenBy);
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(characterName) && 
               !string.IsNullOrWhiteSpace(squadName) &&
               characterName.Length >= 2 &&
               squadName.Length >= 2;
    }

    private async Task StartStoryMode()
    {
        if (!squadVerified) return;
        
        // Generate a unique lobby name for story campaign to prevent conflicts with other lobby uses
        var storyLobbyName = GenerateStoryLobbyName(squadName);
        
        // Use SignalR to redirect both players to Act 1 multiplayer
        if (lobbyConnection?.State == HubConnectionState.Connected)
        {
            await lobbyConnection.SendAsync("UpdateLobbyPlayerInfo", squadName, selectedRole, selectedAvatar.ToString(), characterName);
            await lobbyConnection.SendAsync("RedirectPlayersToAct1", squadName, storyLobbyName, selectedRole, selectedAvatar.ToString(), characterName);
        }
        else
        {
            // Fallback: direct navigation if SignalR not connected
            var parameters = $"roomId={Uri.EscapeDataString(storyLobbyName)}&role={selectedRole}&avatar={selectedAvatar}&name={Uri.EscapeDataString(characterName)}&squad={Uri.EscapeDataString(squadName)}";
            NavigationManager.NavigateTo($"/act1-multiplayer?{parameters}");
        }
    }
    
    private string GenerateStoryLobbyName(string originalName)
    {
        // Add modifier to prevent conflicts: original name + "_story_" + timestamp
        var timestamp = DateTimeOffset.UtcNow.ToUnixTimeSeconds();
        return $"{originalName}_story_{timestamp}";
    }

    private void AutoVerifySquad()
    {
        if (squadVerified) return;
        
        squadVerified = true;
        connectionTestMessage = "‚úÖ Squad ready! Story campaign unlocked.";
        connectionTestClass = "test-success";
        
        // Auto-hide success message after 3 seconds
        _ = Task.Delay(3000).ContinueWith(_ =>
        {
            connectionTestMessage = "";
            connectionTestClass = "";
            InvokeAsync(StateHasChanged);
        });
    }

    private int connectedPlayersCount = 0;
    private bool verificationComplete = false;

    private async Task JoinSquadRoom()
    {
        if (!IsFormValid()) return;
        
        try
        {
            // Initialize lobby connection
            lobbyConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
                .Build();

            // Set up lobby event handlers
            lobbyConnection.On<string, string>("PlayerJoined", (name, connectionId) =>
            {
                if (!connectedPlayers.Contains(name))
                {
                    connectedPlayers.Add(name);
                }
                if (connectionId != lobbyConnection.ConnectionId)
                {
                    connectionTestMessage = $"{name} joined the squad lobby";
                    connectionTestClass = "test-info";
                }
                
                // Auto-verify when lobby is full
                if (connectedPlayers.Count >= 2 && !squadVerified)
                {
                    AutoVerifySquad();
                }
                
                InvokeAsync(StateHasChanged);
            });

            lobbyConnection.On<string, string>("PlayerLeft", (name, connectionId) =>
            {
                connectedPlayers.Remove(name);
                connectionTestMessage = $"{name} left the squad lobby";
                connectionTestClass = "test-warning";
                InvokeAsync(StateHasChanged);
            });

            lobbyConnection.On<List<string>>("RoomState", (playerNames) =>
            {
                connectedPlayers.Clear();
                connectedPlayers.AddRange(playerNames);
                
                // Auto-verify when lobby is full
                if (playerNames.Count >= 2 && !squadVerified)
                {
                    AutoVerifySquad();
                }
                
                InvokeAsync(StateHasChanged);
            });

            lobbyConnection.On<string>("RedirectToAct1", (url) =>
            {
                InvokeAsync(() =>
                {
                    NavigationManager.NavigateTo(url);
                });
            });
            
            lobbyConnection.On<string?, string?>("LobbyRolesUpdated", (piltoverBy, zaunBy) =>
            {
                piltoverTakenBy = piltoverBy;
                zaunTakenBy = zaunBy;
                InvokeAsync(StateHasChanged);
            });
            
            await lobbyConnection.StartAsync();
            await lobbyConnection.SendAsync("JoinRoom", squadName, characterName);
            await lobbyConnection.SendAsync("UpdateLobbyPlayerInfo", squadName, selectedRole, selectedAvatar.ToString(), characterName);
            await lobbyConnection.SendAsync("RequestLobbyRoles", squadName);
            
            inRoom = true;
            if (!connectedPlayers.Contains(characterName))
            {
                connectedPlayers.Add(characterName);
            }
            connectionTestMessage = $"Joined squad lobby: {squadName}";
            connectionTestClass = "test-success";
        }
        catch (Exception ex)
        {
            connectionTestMessage = $"Failed to join lobby: {ex.Message}";
            connectionTestClass = "test-warning";
        }
        
        StateHasChanged();
    }

    private async Task VerifySquadConnection()
    {
        if (!IsFormValid() || isTestingConnection) return;
        
        isTestingConnection = true;
        connectedPlayersCount = 0;
        verificationComplete = false;
        connectionTestMessage = "Connecting to squad verification...";
        connectionTestClass = "test-info";
        StateHasChanged();
        
        try
        {
            // Initialize SignalR for verification
            verificationConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
                .Build();

            // Set up event handlers for verification
            verificationConnection.On<string, string>("PlayerJoined", (name, connectionId) =>
            {
                connectedPlayersCount++;
                InvokeAsync(() =>
                {
                    if (connectedPlayersCount == 1)
                    {
                        connectionTestMessage = "First player connected. Waiting for second player...";
                        connectionTestClass = "test-info";
                    }
                    else if (connectedPlayersCount >= 2)
                    {
                        CompleteVerification();
                    }
                    StateHasChanged();
                });
            });

            verificationConnection.On<List<string>>("RoomState", (playerNames) =>
            {
                connectedPlayersCount = playerNames.Count;
                InvokeAsync(() =>
                {
                    if (connectedPlayersCount >= 2 && !verificationComplete)
                    {
                        CompleteVerification();
                    }
                    else if (connectedPlayersCount == 1)
                    {
                        connectionTestMessage = "First player connected. Waiting for second player...";
                        connectionTestClass = "test-info";
                    }
                    StateHasChanged();
                });
            });
            
            await verificationConnection.StartAsync();
            
            // Join the verification room
            await verificationConnection.SendAsync("JoinRoom", squadName, characterName);
            
            // Set a timeout for verification
            _ = Task.Delay(30000).ContinueWith(async _ =>
            {
                if (!verificationComplete)
                {
                    await InvokeAsync(() =>
                    {
                        connectionTestMessage = "Verification timeout. Please try again.";
                        connectionTestClass = "test-warning";
                        isTestingConnection = false;
                        StateHasChanged();
                    });
                    await CleanupVerificationConnection();
                }
            });
        }
        catch (Exception ex)
        {
            connectionTestMessage = $"Connection failed: {ex.Message}";
            connectionTestClass = "test-warning";
            isTestingConnection = false;
            StateHasChanged();
        }
    }

    private void CompleteVerification()
    {
        if (verificationComplete) return;
        
        verificationComplete = true;
        squadVerified = true;
        connectionTestMessage = "‚úÖ Squad verification successful! Both players connected.";
        connectionTestClass = "test-success";
        isTestingConnection = false;
        
        // Clean up the verification connection after a brief delay
        _ = Task.Delay(2000).ContinueWith(async _ => await CleanupVerificationConnection());
    }

    private async Task CleanupVerificationConnection()
    {
        try
        {
            if (verificationConnection != null)
            {
                if (verificationConnection.State == HubConnectionState.Connected)
                {
                    await verificationConnection.SendAsync("LeaveRoom", squadName, characterName);
                }
                await verificationConnection.DisposeAsync();
                verificationConnection = null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Cleanup error: {ex.Message}");
        }
    }
    
    private async Task CleanupLobbyConnection()
    {
        try
        {
            if (lobbyConnection != null)
            {
                if (lobbyConnection.State == HubConnectionState.Connected)
                {
                    await lobbyConnection.SendAsync("LeaveRoom", squadName, characterName);
                }
                await lobbyConnection.DisposeAsync();
                lobbyConnection = null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lobby cleanup error: {ex.Message}");
        }
    }



    private void ShowSceneSelection()
    {
        showSceneSelection = true;
    }
    
    private void HideSceneSelection()
    {
        showSceneSelection = false;
    }
    
    private async Task StartFromScene(int sceneIndex)
    {
        if (!squadVerified) return;
        
        // Generate a shared lobby name for testing (without timestamp to ensure consistency)
        var testLobbyName = GenerateSharedTestLobbyName(squadName, $"scene{sceneIndex}");
        
        // Use SignalR to redirect both players to Act 1 multiplayer at specific scene
        if (lobbyConnection?.State == HubConnectionState.Connected)
        {
            await lobbyConnection.SendAsync("UpdateLobbyPlayerInfo", squadName, selectedRole, selectedAvatar.ToString(), characterName);
            await lobbyConnection.SendAsync("RedirectPlayersToAct1WithScene", squadName, testLobbyName, selectedRole, selectedAvatar.ToString(), characterName, sceneIndex);
        }
        else
        {
            // Fallback: direct navigation if SignalR not connected
            var parameters = $"roomId={Uri.EscapeDataString(testLobbyName)}&role={selectedRole}&avatar={selectedAvatar}&name={Uri.EscapeDataString(characterName)}&squad={Uri.EscapeDataString(squadName)}&sceneIndex={sceneIndex}";
            NavigationManager.NavigateTo($"/act1-multiplayer?{parameters}");
        }
    }
    
    private async Task StartFromPictureExplanation()
    {
        if (!squadVerified) return;
        
        // Generate a shared room name for testing (without timestamp)
        var testRoomName = GenerateSharedTestLobbyName(squadName, "picture-explanation");
        
        // Use SignalR to redirect both players to Picture Explanation puzzle
        if (lobbyConnection?.State == HubConnectionState.Connected)
        {
            await lobbyConnection.SendAsync("UpdateLobbyPlayerInfo", squadName, selectedRole, selectedAvatar.ToString(), characterName);
            await lobbyConnection.SendAsync("RedirectPlayersToPuzzle", squadName, testRoomName, selectedRole, selectedAvatar.ToString(), characterName, "picture-explanation");
        }
        else
        {
            // Fallback: direct navigation if SignalR not connected
            var parameters = $"role={selectedRole}&avatar={selectedAvatar}&name={Uri.EscapeDataString(characterName)}&squad={testRoomName}&story=true";
            NavigationManager.NavigateTo($"/picture-explanation?{parameters}");
        }
    }
    
    private async Task StartFromSignalDecoder()
    {
        if (!squadVerified) return;
        
        // Generate a shared room name for testing (without timestamp)
        var testRoomName = GenerateSharedTestLobbyName(squadName, "signal-decoder");
        
        // Use SignalR to redirect both players to Signal Decoder puzzle
        if (lobbyConnection?.State == HubConnectionState.Connected)
        {
            await lobbyConnection.SendAsync("UpdateLobbyPlayerInfo", squadName, selectedRole, selectedAvatar.ToString(), characterName);
            await lobbyConnection.SendAsync("RedirectPlayersToPuzzle", squadName, testRoomName, selectedRole, selectedAvatar.ToString(), characterName, "signal-decoder");
        }
        else
        {
            // Fallback: direct navigation if SignalR not connected
            var parameters = $"role={selectedRole}&avatar={selectedAvatar}&name={Uri.EscapeDataString(characterName)}&squad={testRoomName}&story=true";
            NavigationManager.NavigateTo($"/signal-decoder?{parameters}");
        }
    }
    
    private string GenerateSharedTestLobbyName(string originalName, string identifier)
    {
        // Shared naming for synchronized testing (both players get same room name)
        return $"{originalName}_test_{identifier}";
    }
    
    private string GenerateTestLobbyName(string originalName, object identifier)
    {
        // Unique naming for individual testing (timestamp-based, legacy)
        var timestamp = DateTimeOffset.UtcNow.ToUnixTimeSeconds();
        return $"{originalName}_test_{identifier}_{timestamp}";
    }
    
    private void GoBack()
    {
        NavigationManager.NavigateTo("/");
    }

    public async ValueTask DisposeAsync()
    {
        await CleanupVerificationConnection();
        await CleanupLobbyConnection();
    }
}
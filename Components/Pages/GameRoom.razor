@page "/room/{roomId}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using Arcane_Coop.Services
@using Arcane_Coop.Models
@implements IAsyncDisposable
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Arcane Escape Room - @RoomId</PageTitle>

<div class="game-room">
    @if (!IsConnected)
    {
        <div class="connection-status">
            <h3>Connecting to room...</h3>
            <div class="loading-spinner"></div>
        </div>
    }
    else if (currentRoom == null)
    {
        <div class="room-setup">
            <h3>Join Room: @RoomId</h3>
            <div class="player-setup-form">
                <div class="form-group">
                    <label for="playerName">Your Name:</label>
                    <input @bind="playerName" id="playerName" class="form-control" maxlength="20" />
                </div>
                
                <div class="join-info">
                    <p>You will be automatically assigned to the opposite city from your partner!</p>
                </div>


                <button class="join-btn" @onclick="JoinRoom" 
                        disabled="@(string.IsNullOrEmpty(playerName))">
                    Join Room
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="game-interface">
            <!-- Room Header -->
            <div class="room-header">
                <h2>@currentRoom.RoomName</h2>
                <div class="room-info">
                    <div class="room-code-display">
                        <label>Share this code with your partner:</label>
                        <div class="room-code">@RoomId</div>
                        <button class="copy-btn" @onclick="CopyRoomCode">üìã Copy Code</button>
                    </div>
                    <span class="player-count">Players: @currentRoom.Players.Count/@currentRoom.MaxPlayers</span>
                </div>
            </div>

            @if (currentRoom.Players.Count < currentRoom.MaxPlayers)
            {
                <div class="waiting-room">
                    <div class="waiting-message">
                        <h3>üïê Waiting for your partner to join...</h3>
                        <p>Share the room code <strong>@RoomId</strong> with your partner to start the escape room!</p>
                        <div class="waiting-animation">
                            <div class="pulse"></div>
                        </div>
                    </div>
                </div>
            }

            <!-- Players Panel -->
            <div class="players-panel">
                <h3>Players</h3>
                @foreach (var player in currentRoom.Players.Where(p => p.IsConnected))
                {
                    <div class="player-card @player.City.ToLower()">
                        <span class="player-name">@player.PlayerName</span>
                        <span class="player-character">@player.Character</span>
                        <span class="player-city">@player.City</span>
                    </div>
                }
            </div>

            <!-- Puzzles Panel -->
            <div class="puzzles-panel">
                <h3>Available Puzzles</h3>
                @if (availablePuzzles.Any())
                {
                    @foreach (var puzzleId in availablePuzzles)
                    {
                        <button class="puzzle-btn" @onclick="() => LoadPuzzle(puzzleId)">
                            Load Puzzle @puzzleId
                        </button>
                    }
                }
                else
                {
                    <p>No puzzles available. Wait for your partner to join!</p>
                }
            </div>

            <!-- Current Puzzle -->
            @if (currentPuzzle != null)
            {
                <div class="puzzle-display @GetPlayerCity().ToLower()">
                    <h3>@currentPuzzle.Title</h3>
                    <div class="puzzle-description">
                        <p>@currentPuzzle.Description</p>
                    </div>

                    @if (currentPuzzle.CluesForPlayer.Any())
                    {
                        <div class="player-clues">
                            <h4>Your Clues (@GetPlayerCity()):</h4>
                            <ul>
                                @foreach (var clue in currentPuzzle.CluesForPlayer)
                                {
                                    <li>@clue</li>
                                }
                            </ul>
                        </div>
                    }

                    @if (currentPuzzle.SharedClues.Any())
                    {
                        <div class="shared-clues">
                            <h4>Shared Information:</h4>
                            <ul>
                                @foreach (var clue in currentPuzzle.SharedClues)
                                {
                                    <li>@clue</li>
                                }
                            </ul>
                        </div>
                    }

                    <div class="answer-section">
                        <div class="answer-input">
                            <input @bind="puzzleAnswer" @onkeypress="@(async (e) => { if (e.Key == "Enter") await SubmitAnswer(); })" 
                                   placeholder="Enter your answer..." class="form-control" />
                            <button @onclick="SubmitAnswer" disabled="@string.IsNullOrEmpty(puzzleAnswer)" class="submit-btn">
                                Submit Answer
                            </button>
                        </div>

                        @if (!string.IsNullOrEmpty(lastAnswerResult))
                        {
                            <div class="answer-result @(lastAnswerWasCorrect ? "correct" : "incorrect")">
                                @lastAnswerResult
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Chat Panel -->
            <div class="chat-panel">
                <h3>Team Communication</h3>
                <div class="messages" style="height: 200px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; margin-bottom: 10px;">
                    @foreach (var message in messages)
                    {
                        <div class="message">@message</div>
                    }
                </div>
                <div class="chat-input">
                    <input @bind="messageInput" @onkeypress="@(async (e) => { if (e.Key == "Enter") await SendMessage(); })" 
                           placeholder="Send a message to your partner..." class="form-control" />
                    <button @onclick="SendMessage" disabled="@string.IsNullOrEmpty(messageInput)" class="send-btn">
                        Send
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string RoomId { get; set; } = string.Empty;

    private HubConnection? hubConnection;
    private Arcane_Coop.Models.GameRoom? currentRoom;
    private List<int> availablePuzzles = new();
    private PuzzleData? currentPuzzle;
    private List<string> messages = new();
    
    private string playerName = "";
    private string messageInput = "";
    private string puzzleAnswer = "";
    private string lastAnswerResult = "";
    private bool lastAnswerWasCorrect = false;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
            .Build();

        // Set up event handlers
        hubConnection.On<Arcane_Coop.Models.GameRoom, List<int>>("JoinedRoom", async (room, puzzles) =>
        {
            currentRoom = room;
            availablePuzzles = puzzles;
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Arcane_Coop.Models.Player>("PlayerJoined", async (player) =>
        {
            if (currentRoom != null)
            {
                var existingPlayer = currentRoom.Players.FirstOrDefault(p => p.PlayerId == player.PlayerId);
                if (existingPlayer == null)
                {
                    currentRoom.Players.Add(player);
                }
                else
                {
                    existingPlayer.IsConnected = true;
                    existingPlayer.ConnectionId = player.ConnectionId;
                }
            }
            else
            {
                // If currentRoom is not set yet, this will be handled when JoinedRoom event fires
                // This can happen during the joining process and is normal
            }
            messages.Add($"{DateTime.Now:HH:mm:ss} - {player.PlayerName} joined from {player.City}");
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("PlayerLeft", async (connectionId) =>
        {
            if (currentRoom != null)
            {
                var player = currentRoom.Players.FirstOrDefault(p => p.ConnectionId == connectionId);
                if (player != null)
                {
                    player.IsConnected = false;
                    messages.Add($"{DateTime.Now:HH:mm:ss} - {player.PlayerName} disconnected");
                }
            }
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string>("ReceiveMessage", async (playerName, message) =>
        {
            messages.Add($"{DateTime.Now:HH:mm:ss} - {playerName}: {message}");
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<PuzzleData>("PuzzleData", async (puzzleData) =>
        {
            currentPuzzle = puzzleData;
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int, PuzzleValidationResult>("AnswerResult", async (puzzleId, result) =>
        {
            lastAnswerResult = result.Message;
            lastAnswerWasCorrect = result.IsCorrect;
            puzzleAnswer = "";
            
            if (result.PuzzleCompleted)
            {
                currentPuzzle = null;
            }
            
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int, List<int>>("PuzzleCompleted", async (puzzleId, newAvailablePuzzles) =>
        {
            availablePuzzles = newAvailablePuzzles;
            messages.Add($"{DateTime.Now:HH:mm:ss} - üéâ Puzzle {puzzleId} completed! Great teamwork!");
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("Error", async (errorMessage) =>
        {
            messages.Add($"{DateTime.Now:HH:mm:ss} - Error: {errorMessage}");
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Arcane_Coop.Models.GameRoom, List<int>, object>("RoomState", async (room, puzzles, gameState) =>
        {
            currentRoom = room;
            availablePuzzles = puzzles;
            // If we have room state, we're already joined - find our player info
            if (currentRoom != null && hubConnection != null)
            {
                var currentPlayer = currentRoom.Players.FirstOrDefault(p => p.ConnectionId == hubConnection.ConnectionId);
                if (currentPlayer != null)
                {
                    playerName = currentPlayer.PlayerName;
                    await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "playerName", playerName);
                }
            }
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Arcane_Coop.Models.Player>("PlayerReconnected", async (player) =>
        {
            if (currentRoom != null)
            {
                var existingPlayer = currentRoom.Players.FirstOrDefault(p => p.PlayerId == player.PlayerId);
                if (existingPlayer != null)
                {
                    existingPlayer.IsConnected = true;
                    existingPlayer.ConnectionId = player.ConnectionId;
                }
                else
                {
                    currentRoom.Players.Add(player);
                }
                messages.Add($"{DateTime.Now:HH:mm:ss} - {player.PlayerName} reconnected");
            }
            await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        
        // Check if we have player info in session storage (from previous pages)
        var storedPlayerName = await JSRuntime.InvokeAsync<string?>("sessionStorage.getItem", "playerName");
        if (!string.IsNullOrEmpty(storedPlayerName))
        {
            playerName = storedPlayerName;
            // Join room with stored player identity
            await hubConnection.SendAsync("JoinRoomByConnectionId", RoomId, playerName);
        }
        else
        {
            // Fallback: request room state without connection updates
            await hubConnection.SendAsync("RequestRoomState", RoomId);
        }
    }

    private async Task CopyRoomCode()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", RoomId);
            messages.Add($"{DateTime.Now:HH:mm:ss} - Room code copied to clipboard!");
            StateHasChanged();
        }
        catch
        {
            // Fallback if clipboard API not available
            messages.Add($"{DateTime.Now:HH:mm:ss} - Room code: {RoomId}");
            StateHasChanged();
        }
    }

    private async Task JoinRoom()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(playerName))
        {
            await hubConnection.SendAsync("JoinRoom", RoomId, playerName);
        }
    }

    private async Task LoadPuzzle(int puzzleId)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("RequestPuzzle", RoomId, puzzleId);
        }
    }

    private async Task SubmitAnswer()
    {
        if (hubConnection is not null && currentPuzzle != null && !string.IsNullOrEmpty(puzzleAnswer))
        {
            await hubConnection.SendAsync("SubmitAnswer", RoomId, currentPuzzle.PuzzleId, puzzleAnswer.Trim());
        }
    }

    private async Task SendMessage()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(messageInput) && !string.IsNullOrEmpty(playerName))
        {
            await hubConnection.SendAsync("SendMessageToRoom", RoomId, playerName, messageInput);
            messageInput = "";
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    private string GetPlayerCity()
    {
        if (currentRoom == null || hubConnection == null) return "";
        
        var currentPlayer = currentRoom.Players.FirstOrDefault(p => p.ConnectionId == hubConnection.ConnectionId);
        return currentPlayer?.City ?? "";
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public enum City
    {
        Zaun,
        Piltover
    }
}
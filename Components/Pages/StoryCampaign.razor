@page "/story-campaign"
@page "/story-campaign/{*parameters}"
@using Arcane_Coop.Models
@using Arcane_Coop.Services
@inject IVisualNovelService VisualNovelService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="story-campaign-container">
    @if (currentScene != null)
    {
        <VisualNovel Scene="@currentScene" 
                     Configuration="@novelConfig" 
                     OnSceneComplete="@OnSceneComplete"
                     OnStateChanged="@OnStateChanged" />
    }
    else if (showTransition)
    {
        <div class="transition-screen @GetThemeClass()">
            <div class="transition-content">
                <div class="transition-title">
                    @if (playerRole == "zaun")
                    {
                        <span class="zaun-title">UNDERGROUND NETWORK</span>
                        <span class="subtitle">Connecting to street informants...</span>
                    }
                    else
                    {
                        <span class="piltover-title">PILTOVER COMMAND</span>
                        <span class="subtitle">Establishing secure channel...</span>
                    }
                </div>
                <div class="connection-animation">
                    <div class="loading-spinner @GetThemeClass()"></div>
                </div>
                <div class="transition-text">
                    <p>Preparing next mission phase...</p>
                    <small>@nextGameName</small>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="loading-screen @GetThemeClass()">
            <div class="loading-content">
                <div class="loading-spinner @GetThemeClass()"></div>
                <h2>Initializing Story Campaign...</h2>
            </div>
        </div>
    }
</div>

<style>
/* Story Campaign Styles */
.story-campaign-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    font-family: 'Rajdhani', sans-serif;
    color: #fff;
}

.transition-screen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
}

.transition-screen.zaun {
    background: linear-gradient(135deg, #0a1e16 0%, #1a3a2e 30%, #00d4aa 100%);
}

.transition-screen.piltover {
    background: linear-gradient(135deg, #2c1810 0%, #5a4a3a 30%, #c8aa6e 100%);
}

.transition-content {
    text-align: center;
    max-width: 600px;
    padding: 2rem;
}

.transition-title {
    margin-bottom: 2rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.zaun-title, .piltover-title {
    font-family: 'Arcane Nine', 'Cinzel', serif;
    font-size: 2.5rem;
    font-weight: 700;
}

.zaun-title {
    color: #00d4aa;
    text-shadow: 0 0 20px #00ffc8;
}

.piltover-title {
    color: #c8aa6e;
    text-shadow: 0 0 20px #ffd700;
}

.subtitle {
    font-family: 'Orbitron', monospace;
    font-size: 1rem;
    opacity: 0.8;
    text-transform: uppercase;
    letter-spacing: 0.1em;
}

.connection-animation {
    margin: 2rem 0;
    display: flex;
    justify-content: center;
}

.loading-spinner {
    width: 60px;
    height: 60px;
    border: 4px solid rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

.loading-spinner.zaun {
    border-top-color: #00d4aa;
    box-shadow: 0 0 20px #00d4aa30;
}

.loading-spinner.piltover {
    border-top-color: #c8aa6e;
    box-shadow: 0 0 20px #c8aa6e30;
}

.transition-text {
    opacity: 0.9;
}

.transition-text p {
    font-size: 1.1rem;
    margin-bottom: 0.5rem;
}

.transition-text small {
    font-size: 0.9rem;
    opacity: 0.7;
    font-style: italic;
}

.loading-screen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
}

.loading-screen.zaun {
    background: linear-gradient(135deg, #0a1e16 0%, #1a3a2e 30%, #00d4aa 100%);
}

.loading-screen.piltover {
    background: linear-gradient(135deg, #2c1810 0%, #5a4a3a 30%, #c8aa6e 100%);
}

.loading-content {
    text-align: center;
    color: #fff;
}

.loading-content h2 {
    font-family: 'Arcane Nine', 'Cinzel', serif;
    font-size: 2rem;
    margin-top: 2rem;
    opacity: 0.8;
}

@@keyframes spin {
    to { transform: rotate(360deg); }
}

/* Responsive Design */
@@media (max-width: 768px) {
    .transition-title {
        margin-bottom: 1.5rem;
    }
    
    .zaun-title, .piltover-title {
        font-size: 2rem;
    }
    
    .subtitle {
        font-size: 0.9rem;
    }
    
    .transition-content {
        padding: 1rem;
    }
}
</style>

@code {
    [Parameter] public string? Parameters { get; set; }

    private VisualNovelScene? currentScene;
    private VisualNovelConfig novelConfig = new();
    private VisualNovelState novelState = new();
    
    private string playerRole = "";
    private string playerName = "";
    private string squadName = "";
    private string playerAvatar = "";
    
    private bool showTransition = false;
    private string nextGameName = "";
    
    private int currentSceneIndex = 0;
    private List<string> storyProgression = new() 
    { 
        "emergency_briefing",
        "picture_explanation_transition" 
    };

    protected override async Task OnInitializedAsync()
    {
        ParseUrlParameters();
        await InitializeStoryScene();
    }

    private void ParseUrlParameters()
    {
        try
        {
            var uri = new Uri(NavigationManager.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            
            playerRole = query["role"] ?? "zaun";
            playerName = Uri.UnescapeDataString(query["name"] ?? "Unknown Agent");
            squadName = Uri.UnescapeDataString(query["squad"] ?? "Squad Alpha");
            playerAvatar = query["avatar"] ?? "1";
            
            // Configure novel based on player role
            novelConfig.Theme = playerRole == "zaun" ? NovelTheme.Zaun : NovelTheme.Piltover;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error parsing URL parameters: {ex.Message}");
            // Default to Zaun theme
            playerRole = "zaun";
            novelConfig.Theme = NovelTheme.Zaun;
        }
    }

    private Task InitializeStoryScene()
    {
        try
        {
            currentScene = CreateEmergencyBriefingScene();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing story scene: {ex.Message}");
        }
        return Task.CompletedTask;
    }

    private VisualNovelScene CreateEmergencyBriefingScene()
    {
        var scene = new VisualNovelScene
        {
            Id = "emergency_briefing",
            Name = "Emergency Briefing - Act I Scene I",
            Layout = SceneLayout.DualCharacters,
            Theme = novelConfig.Theme
        };

        // Add Vi and Caitlyn characters
        var vi = new VisualNovelCharacter
        {
            Id = "vi",
            Name = "Vi",
            DisplayName = "Vi",
            ImagePath = "/images/Vi.jpeg",
            Position = CharacterPosition.Left,
            ThemeColor = "#00d4aa"
        };

        var caitlyn = new VisualNovelCharacter
        {
            Id = "caitlyn",
            Name = "Caitlyn",
            DisplayName = "Sheriff Caitlyn",
            ImagePath = "/images/Cait.jpeg",
            Position = CharacterPosition.Right,
            ThemeColor = "#c8aa6e"
        };

        scene.Characters.Add(vi);
        scene.Characters.Add(caitlyn);

        // Act I Scene I Dialogue - Emergency Briefing
        scene.DialogueLines.AddRange(new[]
        {
            new DialogueLine
            {
                CharacterId = "caitlyn",
                Text = $"Vi, we have a critical situation. Hextech energy readings across three districts are showing cascade patterns. If we don't act within the next two hours...",
                AnimationType = TextAnimationType.Typewriter,
                TypewriterSpeed = 45
            },
            new DialogueLine
            {
                CharacterId = "vi",
                Text = "Let me guess - boom goes the neighborhood? How big we talking, Cupcake?",
                AnimationType = TextAnimationType.Typewriter,
                TypewriterSpeed = 40
            },
            new DialogueLine
            {
                CharacterId = "caitlyn",
                Text = "Potentially three city blocks. Both Piltover infrastructure and Zaun residential areas. The epicenter appears to be in the industrial district.",
                AnimationType = TextAnimationType.Typewriter,
                TypewriterSpeed = 50
            },
            new DialogueLine
            {
                CharacterId = "vi",
                Text = "Shit. That's where families live, not just the Chem-Barons and their labs. What do you need from me?",
                AnimationType = TextAnimationType.Typewriter,
                TypewriterSpeed = 35
            },
            new DialogueLine
            {
                CharacterId = "caitlyn",
                Text = "I can coordinate from HQ - I have access to surveillance, technical analysis, and tactical resources. But I need someone who knows Zaun's underground networks.",
                AnimationType = TextAnimationType.Typewriter,
                TypewriterSpeed = 45
            },
            new DialogueLine
            {
                CharacterId = "vi",
                Text = "And you need someone who won't ask questions when you say 'jump', right? What about the newbies?",
                AnimationType = TextAnimationType.Typewriter,
                TypewriterSpeed = 40
            },
            new DialogueLine
            {
                CharacterId = "caitlyn",
                Text = $"Your partner {playerName} will need to learn Zaun's ways quickly. Mine will have to adapt to field conditions and trust your expertise.",
                AnimationType = TextAnimationType.Typewriter,
                TypewriterSpeed = 45
            },
            new DialogueLine
            {
                CharacterId = "vi",
                Text = "Fair enough. First test then - let's see if they can work together when intel's scrambled and time's running out.",
                AnimationType = TextAnimationType.Typewriter,
                TypewriterSpeed = 40
            },
            new DialogueLine
            {
                CharacterId = "caitlyn",
                Text = "The initial blast damaged our surveillance network. We have fragments of security footage, but they need analysis. Visual intelligence that could reveal who's behind this.",
                AnimationType = TextAnimationType.Typewriter,
                TypewriterSpeed = 45
            },
            new DialogueLine
            {
                CharacterId = "vi",
                Text = $"Visual intel, huh? Good thing Squad {squadName} knows how to read between the lines. Time to put those detective skills to work.",
                AnimationType = TextAnimationType.Typewriter,
                TypewriterSpeed = 40
            }
        });

        return scene;
    }

    private async Task OnSceneComplete()
    {
        currentSceneIndex++;
        
        if (currentSceneIndex < storyProgression.Count)
        {
            var nextPhase = storyProgression[currentSceneIndex];
            
            if (nextPhase == "picture_explanation_transition")
            {
                await TransitionToPictureExplanation();
            }
        }
    }

    private async Task TransitionToPictureExplanation()
    {
        showTransition = true;
        nextGameName = "Visual Intelligence Analysis";
        currentScene = null;
        StateHasChanged();
        
        // Brief transition delay
        await Task.Delay(3000);
        
        // Navigate to Picture Explanation with parameters
        var parameters = $"role={playerRole}&avatar={playerAvatar}&name={Uri.EscapeDataString(playerName)}&squad={Uri.EscapeDataString(squadName)}&story=true";
        NavigationManager.NavigateTo($"/picture-explanation?{parameters}");
    }

    private void OnStateChanged(VisualNovelState state)
    {
        novelState = state;
    }

    private string GetThemeClass()
    {
        return playerRole == "zaun" ? "zaun" : "piltover";
    }
}
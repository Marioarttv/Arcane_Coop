@page "/alchemy-lab"
@page "/alchemy-lab/{*parameters}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using Arcane_Coop.Hubs
@using Arcane_Coop.Models
@implements IAsyncDisposable
@inject NavigationManager Navigation

<PageTitle>Alchemy Lab: Vi's Healing Potion</PageTitle>

<div class="alchemy-container @(isFromStory ? "story-mode" : string.Empty)">
    <div class="header-section">
        @if (isFromStory)
        {
            <h2 class="game-title">üß™ Chemical Analysis Lab</h2>
            <p class="game-subtitle">Emergency Protocol - Analyze unknown chemical compound</p>
            <div class="story-context">
                <div class="story-badge @GetRoleThemeClass()">
                    <span class="badge-icon">@(playerRole == "zaun" ? "‚ö°" : "üîß")</span>
                    <span>Squad @squadName - @(playerRole == "zaun" ? "ZAUN OPERATIVE" : "PILTOVER AGENT")</span>
                </div>
            </div>
        }
        else
        {
            <h2 class="game-title">üß™ Alchemy Lab</h2>
            <p class="game-subtitle">Caitlyn & Vi - Brew Vi's Healing Potion</p>
        }
    </div>
    
    <div class="top-right-status">
        <span class="label">Status:</span>
        <span class="value @(IsConnected ? "connected" : "disconnected")">@(IsConnected ? "Connected" : "Disconnected")</span>
    </div>

    @if (!inGame && !isFromStory)
    {
        <div class="game-setup mb-4">
            <div class="row">
                <div class="col-md-6">
                    <label for="roomInput" class="form-label">Lab ID:</label>
                    <input @bind="roomId" id="roomInput" class="form-control" placeholder="Enter lab code" />
                </div>
                <div class="col-md-6">
                    <label for="nameInput" class="form-label">Alchemist Name:</label>
                    <input @bind="playerName" id="nameInput" class="form-control" placeholder="Enter your name" />
                </div>
            </div>

            <div class="setup-buttons">
                <button class="arcane-btn arcane-btn-primary" @onclick="JoinRoom" disabled="@(!IsConnected || string.IsNullOrEmpty(roomId) || string.IsNullOrEmpty(playerName))">
                    üö™ Join Room
                </button>
                <button class="arcane-btn arcane-btn-success" @onclick="JoinGame" disabled="@(!IsConnected || string.IsNullOrEmpty(roomId) || string.IsNullOrEmpty(playerName))">
                    üß™ Start Brewing
                </button>
                @if (inGame)
                {
                    <button class="arcane-btn arcane-btn-warning" @onclick="RestartGame">
                        üîÑ Reset Lab
                    </button>
                }
            </div>
        </div>

        @if (inRoom && !inGame && !isFromStory)
        {
            <div class="players-section">
                <div class="players-header">
                    <h4>üë• Lab Team</h4>
                </div>
                <div class="players-list">
                    @foreach (var player in connectedPlayers)
                    {
                        <div class="player-card">
                            <div class="player-icon">üßë‚Äçüî¨</div>
                            <div class="player-name">@player</div>
                        </div>
                    }
                    @if (connectedPlayers.Count < 2)
                    {
                        <div class="player-card waiting">
                            <div class="player-icon">‚è≥</div>
                            <div class="player-name">Waiting for lab partner...</div>
                        </div>
                    }
                </div>
            </div>
        }
    }

    @if (inGame && playerView != null)
    {
        <div class="game-interface compact-layout @playerView.Role.ToLower() one-screen-grid">
            @if (playerView.Role == "Piltover")
            {
                <!-- Piltover Player: Recipe Reader Interface -->
                <div class="piltover-interface">
                    <div class="interface-header">
                        <div class="character-info">
                            <img src="/images/cait.jpeg" alt="Caitlyn" class="character-portrait" />
                            <div class="character-details">
                                <h3>@playerView.DisplayName</h3>
                                <p class="role-subtitle">Master Alchemist</p>
                            </div>
                        </div>
                        <div class="brewing-status">
                            @if (gameState != null)
                            {
                                <div class="progress-info">
                                    <span class="step-counter">@gameState.TotalSteps Steps Total</span>
                                    @if (gameState.IsCompleted)
                                    {
                                        <span class="status-badge success">‚úÖ POTION COMPLETE</span>
                                    }
                                    else
                                    {
                                        <span class="status-badge active">üß™ BREWING IN PROGRESS</span>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                    
                        <div class="instruction-panel piltover-instruction parchment">
                        <p>@playerView.Instruction</p>
                    </div>
                    
                    @if (playerView.Recipe != null)
                    {
                        <div class="recipe-scroll old-scroll">
                            <div class="recipe-header">
                                <h4>üìú @playerView.Recipe.Name</h4>
                                <p class="recipe-description">@playerView.Recipe.Description</p>
                            </div>
                            
                            <div class="recipe-steps compact-steps">
                                @foreach (var step in playerView.Recipe.Steps)
                                {
                                    <div class="recipe-step step-active">
                                        <div class="step-icon">
                                            @GetStepIcon(step.RequiredStation)
                                        </div>
                                        <div class="step-content">
                                            <h5>@step.Instruction</h5>
                                            <p class="step-description">@step.DetailedDescription</p>
                                            <div class="step-requirements">
                                                <span class="requirement-tag station">@GetStationName(step.RequiredStation)</span>
                                                <span class="requirement-tag state">@step.RequiredState</span>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    
                    @if (playerView.Mistakes != null && playerView.Mistakes.Length > 0)
                    {
                        <div class="mistakes-panel">
                            <h4>‚ùå Issues Found:</h4>
                            <ul class="mistake-list">
                                @foreach (var mistake in playerView.Mistakes)
                                {
                                    <li>@mistake</li>
                                }
                            </ul>
                        </div>
                    }
                </div>
            }
            else if (playerView.Role == "Zaunite")
            {
                <!-- Zaunite Player: Laboratory Interface -->
                <div class="zaunite-interface">
                    <!-- Header collapsed for space -->
                    
                        <div class="instruction-panel zaunite-instruction parchment">
                        <p>@playerView.Instruction</p>
                    </div>
                    
                    @if (!playerView.IsCompleted)
                    {
                        <div class="lab-grid">
                            <!-- Left: Ingredients -->
                            <div class="lab-panel ingredients-panel">
                                <h4>üß™ Ingredient Storage</h4>
                                <div class="ingredients-draggable-container no-scroll">
                                    @if (playerView.AvailableIngredients != null)
                                    {
                                        <Dropzone Items="@ingredientPoolItems" Class="ingredients-dropzone" Accepts="@((ingredient, targetZone) => true)">
                                            <div class="draggable-ingredient @GetIngredientStateClass(context.State)" draggable="true">
                                                <div class="ingredient-image"><img src="@context.ImagePath" alt="@context.Name" /></div>
                                                <div class="ingredient-info">
                                                    <h6>@context.Name</h6>
                                                    <span class="ingredient-state">@GetStateDisplayName(context.State)</span>
                                                </div>
                                            </div>
                                        </Dropzone>
                                    }
                                </div>
                            </div>

                            <!-- Middle: Stations -->
                            <div class="lab-panel stations-panel">
                                <h4>‚öôÔ∏è Processing Stations</h4>
                                <div class="stations-grid two-by-two">
                                    <div class="processing-station mixing-station">
                                        <div class="station-header"><span class="station-icon">‚öóÔ∏è</span><h5>Mixing Station</h5></div>
                                        <Dropzone Items="@mixingItems" Class="station-dropzone mixing-dropzone" MaxItems="2" OnItemDrop="@((AlchemyIngredient item) => StateHasChanged())" Accepts="@((ingredient, targetZone) => CanCombineIngredient(ingredient))">
                                            @if (context != null)
                                            {
                                                <div class="processing-ingredient"><img src="@context.ImagePath" alt="@context.Name" /><span>@context.Name</span></div>
                                            }
                                            else if (mixingItems.Count == 0)
                                            {
                                                <div class="station-placeholder"><p>Drop Shimmer Crystal + Hex Berries</p><small>(2 ingredients required)</small></div>
                                            }
                                        </Dropzone>
                                        @if (mixingItems.Count == 2)
                                        {
                                            <button class="process-btn combine-btn" @onclick="() => CombineAtMixing()">‚ú® Combine</button>
                                        }
                                    </div>

                                    <div class="processing-station mortar-station">
                                        <div class="station-header"><span class="station-icon">ü•£</span><h5>Mortar & Pestle</h5></div>
                                        <Dropzone Items="@mortarItems" Class="station-dropzone mortar-dropzone" MaxItems="1" OnItemDrop="@((AlchemyIngredient item) => StateHasChanged())" Accepts="@((ingredient, targetZone) => CanProcessAtStation(ingredient, ProcessingStation.MortarPestle))">
                                            @if (context != null)
                                            {
                                                <div class="processing-ingredient"><img src="@context.ImagePath" alt="@context.Name" /><span>@context.Name</span></div>
                                            }
                                            else { <div class="station-placeholder"><p>Drop ingredient to grind</p></div> }
                                        </Dropzone>
                                        @if (mortarItems.Any()) { <button class="process-btn" @onclick="() => ProcessAtMortar()">üîÑ Grind</button> }
                                    </div>

                                    <div class="processing-station heating-station">
                                        <div class="station-header"><span class="station-icon">üî•</span><h5>Heating Station</h5></div>
                                        <Dropzone Items="@heatingItems" Class="station-dropzone heating-dropzone" MaxItems="1" OnItemDrop="@((AlchemyIngredient item) => StateHasChanged())" Accepts="@((ingredient, targetZone) => CanProcessAtStation(ingredient, ProcessingStation.HeatingStation))">
                                            @if (context != null)
                                            {
                                                <div class="processing-ingredient"><img src="@context.ImagePath" alt="@context.Name" /><span>@context.Name</span></div>
                                            }
                                            else { <div class="station-placeholder"><p>Drop ingredient to heat</p></div> }
                                        </Dropzone>
                                        @if (heatingItems.Any()) { <button class="process-btn" @onclick="() => ProcessAtHeating()">üî• Heat</button> }
                                    </div>

                                    <div class="processing-station cutting-station">
                                        <div class="station-header"><span class="station-icon">üî™</span><h5>Cutting Board</h5></div>
                                        <Dropzone Items="@cuttingItems" Class="station-dropzone cutting-dropzone" MaxItems="1" OnItemDrop="@((AlchemyIngredient item) => StateHasChanged())" Accepts="@((ingredient, targetZone) => CanProcessAtStation(ingredient, ProcessingStation.CuttingBoard))">
                                            @if (context != null)
                                            {
                                                <div class="processing-ingredient"><img src="@context.ImagePath" alt="@context.Name" /><span>@context.Name</span></div>
                                            }
                                            else { <div class="station-placeholder"><p>Drop ingredient to chop</p></div> }
                                        </Dropzone>
                                        @if (cuttingItems.Any()) { <button class="process-btn" @onclick="() => ProcessAtCutting()">üî™ Chop</button> }
                                    </div>
                                </div>
                            </div>

                            <!-- Right: Cauldron -->
                            <div class="lab-panel cauldron-panel">
                                <h4>üçØ Brewing Cauldron</h4>
                                <Dropzone Items="@cauldronItems" Class="cauldron-dropzone" MaxItems="3" OnItemDrop="@((AlchemyIngredient item) => OnCauldronDrop(item))" Accepts="@((ingredient, targetZone) => cauldronItems.Count < 3 && CanAddToCauldron(ingredient))">
                                    @if (context != null)
                                    {
                                        <div class="cauldron-ingredient"><img src="@context.ImagePath" alt="@context.Name" /><span>@context.Name (@GetStateDisplayName(context.State))</span></div>
                                    }
                                    else if (cauldronItems.Count == 0)
                                    {
                                        <div class="cauldron-placeholder"><span>üçØ</span><p>Drop processed ingredients here</p><small>(Max 3 ingredients - only processed ingredients allowed)</small></div>
                                    }
                                </Dropzone>
                                @if (cauldronItems.Count > 0)
                                {
                                    <button class="arcane-btn arcane-btn-success submit-potion-btn" @onclick="SubmitPotion">‚ú® Brew Potion (@cauldronItems.Count/3)</button>
                                }
                                <button class="arcane-btn arcane-btn-warning reset-btn" @onclick="RestartGame">üîÑ Reset Game</button>
                            </div>
                        </div>
                    }
                    
                    @if (playerView.IsCompleted)
                    {
                        <div class="completion-panel zaunite-completion">
                            <div class="completion-animation">
                                <div class="potion-complete">‚ú®üß™‚ú®</div>
                                <h3>üéâ Perfect Brewing!</h3>
                                <p>@playerView.CompletionMessage</p>
                            </div>
                            <button class="arcane-btn arcane-btn-success" @onclick="ContinueStory">
                                ‚û°Ô∏è Continue Story
                            </button>
                        </div>
                    }
                    
                    @if (playerView.Mistakes != null && playerView.Mistakes.Length > 0)
                    {
                        <div class="mistakes-panel zaunite-mistakes">
                            <h4>‚ùå Issues Found:</h4>
                            <p>The potion didn't work as expected. Check with Caitlyn and try again!</p>
                            <ul class="mistake-list">
                                @foreach (var mistake in playerView.Mistakes)
                                {
                                    <li>@mistake</li>
                                }
                            </ul>
                        </div>
                    }
                </div>
            }
        </div>
    }
    
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="status-overlay">
            <div class="status-message @statusClass">
                @statusMessage
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string? Parameters { get; set; }
    
    // Connection and SignalR
    private HubConnection? hubConnection;
    private bool IsConnected => hubConnection?.State == HubConnectionState.Connected;
    
    // Game state
    private string roomId = "";
    private string playerName = "";
    private bool inRoom = false;
    private bool inGame = false;
    private AlchemyPlayerView? playerView;
    private AlchemyGameState? gameState;
    
    // Story mode parameters
    private string playerRole = "";
    private string playerAvatar = "";
    private string squadName = "";
    private bool isFromStory = false;
    
    // UI feedback
    private string statusMessage = "";
    private string statusClass = "";
    
    // Player tracking
    private List<string> connectedPlayers = new List<string>();
    
    // Drag and Drop collections for processing stations and cauldron
    private List<AlchemyIngredient> ingredientPoolItems = new List<AlchemyIngredient>();
    private List<AlchemyIngredient> mixingItems = new List<AlchemyIngredient>();
    private List<AlchemyIngredient> mortarItems = new List<AlchemyIngredient>();
    private List<AlchemyIngredient> heatingItems = new List<AlchemyIngredient>();
    private List<AlchemyIngredient> cuttingItems = new List<AlchemyIngredient>();
    private List<AlchemyIngredient> cauldronItems = new List<AlchemyIngredient>();
    
    protected override async Task OnInitializedAsync()
    {
        // Parse URL parameters if provided
        ParseUrlParameters();
        
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
            .Build();

        // Basic room event handlers
        hubConnection.On<string, string>("PlayerJoined", (name, connectionId) =>
        {
            if (!connectedPlayers.Contains(name))
            {
                connectedPlayers.Add(name);
            }
            if (connectionId != hubConnection.ConnectionId)
            {
                ShowStatus($"{name} joined the lab", "info");
            }
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string>("PlayerLeft", (name, connectionId) =>
        {
            connectedPlayers.Remove(name);
            ShowStatus($"{name} left the lab", "info");
            InvokeAsync(StateHasChanged);
        });

        // Room state handler to get all current players when joining
        hubConnection.On<List<string>>("RoomState", (playerNames) =>
        {
            connectedPlayers.Clear();
            connectedPlayers.AddRange(playerNames);
            InvokeAsync(StateHasChanged);
        });

        // Alchemy game event handlers
        hubConnection.On<string, AlchemyPlayerView>("AlchemyGameJoined", (role, view) =>
        {
            inGame = true;
            playerView = view;
            ShowStatus($"Joined as {view.DisplayName}", "success");
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<AlchemyGameState>("AlchemyGameStateUpdated", (newGameState) =>
        {
            gameState = newGameState;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<AlchemyPlayerView>("AlchemyPlayerViewUpdated", (newView) =>
        {
            playerView = newView;
            
            // Update client-side ingredient pool from server state
            if (newView.AvailableIngredients != null)
            {
                ingredientPoolItems.Clear();
                ingredientPoolItems.AddRange(newView.AvailableIngredients.Where(i => !i.IsUsed));
            }
            
            InvokeAsync(StateHasChanged);
        });
        
        hubConnection.On<string, AlchemyPlayerView>("AlchemyGameJoined", (role, view) =>
        {
            playerView = view;
            
            // Initialize client-side ingredient pool
            if (view.AvailableIngredients != null)
            {
                ingredientPoolItems.Clear();
                ingredientPoolItems.AddRange(view.AvailableIngredients.Where(i => !i.IsUsed));
            }
            
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, int>("AlchemyGameCompleted", (message, score) =>
        {
            ShowStatus($"üéâ {message}", "success");
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string[]>("AlchemyPotionIncorrect", (message, mistakes) =>
        {
            ShowStatus($"‚ùå {message}", "warning");
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("AlchemyInvalidAction", (message) =>
        {
            ShowStatus(message, "warning");
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On("AlchemyGameFull", () =>
        {
            ShowStatus("Lab is full - maximum 2 alchemists", "warning");
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        // Redirect handler to continue story
        hubConnection.On<string>("RedirectToNextScene", (url) =>
        {
            Console.WriteLine($"[AlchemyLab] Redirecting to next scene: {url}");
            Navigation.NavigateTo(url, forceLoad: true);
        });
        
        // Auto-connect and join if parameters are provided
        if (!string.IsNullOrEmpty(roomId) && !string.IsNullOrEmpty(playerName))
        {
            await AutoConnect();
        }
    }
    
    private void ParseUrlParameters()
    {
        try
        {
            var uri = new Uri(Navigation.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            
            var role = query["role"];
            var avatar = query["avatar"];
            var name = query["name"];
            var squad = query["squad"];
            var story = query["story"];
            var transition = query["transition"]; // FromEmptyCells, etc.
            
            if (!string.IsNullOrEmpty(role))
                playerRole = role;
                
            if (!string.IsNullOrEmpty(avatar))
                playerAvatar = avatar;
            
            if (!string.IsNullOrEmpty(name))
                playerName = Uri.UnescapeDataString(name);
            
			if (!string.IsNullOrEmpty(squad))
			{
				squadName = Uri.UnescapeDataString(squad);
			}
            
			if (story == "true")
				isFromStory = true;

			// Build unique roomId for story transitions
			if (!string.IsNullOrEmpty(squadName))
			{
				roomId = isFromStory && !string.IsNullOrEmpty(transition) ? $"{squadName}_{transition}" : squadName;
			}
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error parsing URL parameters: {ex.Message}");
        }
    }
    
    private async Task AutoConnect()
    {
        try
        {
            // Small delay to ensure connection is established
            await Task.Delay(500);
            
            if (IsConnected && !string.IsNullOrEmpty(roomId) && !string.IsNullOrEmpty(playerName))
            {
                await JoinRoom();
                await Task.Delay(200); // Brief delay between operations
                
                // If from story mode and have a role, join with that role
                if (isFromStory && !string.IsNullOrEmpty(playerRole))
                {
                    await JoinGameWithRole();
                }
                else
                {
                    await JoinGame();
                }
                
                // If from story mode, automatically set inGame to true to skip lobby
                if (isFromStory)
                {
                    inGame = true;
                    ShowStatus("Chemical analysis system initializing...", "info");
                }
                else
                {
                    ShowStatus("Auto-connecting to lab...", "info");
                }
                
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Auto-connect failed: {ex.Message}");
        }
    }

    private async Task JoinRoom()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(roomId) && !string.IsNullOrEmpty(playerName))
        {
            await hubConnection.SendAsync("JoinRoom", roomId, playerName);
            inRoom = true;
            if (!connectedPlayers.Contains(playerName))
            {
                connectedPlayers.Add(playerName);
            }
            ShowStatus($"Joined lab: {roomId}", "info");
        }
    }

    private async Task JoinGame()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(roomId) && !string.IsNullOrEmpty(playerName))
        {
            await hubConnection.SendAsync("JoinAlchemyGame", roomId, playerName);
        }
    }
    
    private async Task JoinGameWithRole()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(roomId) && !string.IsNullOrEmpty(playerName) && !string.IsNullOrEmpty(playerRole))
        {
            // Convert role format from story ("zaun"/"piltover") to game format ("Zaun"/"Piltover")
            string requestedRole = playerRole.ToLower() switch
            {
                "zaun" => "Zaun",
                "piltover" => "Piltover",
                _ => "Piltover"
            };
            
            await hubConnection.SendAsync("JoinAlchemyGameWithRole", roomId, playerName, requestedRole);
        }
    }
    
    private string GetRoleThemeClass()
    {
        return playerRole?.ToLower() switch
        {
            "zaun" => "zaun-theme",
            "piltover" => "piltover-theme",
            _ => ""
        };
    }

    // Cauldron drop handler - sync with SignalR backend
    private async void OnCauldronDrop(AlchemyIngredient ingredient)
    {
        // Allow raw only for Vial of Tears (catalyst). Block other raw items.
        if (ingredient.State == IngredientState.Raw && ingredient.Id != "vial_of_tears")
        {
            ShowStatus("Only processed ingredients (or Vial of Tears) can be added to the cauldron!", "warning");
            return;
        }

        // Optimistically remove from local ingredient pool to avoid temporary duplication
        if (ingredientPoolItems.Contains(ingredient))
        {
            ingredientPoolItems.Remove(ingredient);
        }
        // Add ingredient to cauldron via SignalR so server marks it used and syncs state
        await AddToCauldronViaSignalR(ingredient);
        StateHasChanged();
    }
    
    // Note: blazor-dragdrop automatically handles item movement between dropzones
    // We override this behavior for cauldron to use SignalR
    
    // Processing Station Methods
    private async Task ProcessAtMortar()
    {
        if (mortarItems.Any() && hubConnection is not null && !string.IsNullOrEmpty(roomId))
        {
            var ingredient = mortarItems.First();
            await hubConnection.SendAsync("ProcessIngredient", roomId, ingredient.Id, "MortarPestle");
            mortarItems.Clear();
            // Processed ingredient will be returned to pool via server update
        }
    }
    
    private async Task ProcessAtHeating()
    {
        if (heatingItems.Any() && hubConnection is not null && !string.IsNullOrEmpty(roomId))
        {
            var ingredient = heatingItems.First();
            await hubConnection.SendAsync("ProcessIngredient", roomId, ingredient.Id, "HeatingStation");
            heatingItems.Clear();
            // Processed ingredient will be returned to pool via server update
        }
    }
    
    private async Task ProcessAtCutting()
    {
        if (cuttingItems.Any() && hubConnection is not null && !string.IsNullOrEmpty(roomId))
        {
            var ingredient = cuttingItems.First();
            await hubConnection.SendAsync("ProcessIngredient", roomId, ingredient.Id, "CuttingBoard");
            cuttingItems.Clear();
            // Processed ingredient will be returned to pool via server update
        }
    }
    
    private async Task CombineAtMixing()
    {
        if (mixingItems.Count == 2 && hubConnection is not null && !string.IsNullOrEmpty(roomId))
        {
            var ingredient1 = mixingItems[0];
            var ingredient2 = mixingItems[1];
            await hubConnection.SendAsync("CombineIngredients", roomId, ingredient1.Id, ingredient2.Id);
            mixingItems.Clear();
            // Combined ingredient will be added to pool via server update
        }
    }
    
    // Helper method to check if ingredient can be processed at station
    private bool CanProcessAtStation(AlchemyIngredient ingredient, ProcessingStation station)
    {
        // Allow any ingredient to be processed at any of the 3 stations
        return station == ProcessingStation.MortarPestle || 
               station == ProcessingStation.HeatingStation || 
               station == ProcessingStation.CuttingBoard;
    }
    
    // Helper method to check if ingredient can be combined at mixing station
    private bool CanCombineIngredient(AlchemyIngredient ingredient)
    {
        // Only accept shimmer_crystal and hex_berries for combination
        return ingredient.Id == "shimmer_crystal" || ingredient.Id == "hex_berries";
    }
    
    // Helper method to check if ingredient can be added to cauldron
    private bool CanAddToCauldron(AlchemyIngredient ingredient)
    {
        // Accept processed ingredients OR raw vial_of_tears (catalyst)
        return ingredient.State != IngredientState.Raw || ingredient.Id == "vial_of_tears";
    }

    private async Task SubmitPotion()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(roomId))
        {
            await hubConnection.SendAsync("SubmitPotion", roomId);
        }
    }
    
    private async Task ContinueStory()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(roomId))
        {
            await hubConnection.SendAsync("ContinueStoryAfterAlchemyLab", roomId);
        }
    }
    
    // Add ingredients to cauldron via SignalR
    private async Task AddToCauldronViaSignalR(AlchemyIngredient ingredient)
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(roomId))
        {
            var position = playerView?.CauldronContents?.Length ?? 0;
            await hubConnection.SendAsync("AddToCauldron", roomId, ingredient.Id, position);
        }
    }
    

    private async Task RestartGame()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(roomId))
        {
            await hubConnection.SendAsync("RestartAlchemyGame", roomId);
            
            // Clear local collections
            ingredientPoolItems.Clear();
            mixingItems.Clear();
            mortarItems.Clear();
            heatingItems.Clear();
            cuttingItems.Clear();
            cauldronItems.Clear();
            
            ShowStatus("Lab reset - ready for new experiments!", "info");
            StateHasChanged();
        }
    }

    private void ShowStatus(string message, string type)
    {
        statusMessage = message;
        statusClass = type;
        
        // Auto-hide status after 3 seconds
        _ = Task.Delay(3000).ContinueWith(_ =>
        {
            statusMessage = "";
            statusClass = "";
            InvokeAsync(StateHasChanged);
        });
    }

    // Helper methods for UI
    private string GetStepIcon(ProcessingStation station)
    {
        return station switch
        {
            ProcessingStation.MortarPestle => "ü•£",
            ProcessingStation.HeatingStation => "üî•",
            ProcessingStation.CuttingBoard => "üî™",
            ProcessingStation.FilteringStation => "üßΩ",
            ProcessingStation.Cauldron => "üçØ",
            _ => "‚öôÔ∏è"
        };
    }

    private string GetStationName(ProcessingStation station)
    {
        return station switch
        {
            ProcessingStation.MortarPestle => "Mortar & Pestle",
            ProcessingStation.HeatingStation => "Heating Station",
            ProcessingStation.CuttingBoard => "Cutting Board",
            ProcessingStation.FilteringStation => "Filtering Station",
            ProcessingStation.Cauldron => "Cauldron",
            _ => station.ToString()
        };
    }

    private string GetIngredientStateClass(IngredientState state)
    {
        return state switch
        {
            IngredientState.Raw => "state-raw",
            IngredientState.Ground => "state-ground",
            IngredientState.Heated => "state-heated",
            IngredientState.Chopped => "state-chopped",
            IngredientState.Filtered => "state-filtered",
            IngredientState.Mixed => "state-mixed",
            _ => "state-raw"
        };
    }

    private string GetStateDisplayName(IngredientState state)
    {
        return state switch
        {
            IngredientState.Raw => "Raw",
            IngredientState.Ground => "Ground",
            IngredientState.Heated => "Heated",
            IngredientState.Chopped => "Chopped", 
            IngredientState.Filtered => "Filtered",
            IngredientState.Mixed => "Mixed",
            _ => state.ToString()
        };
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

<style>
/* Simplified alchemy lab styling */
.alchemy-container {
    min-height: 100vh;
    background: linear-gradient(135deg, #0a0e27 0%, #1a1a2e 50%, #16213e 100%);
    color: #ffffff;
    font-family: 'Orbitron', 'Rajdhani', sans-serif;
    padding: 14px;
    padding-bottom: 1.5rem;
    position: relative;
}

/* One-screen layout plan
   - Header strip (5vh)
   - Main functional grid (95vh):
       [ Ingredients  |  Stations (3x)  ] top row ~40vh
       [ Cauldron + Brew Bar ] bottom row ~32vh
   - No scrollbars anywhere; content scales to fit
*/

.one-screen-grid {
    display: grid;
    grid-template-rows: auto 1fr;
    grid-template-columns: 1fr;
    gap: 0.5rem;
    min-height: 60vh;
    overflow: hidden;
}

/* Top row: ingredients + stations */
.lab-grid, .compact-lab .ingredients-stations-row {
    display: grid;
    grid-template-columns: 22% 52% 26%;
    gap: 0.5rem;
    min-height: 48vh;
}

.ingredients-pool, .processing-stations, .cauldron-section { overflow: hidden; }

.lab-panel { background: rgba(26, 26, 46, 0.6); border: 1px solid #c8aa6e; border-radius: 10px; padding: 0.5rem; }
.stations-panel { min-height: 48vh; }
.stations-panel .stations-grid.two-by-two {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-template-rows: minmax(180px, auto) minmax(180px, auto);
    gap: 1.6rem 0.8rem; /* larger row gap, slightly wider column gap */
    height: auto;
    min-height: unset;
    max-height: unset;
}
.ingredients-panel { max-height: 60vh; }
.cauldron-panel { max-height: 43vh; display: flex; flex-direction: column; }

.header-section {
    text-align: center;
    margin-bottom: 2rem;
    padding: 2rem 0;
}

.game-title {
    font-size: 2.5rem;
    font-weight: 700;
    background: linear-gradient(45deg, #c89b3c, #f0e6d2, #c8aa6e);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    margin-bottom: 0.5rem;
}

.game-subtitle {
    font-size: 1.2rem;
    color: #c8aa6e;
    margin-bottom: 0;
}

.connection-status {
    text-align: center;
    margin-bottom: 1.5rem;
    padding: 1rem;
    background: rgba(26, 26, 46, 0.8);
    border-radius: 10px;
    border: 2px solid #c8aa6e;
    backdrop-filter: blur(10px);
    font-family: 'Orbitron', sans-serif;
    font-weight: 600;
}

.top-right-status {
    position: absolute;
    top: 10px;
    right: 14px;
    background: rgba(26,26,46,0.8);
    border: 1px solid #c8aa6e;
    border-radius: 8px;
    padding: 6px 10px;
    font-family: 'Orbitron', sans-serif;
    font-size: 12px;
    display: inline-flex;
    gap: 6px;
    align-items: center;
}
.top-right-status .label { color: #c8aa6e; opacity: 0.85; }
.top-right-status .value.connected { color: #00ff88; }
.top-right-status .value.disconnected { color: #ff6b6b; }

.text-success {
    color: #00ff88 !important;
    text-shadow: 0 0 10px rgba(0, 255, 136, 0.3);
}

.text-danger {
    color: #ff4444 !important;
    text-shadow: 0 0 10px rgba(255, 68, 68, 0.3);
}

.game-setup {
    background: rgba(26, 26, 46, 0.8);
    border: 2px solid #c8aa6e;
    border-radius: 12px;
    padding: 2rem;
    backdrop-filter: blur(10px);
}

.form-label {
    color: #c8aa6e;
    font-weight: 600;
    font-size: 0.9rem;
    margin-bottom: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.form-control {
    background: rgba(0, 0, 0, 0.3);
    border: 2px solid rgba(200, 170, 110, 0.3);
    border-radius: 8px;
    color: #f0e6d2;
    padding: 0.75rem 1rem;
    font-family: 'Orbitron', monospace;
    font-size: 0.9rem;
    transition: all 0.3s ease;
}

.form-control:focus {
    background: rgba(0, 0, 0, 0.5);
    border-color: #c8aa6e;
    box-shadow: 0 0 0 0.2rem rgba(200, 170, 110, 0.25);
    color: #f0e6d2;
    outline: none;
}

.setup-buttons {
    text-align: center;
    margin-top: 1.5rem;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 0.5rem;
}

.arcane-btn {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    font-family: 'Orbitron', sans-serif;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    cursor: pointer;
    transition: all 0.3s ease;
    margin: 0.25rem;
    display: inline-block;
}

.arcane-btn-primary {
    background: linear-gradient(45deg, #c89b3c, #c8aa6e);
    color: #0a0e27;
    border: 2px solid #c8aa6e;
    box-shadow: 0 4px 15px rgba(200, 155, 60, 0.3);
}

.arcane-btn-success {
    background: linear-gradient(45deg, #00ff88, #00cc6a);
    color: #0a0e27;
    border: 2px solid #00ff88;
    box-shadow: 0 4px 15px rgba(0, 255, 136, 0.3);
}

.arcane-btn-warning {
    background: linear-gradient(45deg, #ff6b6b, #ff5252);
    color: #ffffff;
    border: 2px solid #ff6b6b;
    box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);
}

.arcane-btn:hover:not(:disabled) {
    transform: translateY(-2px);
}

.arcane-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.players-section {
    background: rgba(26, 26, 46, 0.8);
    border: 2px solid #c8aa6e;
    border-radius: 12px;
    padding: 1.5rem;
    margin-top: 2rem;
    backdrop-filter: blur(10px);
}

.players-header h4 {
    color: #c8aa6e;
    font-family: 'Orbitron', sans-serif;
    text-align: center;
    margin-bottom: 1rem;
}

.players-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

.player-card {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    background: rgba(0, 255, 136, 0.1);
    border: 1px solid #00ff88;
    border-radius: 8px;
    padding: 0.75rem 1rem;
}

.player-card.waiting {
    background: rgba(200, 170, 110, 0.05);
    border-color: rgba(200, 170, 110, 0.5);
    opacity: 0.7;
}

.player-icon {
    font-size: 1.2rem;
    color: #00ff88;
}

.player-card.waiting .player-icon {
    color: #c8aa6e;
    animation: pulse-waiting 2s infinite;
}

.player-name {
    color: #f0e6d2;
    font-family: 'Orbitron', sans-serif;
    font-weight: 600;
    font-size: 0.9rem;
}

@@keyframes pulse-waiting {
    0%, 100% { opacity: 0.5; }
    50% { opacity: 1; }
}

.game-interface {
    margin-top: 2rem;
    padding: 1rem;
    background: rgba(26, 26, 46, 0.6);
    border: 1px solid #c8aa6e;
    border-radius: 8px;
}

.interface-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding: 1rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
}

.character-info {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.character-portrait {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid #c8aa6e;
}

.character-details h3 {
    margin: 0;
    font-size: 1.2rem;
    color: #f0e6d2;
}

.role-subtitle {
    margin: 0;
    color: #c8aa6e;
    font-size: 0.9rem;
    opacity: 0.8;
}

.score-display {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
}

.score-label {
    font-size: 0.8rem;
    color: #c8aa6e;
    margin-bottom: 0.25rem;
}

.score-value {
    font-size: 1.2rem;
    color: #00ff88;
    font-weight: bold;
}

.status-badge {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: bold;
    margin-top: 4px;
}

.status-badge.success {
    background: rgba(0, 255, 136, 0.2);
    color: #00ff88;
    border: 1px solid #00ff88;
}

.status-badge.active {
    background: rgba(200, 155, 60, 0.2);
    color: #c8aa6e;
    border: 1px solid #c8aa6e;
}

.instruction-panel {
    padding: 1rem;
    border-radius: 8px;
    margin-bottom: 0.75rem;
    font-size: 1rem;
    text-align: center;
}

.piltover-instruction {
    background: linear-gradient(135deg, rgba(200, 155, 60, 0.1), rgba(240, 230, 210, 0.05));
    border: 1px solid #c8aa6e;
    color: #f0e6d2;
}

.zaunite-instruction {
    background: linear-gradient(135deg, rgba(0, 153, 153, 0.1), rgba(0, 200, 200, 0.05));
    border: 1px solid #00c8c8;
    color: #e0ffff;
}

.recipe-scroll {
    background: rgba(26, 26, 46, 0.4);
    border: 1px solid #c8aa6e;
    border-radius: 8px;
    padding: 1.2rem;
    margin-bottom: 0.75rem;
    max-height: none;
    overflow: hidden;
}

.old-scroll {
    background: #2a2016;
    border: 2px solid #a37b2c;
    border-radius: 10px;
    box-shadow: inset 0 0 60px rgba(0,0,0,0.6), 0 6px 20px rgba(0,0,0,0.5);
    position: relative;
}

.old-scroll:before,
.old-scroll:after {
    content: "";
    position: absolute;
    left: 0; right: 0;
    height: 14px;
    background: linear-gradient(90deg, rgba(163,123,44,0.6), rgba(255,219,140,0.15), rgba(163,123,44,0.6));
}
.old-scroll:before { top: 0; }
.old-scroll:after { bottom: 0; }

.old-scroll .recipe-header h4 { color: #f3e3b0; text-shadow: 0 0 8px rgba(243,227,176,0.35); }
.old-scroll .step-content h5 { color: #f1e6c8; }

.recipe-header {
    text-align: center;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid rgba(200, 170, 110, 0.3);
}

.recipe-header h4 {
    color: #c8aa6e;
    font-size: 1.3rem;
    margin-bottom: 0.5rem;
}

.recipe-description {
    color: #f0e6d2;
    opacity: 0.8;
    margin: 0;
    font-size: 0.9rem;
    line-height: 1.4;
}

.recipe-steps { display: grid; grid-template-columns: repeat(2, minmax(0, 1fr)); gap: 0.75rem; }
.compact-steps .recipe-step { padding: 0.75rem; }

.recipe-step {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    padding: 1rem;
    background: rgba(200, 155, 60, 0.1);
    border: 1px solid #c8aa6e;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(200, 155, 60, 0.2);
}

.step-icon {
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(200, 155, 60, 0.2);
    border-radius: 50%;
    font-size: 1.2rem;
    flex-shrink: 0;
}

.step-content h5 {
    color: #f0e6d2;
    margin: 0 0 0.5rem 0;
    font-size: 1.1rem;
}

.step-description {
    color: #cdbe91;
    margin: 0 0 1rem 0;
    line-height: 1.5;
    font-size: 0.9rem;
}

.step-requirements {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
}

.requirement-tag {
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.requirement-tag.station {
    background: rgba(0, 153, 153, 0.2);
    color: #00c8c8;
    border: 1px solid #00c8c8;
}

.requirement-tag.state {
    background: rgba(255, 193, 7, 0.2);
    color: #ffc107;
    border: 1px solid #ffc107;
}

/* Drag and Drop Laboratory Layout - Compact Version */
.dragdrop-laboratory {
    display: grid;
    grid-template-rows: 20vh 34vh 36vh;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
    min-height: 90vh;
    max-height: none;
    overflow: hidden;
    padding: 0.25rem;
}
.compact-lab .processing-stations { max-height: 34vh; }
.compact-lab .cauldron-section { min-height: 36vh; }

.ingredients-pool {
    background: rgba(0, 153, 153, 0.08);
    border: 2px solid rgba(0, 200, 200, 0.3);
    border-radius: 12px;
    padding: 0.5rem;
    max-height: 24vh;
    overflow: visible;
}

.ingredients-pool h4 {
    color: #00c8c8;
    margin-bottom: 1rem;
    text-align: center;
}

.ingredients-draggable-container { min-height: 100px; overflow: hidden; }
.no-scroll { overflow: hidden !important; }

.ingredients-dropzone {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
    justify-content: center;
    min-height: 80px;
    padding: 0.75rem;
    border: 2px dashed rgba(0, 200, 200, 0.3);
    border-radius: 8px;
    background: rgba(0, 200, 200, 0.02);
    transition: all 0.3s ease;
}

.ingredients-dropzone.plk-dd-dragging-over {
    border-color: #00c8c8;
    background: rgba(0, 200, 200, 0.1);
    transform: scale(1.02);
}

.draggable-ingredient {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem;
    background: rgba(0, 200, 200, 0.15);
    border: 2px solid rgba(0, 200, 200, 0.4);
    border-radius: 8px;
    cursor: grab;
    transition: all 0.3s ease;
    min-width: 96px;
    text-align: center;
}

.draggable-ingredient:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 200, 200, 0.3);
}

.draggable-ingredient.plk-dd-in-transit {
    opacity: 0.5;
    transform: rotate(5deg);
    cursor: grabbing;
}

.draggable-ingredient .ingredient-image {
    width: 50px;
    height: 50px;
    border-radius: 6px;
    overflow: hidden;
}

.draggable-ingredient .ingredient-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.draggable-ingredient .ingredient-info h6 {
    color: #f0e6d2;
    margin: 0;
    font-size: 0.85rem;
    font-weight: 600;
}

.draggable-ingredient .ingredient-state {
    font-size: 0.7rem;
    color: #00c8c8;
    font-weight: 600;
    text-transform: uppercase;
}

.add-to-cauldron-btn {
    background: linear-gradient(45deg, #ffc107, #ffb300);
    color: #0a0e27;
    border: none;
    border-radius: 4px;
    padding: 0.25rem 0.5rem;
    font-size: 0.7rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-top: 0.5rem;
    opacity: 0.9;
}

.add-to-cauldron-btn:hover {
    transform: translateY(-1px);
    opacity: 1;
    box-shadow: 0 2px 6px rgba(255, 193, 7, 0.4);
}

/* Processing Stations */
.processing-stations {
    background: rgba(200, 155, 60, 0.08);
    border: 2px solid rgba(200, 170, 110, 0.3);
    border-radius: 12px;
    padding: 0.75rem 0.5rem 0.75rem 0.5rem;
    max-height: none;
    overflow: visible;
}

.processing-stations h4 {
    color: #c8aa6e;
    margin-bottom: 1rem;
    text-align: center;
}

.stations-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 1rem;
    max-height: 35vh;
    min-height: 35vh;
}

.processing-station {
    background: rgba(200, 155, 60, 0.1);
    border: 2px solid rgba(200, 170, 110, 0.4);
    border-radius: 10px;
    padding: 0.75rem;
    text-align: center;
    transition: all 0.3s ease;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    min-height: 100%;
}

.processing-station:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(200, 155, 60, 0.2);
}

.station-header { margin-bottom: 0.5rem; }

.station-icon {
    font-size: 2rem;
    display: block;
    margin-bottom: 0.5rem;
}

.station-header h5 {
    color: #c8aa6e;
    margin: 0;
    font-size: 0.9rem;
    font-weight: 600;
}

.station-dropzone {
    min-height: 96px;
    max-height: 92px;
    border: 2px dashed rgba(200, 170, 110, 0.5);
    border-radius: 8px;
    padding: 0.5rem;
    background: rgba(200, 155, 60, 0.05);
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-wrap: wrap;
    gap: 0.5rem;
    flex: 1;
}

.station-dropzone.plk-dd-dragging-over {
    border-color: #c8aa6e;
    background: rgba(200, 155, 60, 0.2);
    transform: scale(1.05);
    box-shadow: 0 0 20px rgba(200, 155, 60, 0.3);
}

.processing-ingredient {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    text-align: center;
}

.processing-ingredient img {
    width: 40px;
    height: 40px;
    border-radius: 4px;
    object-fit: cover;
}

.processing-ingredient span {
    color: #f0e6d2;
    font-size: 0.8rem;
    font-weight: 600;
}

.station-placeholder {
    color: #cdbe91;
    opacity: 0.7;
    font-size: 0.8rem;
    text-align: center;
}

.process-btn {
    background: linear-gradient(45deg, #c89b3c, #c8aa6e);
    color: #0a0e27;
    border: none;
    border-radius: 6px;
    padding: 0.5rem 0.75rem;
    font-size: 0.75rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-top: 0.5rem;
    width: 100%;
    flex-shrink: 0;
}

.process-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(200, 155, 60, 0.3);
}

/* Cauldron Dropzone */
.cauldron-dropzone {
    min-height: 330px;
    flex: 1;
    border: 3px dashed rgba(255, 193, 7, 0.4);
    border-radius: 12px;
    padding: 1rem;
    background: rgba(255, 193, 7, 0.05);
    transition: all 0.3s ease;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    align-items: center;
    justify-content: flex-start;
    overflow-y: visible;
}

.cauldron-dropzone.plk-dd-dragging-over {
    border-color: #ffc107;
    background: rgba(255, 193, 7, 0.15);
    transform: scale(1.02);
    box-shadow: 0 0 25px rgba(255, 193, 7, 0.4);
}

.cauldron-dropzone .cauldron-ingredient {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    background: rgba(255, 193, 7, 0.2);
    border: 1px solid rgba(255, 193, 7, 0.5);
    border-radius: 8px;
    width: 100%;
    max-width: 250px;
}

.cauldron-dropzone .cauldron-ingredient img {
    width: 35px;
    height: 35px;
    border-radius: 4px;
    object-fit: cover;
}

.cauldron-dropzone .cauldron-ingredient span {
    color: #f0e6d2;
    font-weight: 600;
    font-size: 0.9rem;
}

.cauldron-dropzone .cauldron-placeholder {
    text-align: center;
    color: #cdbe91;
    opacity: 0.7;
}

.cauldron-dropzone .cauldron-placeholder span {
    font-size: 3rem;
    display: block;
    margin-bottom: 0.5rem;
}

.cauldron-dropzone .cauldron-placeholder p {
    margin: 0 0 0.25rem 0;
    font-size: 1rem;
}

.cauldron-dropzone .cauldron-placeholder small {
    font-size: 0.8rem;
    opacity: 0.8;
}

/* State-specific styling for draggable ingredients */
.draggable-ingredient.state-ground {
    border-color: #ffc107;
    background: rgba(255, 193, 7, 0.15);
}

.draggable-ingredient.state-heated {
    border-color: #ff6b6b;
    background: rgba(255, 107, 107, 0.15);
}

.draggable-ingredient.state-chopped {
    border-color: #28a745;
    background: rgba(40, 167, 69, 0.15);
}

.draggable-ingredient.state-mixed {
    border-color: #9c27b0;
    background: rgba(156, 39, 176, 0.15);
}

/* Mixing Station Specific Styling */
.mixing-station {
    background: linear-gradient(135deg, rgba(156, 39, 176, 0.1), rgba(233, 30, 99, 0.05));
    border-color: rgba(156, 39, 176, 0.4);
}

.mixing-dropzone {
    border-color: rgba(156, 39, 176, 0.5) !important;
    background: rgba(156, 39, 176, 0.05) !important;
}

.mixing-dropzone.plk-dd-dragging-over {
    border-color: #9c27b0 !important;
    background: rgba(156, 39, 176, 0.2) !important;
    box-shadow: 0 0 20px rgba(156, 39, 176, 0.3) !important;
}

.combine-btn {
    background: linear-gradient(45deg, #9c27b0, #e91e63) !important;
    color: #ffffff !important;
}

.combine-btn:hover {
    box-shadow: 0 2px 8px rgba(156, 39, 176, 0.4) !important;
}

/* Responsive Design */
@@media (max-width: 768px) {
    .stations-grid {
        grid-template-columns: repeat(2, 1fr);
        grid-template-rows: repeat(2, 1fr);
        gap: 0.5rem;
        max-height: 55vh;
        min-height: 55vh;
    }
    
    .dragdrop-laboratory {
        grid-template-rows: 15vh 45vh 40vh;
        gap: 0.5rem;
        padding: 0.25rem;
        max-height: none;
        overflow: visible;
    }
    
    .ingredients-pool {
        max-height: 14vh;
        padding: 0.5rem;
    }
    
    .processing-stations {
        max-height: 43vh;
        padding: 0.5rem;
    }
    
    .cauldron-section {
        min-height: 38vh;
        max-height: none;
        padding: 0.5rem;
        overflow-y: visible;
    }
    
    .station-dropzone {
        min-height: 80px;
        max-height: 80px;
    }
    
    .process-btn {
        font-size: 0.7rem;
        padding: 0.4rem 0.5rem;
    }
    
    .processing-station {
        padding: 0.5rem;
    }
}

@@media (max-width: 480px) {
    .stations-grid {
        grid-template-columns: 1fr;
        grid-template-rows: repeat(4, 1fr);
        gap: 0.5rem;
        max-height: 70vh;
        overflow-y: auto;
    }
    
    .dragdrop-laboratory {
        grid-template-rows: 10vh 50vh 40vh;
        max-height: none;
        overflow: visible;
    }
    
    .processing-stations {
        max-height: 48vh;
        overflow-y: auto;
    }
    
    .cauldron-section {
        min-height: 38vh;
        max-height: none;
        overflow-y: visible;
    }
}

.cauldron-section {
    background: rgba(255, 193, 7, 0.08);
    border: 2px solid rgba(255, 193, 7, 0.3);
    border-radius: 12px;
    padding: 1rem;
    min-height: 42vh;
    max-height: none;
    overflow-y: visible;
    display: flex;
    flex-direction: column;
}

.cauldron-section h4 {
    color: #ffc107;
    margin-bottom: 1rem;
    font-size: 1.1rem;
    text-align: center;
}

.cauldron-container {
    padding: 1.5rem 1rem 1rem 1rem;
    background: rgba(255, 193, 7, 0.05);
    border: 2px dashed rgba(255, 193, 7, 0.3);
    border-radius: 8px;
    min-height: 200px;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    margin-bottom: 1.25rem;
}

.cauldron-ingredient {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    background: rgba(255, 193, 7, 0.2);
    border: 1px solid rgba(255, 193, 7, 0.5);
    border-radius: 8px;
}

.cauldron-ingredient img {
    width: 35px;
    height: 35px;
    border-radius: 4px;
    object-fit: cover;
}

.cauldron-ingredient span {
    color: #f0e6d2;
    font-weight: 600;
    font-size: 0.9rem;
}

.cauldron-empty {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
}

.cauldron-placeholder {
    text-align: center;
    color: #cdbe91;
    opacity: 0.7;
}

.cauldron-placeholder span {
    font-size: 3rem;
    display: block;
    margin-bottom: 0.5rem;
}

.cauldron-placeholder p {
    margin: 0 0 0.25rem 0;
    font-size: 1rem;
}

.cauldron-placeholder small {
    font-size: 0.8rem;
    opacity: 0.8;
}

.submit-potion-btn {
    margin-top: 2rem;
    margin-bottom: 1rem;
    width: 100%;
    font-size: 1.1rem;
    padding: 1rem;
    flex-shrink: 0;
    position: relative;
    z-index: 10;
}

.reset-btn {
    margin-top: 1rem;
    margin-bottom: 1rem;
    width: 100%;
    font-size: 1rem;
    padding: 0.75rem;
    flex-shrink: 0;
    position: relative;
    z-index: 10;
    background: linear-gradient(45deg, #ff6b35, #f7931e) !important;
    color: #ffffff !important;
    border: 2px solid #ff6b35 !important;
}

.reset-btn:hover {
    background: linear-gradient(45deg, #ff5722, #f57c00) !important;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(255, 107, 53, 0.3);
}

.completion-panel {
    background: rgba(0, 255, 136, 0.1);
    border: 2px solid #00ff88;
    border-radius: 8px;
    padding: 2rem;
    text-align: center;
    margin-top: 1rem;
}

.completion-animation h3 {
    color: #00ff88;
    font-size: 1.5rem;
    margin-bottom: 1rem;
}

.completion-animation p {
    color: #f0e6d2;
    margin-bottom: 1.5rem;
    font-size: 1.1rem;
}

.potion-complete {
    font-size: 3rem;
    margin-bottom: 1rem;
    animation: potion-sparkle 2s infinite;
}

@@keyframes potion-sparkle {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.1); }
}

.mistakes-panel {
    background: rgba(255, 107, 107, 0.1);
    border: 1px solid #ff6b6b;
    border-radius: 8px;
    padding: 1.5rem;
    margin-top: 1rem;
}

.mistakes-panel h4 {
    color: #ff6b6b;
    margin-bottom: 1rem;
    font-size: 1.1rem;
}

.mistakes-panel p {
    color: #f0e6d2;
    margin-bottom: 1rem;
    opacity: 0.9;
}

.mistake-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.mistake-list li {
    color: #ffcccb;
    padding: 0.5rem 0;
    border-bottom: 1px solid rgba(255, 107, 107, 0.2);
    font-size: 0.9rem;
}

.mistake-list li:last-child {
    border-bottom: none;
}

.status-overlay {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 1000;
}

.status-message {
    padding: 0.75rem 1.5rem;
    border-radius: 6px;
    font-weight: 600;
    font-size: 0.9rem;
}

.status-message.success {
    background: rgba(0, 255, 136, 0.2);
    border: 1px solid #00ff88;
    color: #00ff88;
}

.status-message.warning {
    background: rgba(255, 193, 7, 0.2);
    border: 1px solid #ffc107;
    color: #ffc107;
}

.status-message.info {
    background: rgba(0, 123, 255, 0.2);
    border: 1px solid #007bff;
    color: #007bff;
}

/* Story mode styles */
.story-context {
    text-align: center;
    margin: 1rem 0;
}

.story-badge {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    border-radius: 10px;
    font-family: 'Orbitron', monospace;
    font-weight: 600;
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    backdrop-filter: blur(10px);
    box-shadow: 0 4px 15px rgba(0,0,0,0.3);
}

.story-badge.zaun-theme {
    background: linear-gradient(45deg, #0a1e16, #1e5f47);
    border: 1px solid #00d4aa;
    color: #00ffc8;
}

.story-badge.piltover-theme {
    background: linear-gradient(45deg, #2c1810, #5c3317);
    border: 1px solid #c8aa6e;
    color: #f5e6a3;
}

.badge-icon {
    display: inline-block;
    margin-right: 0.5rem;
    font-size: 1.2rem;
}

@@media (max-width: 768px) {
    .interface-header {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
    }
}
</style>
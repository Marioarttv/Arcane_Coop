@page "/visual-novel"
@page "/visual-novel/{theme}"
@using Arcane_Coop.Models
@inject IJSRuntime JSRuntime

<link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Cinzel:wght@400;600;700&family=Rajdhani:wght@300;400;600;700&display=swap" rel="stylesheet">

<div class="visual-novel @GetThemeClass()">
    @if (currentScene != null)
    {
        <!-- Background -->
        <div class="scene-background @GetBackgroundClass()">
            @if (!string.IsNullOrEmpty(currentScene.BackgroundImage))
            {
                <img src="@currentScene.BackgroundImage" alt="Scene background" class="background-image" />
            }
            <div class="background-overlay"></div>
            <div class="atmospheric-effects"></div>
        </div>

        <!-- Character Layer -->
        <div class="characters-layer @GetLayoutClass()">
            @if (currentScene.Layout == SceneLayout.SingleCenter && GetCurrentSpeaker() != null)
            {
                <div class="character-container center-character @(GetCurrentSpeaker()?.IsActive == true ? "active" : "")">
                    <div class="character-portrait">
                        <img src="@GetCurrentSpeaker()?.GetCurrentImagePath()" alt="@GetCurrentSpeaker()?.Name (@GetCurrentSpeaker()?.CurrentExpression)" class="portrait-image" />
                        <div class="character-glow"></div>
                    </div>
                </div>
            }
            else if (currentScene.Layout == SceneLayout.DualCharacters)
            {
                @foreach (var character in currentScene.Characters.Take(2))
                {
                    <div class="character-container @GetCharacterPositionClass(character) @(character.IsActive ? "active" : "inactive")">
                        <div class="character-portrait">
                            <img src="@character.GetCurrentImagePath()" alt="@character.Name (@character.CurrentExpression)" class="portrait-image" />
                            <div class="character-glow"></div>
                        </div>
                    </div>
                }
            }
        </div>

        <!-- Dialogue Box -->
        <div class="dialogue-section">
            <div class="dialogue-box @GetDialogueBoxClass()">
                <!-- Character Name -->
                @if (config.ShowCharacterNames && GetCurrentSpeaker() != null)
                {
                    <div class="character-name-tag @GetNameTagClass()">
                        <span class="character-name">@GetCurrentSpeaker()?.DisplayName</span>
                        <div class="name-tag-decoration"></div>
                    </div>
                }

                <!-- Dialogue Text Container -->
                <div class="dialogue-content">
                    <div class="dialogue-text-container">
                        <div class="dialogue-text @GetTextAnimationClass()" @ref="dialogueTextElement">
                            @((MarkupString)GetFormattedText())
                        </div>
                        
                        @* Removed blinking cursor - was annoying *@
                    </div>
                </div>
            </div>
            
            <!-- Control Buttons - Now Outside Dialogue Box -->
            <div class="dialogue-controls-external">
                @if (config.ShowSkipButton && !state.IsTextFullyDisplayed)
                {
                    <button class="control-btn skip-btn @GetControlButtonClass()" @onclick="SkipText" title="Skip to end of text">
                        <span class="btn-icon">⏭️</span>
                        <span class="btn-text">Skip</span>
                        <div class="btn-effect"></div>
                    </button>
                }

                @if (config.ShowContinueButton && state.IsTextFullyDisplayed && !IsLastDialogue())
                {
                    <button class="control-btn continue-btn @GetControlButtonClass()" @onclick="ContinueToNext" title="Continue to next dialogue">
                        <span class="btn-icon">▶️</span>
                        <span class="btn-text">Continue</span>
                        <div class="btn-effect"></div>
                    </button>
                }
            </div>
        </div>
    }
    else
    {
        <div class="loading-screen @GetThemeClass()">
            <div class="loading-content">
                <div class="loading-spinner @GetSpinnerClass()"></div>
                <h2>Loading Visual Novel...</h2>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string? Theme { get; set; }
    [Parameter] public VisualNovelScene? Scene { get; set; }
    [Parameter] public VisualNovelConfig? Configuration { get; set; }
    [Parameter] public EventCallback<VisualNovelState> OnStateChanged { get; set; }
    [Parameter] public EventCallback OnSceneComplete { get; set; }

    private VisualNovelConfig config = new();
    private VisualNovelState state = new();
    private VisualNovelScene? currentScene;
    private DialogueLine? currentDialogue;
    private ElementReference dialogueTextElement;
    
    private Timer? typewriterTimer;
    private int currentTextIndex = 0;
    private string displayedText = "";
    private bool isDisposed = false;

    protected override async Task OnInitializedAsync()
    {
        // Initialize configuration
        if (Configuration != null)
            config = Configuration;
        
        // Set theme from parameter
        if (!string.IsNullOrEmpty(Theme))
        {
            if (Enum.TryParse<NovelTheme>(Theme, true, out var themeEnum))
                config.Theme = themeEnum;
        }

        // Initialize scene
        if (Scene != null)
        {
            currentScene = Scene;
            state.CurrentSceneId = Scene.Id;
            await StartDialogue();
        }
        else
        {
            // Load demo scene if no scene provided
            currentScene = CreateDemoScene();
            await StartDialogue();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && currentDialogue != null)
        {
            await StartTextAnimation();
        }
    }

    private async Task StartDialogue()
    {
        if (currentScene == null || !currentScene.DialogueLines.Any()) return;
        
        currentDialogue = currentScene.DialogueLines[state.CurrentDialogueIndex];
        UpdateCharacterStates();
        await InvokeStateChanged();
    }

    private async Task StartTextAnimation()
    {
        if (currentDialogue == null) return;

        displayedText = "";
        currentTextIndex = 0;
        state.IsTextFullyDisplayed = false;

        switch (currentDialogue.AnimationType)
        {
            case TextAnimationType.Typewriter:
                await StartTypewriterEffect();
                break;
            case TextAnimationType.Instant:
                displayedText = currentDialogue.Text;
                state.IsTextFullyDisplayed = true;
                StateHasChanged();
                break;
            case TextAnimationType.FadeIn:
            case TextAnimationType.SlideUp:
                displayedText = currentDialogue.Text;
                state.IsTextFullyDisplayed = true;
                StateHasChanged();
                break;
        }

        await InvokeStateChanged();
    }

    private async Task StartTypewriterEffect()
    {
        if (currentDialogue == null || isDisposed) return;

        var speed = currentDialogue.TypewriterSpeed > 0 ? currentDialogue.TypewriterSpeed : config.DefaultTypewriterSpeed;
        
        typewriterTimer?.Dispose();
        typewriterTimer = new Timer(async _ =>
        {
            if (isDisposed || currentDialogue == null) return;

            await InvokeAsync(() =>
            {
                if (currentTextIndex < currentDialogue.Text.Length)
                {
                    displayedText += currentDialogue.Text[currentTextIndex];
                    currentTextIndex++;
                    StateHasChanged();
                }
                else
                {
                    state.IsTextFullyDisplayed = true;
                    typewriterTimer?.Dispose();
                    StateHasChanged();
                    
                    // Auto-continue if enabled
                    if (currentDialogue.AutoContinue && !IsLastDialogue())
                    {
                        _ = Task.Delay(currentDialogue.AutoContinueDelay).ContinueWith(async _ =>
                        {
                            if (!isDisposed)
                                await InvokeAsync(ContinueToNext);
                        });
                    }
                }
            });
        }, null, 0, speed);
    }

    private async Task SkipText()
    {
        if (currentDialogue == null) return;

        typewriterTimer?.Dispose();
        displayedText = currentDialogue.Text;
        state.IsTextFullyDisplayed = true;
        StateHasChanged();
        await InvokeStateChanged();
    }

    private async Task ContinueToNext()
    {
        if (IsLastDialogue())
        {
            await OnSceneComplete.InvokeAsync();
            return;
        }

        state.CurrentDialogueIndex++;
        currentDialogue = currentScene?.DialogueLines[state.CurrentDialogueIndex];
        UpdateCharacterStates();
        await StartTextAnimation();
    }


    private void UpdateCharacterStates()
    {
        if (currentScene == null || currentDialogue == null) return;

        // Reset all characters to inactive
        foreach (var character in currentScene.Characters)
            character.IsActive = false;

        // Set current speaker as active
        var speaker = currentScene.Characters.FirstOrDefault(c => c.Id == currentDialogue.CharacterId);
        if (speaker != null)
        {
            speaker.IsActive = true;
            
            // Update speaker expression if specified
            if (currentDialogue.SpeakerExpression.HasValue)
                speaker.CurrentExpression = currentDialogue.SpeakerExpression.Value;
        }

        // Update expressions for other characters if specified
        foreach (var expressionChange in currentDialogue.CharacterExpressions)
        {
            var character = currentScene.Characters.FirstOrDefault(c => c.Id == expressionChange.Key);
            if (character != null)
                character.CurrentExpression = expressionChange.Value;
        }
    }

    private VisualNovelCharacter? GetCurrentSpeaker()
    {
        if (currentScene == null || currentDialogue == null) return null;
        return currentScene.Characters.FirstOrDefault(c => c.Id == currentDialogue.CharacterId);
    }

    private bool IsLastDialogue()
    {
        return currentScene == null || state.CurrentDialogueIndex >= currentScene.DialogueLines.Count - 1;
    }

    private async Task InvokeStateChanged()
    {
        await OnStateChanged.InvokeAsync(state);
    }

    private string GetFormattedText()
    {
        return displayedText.Replace("\n", "<br/>");
    }

    // CSS Class Methods
    private string GetThemeClass() => config.Theme.ToString().ToLower();
    private string GetBackgroundClass() => $"background-{config.Theme.ToString().ToLower()}";
    private string GetLayoutClass() => currentScene?.Layout.ToString().ToLower() ?? "single";
    private string GetDialogueBoxClass() => $"dialogue-{config.Theme.ToString().ToLower()}";
    private string GetNameTagClass() => $"name-tag-{config.Theme.ToString().ToLower()}";
    private string GetTextAnimationClass() => currentDialogue?.AnimationType.ToString().ToLower() ?? "typewriter";
    private string GetCursorClass() => $"cursor-{config.Theme.ToString().ToLower()}";
    private string GetControlButtonClass() => $"control-{config.Theme.ToString().ToLower()}";
    private string GetSpinnerClass() => $"spinner-{config.Theme.ToString().ToLower()}";
    
    private string GetCharacterPositionClass(VisualNovelCharacter character)
    {
        return character.Position.ToString().ToLower() + "-character";
    }

    private VisualNovelScene CreateDemoScene()
    {
        var scene = new VisualNovelScene
        {
            Name = "Demo Scene",
            Layout = SceneLayout.DualCharacters,
            Theme = config.Theme
        };

        // Add demo characters based on theme
        if (config.Theme == NovelTheme.Piltover)
        {
            scene.Characters.AddRange(new[]
            {
                new VisualNovelCharacter
                {
                    Id = "jayce",
                    Name = "Jayce",
                    DisplayName = "Jayce Talis",
                    ImagePath = "/images/Jayce.jpeg",
                    Position = CharacterPosition.Left,
                    ThemeColor = "#c8aa6e"
                },
                new VisualNovelCharacter
                {
                    Id = "viktor",
                    Name = "Viktor",
                    DisplayName = "Viktor",
                    ImagePath = "/images/Viktor.jpeg",
                    Position = CharacterPosition.Right,
                    ThemeColor = "#0596aa"
                }
            });

            scene.DialogueLines.AddRange(new[]
            {
                new DialogueLine
                {
                    CharacterId = "jayce",
                    Text = "The Hextech research shows promising results, Viktor. We're on the verge of a breakthrough that could change everything.",
                    AnimationType = TextAnimationType.Typewriter,
                    TypewriterSpeed = 40
                },
                new DialogueLine
                {
                    CharacterId = "viktor",
                    Text = "Indeed, Jayce. But we must consider the implications. Progress without wisdom is merely chaos in disguise.",
                    AnimationType = TextAnimationType.Typewriter,
                    TypewriterSpeed = 45
                },
                new DialogueLine
                {
                    CharacterId = "jayce",
                    Text = "You're right to be cautious. But think of what we could accomplish - clean energy for all of Piltover, maybe even beyond.",
                    AnimationType = TextAnimationType.Typewriter,
                    TypewriterSpeed = 40
                }
            });
        }
        else
        {
            scene.Characters.AddRange(new[]
            {
                new VisualNovelCharacter
                {
                    Id = "vi",
                    Name = "Vi",
                    DisplayName = "Vi",
                    ImagePath = "/images/Vi.jpeg",
                    Position = CharacterPosition.Left,
                    ThemeColor = "#00d4aa"
                },
                new VisualNovelCharacter
                {
                    Id = "caitlyn",
                    Name = "Caitlyn",
                    DisplayName = "Sheriff Caitlyn",
                    ImagePath = "/images/Cait.jpeg",
                    Position = CharacterPosition.Right,
                    ThemeColor = "#ff007f"
                }
            });

            scene.DialogueLines.AddRange(new[]
            {
                new DialogueLine
                {
                    CharacterId = "vi",
                    Text = "Cupcake, you seeing this? The chemical levels down here are off the charts. Something big is going down.",
                    AnimationType = TextAnimationType.Typewriter,
                    TypewriterSpeed = 35
                },
                new DialogueLine
                {
                    CharacterId = "caitlyn",
                    Text = "I see it, Vi. The readings match what we found at the warehouse. Someone's been manufacturing Shimmer on an industrial scale.",
                    AnimationType = TextAnimationType.Typewriter,
                    TypewriterSpeed = 50
                },
                new DialogueLine
                {
                    CharacterId = "vi",
                    Text = "Then we better move fast. In Zaun, when the Chem-Barons get desperate, innocent people pay the price.",
                    AnimationType = TextAnimationType.Typewriter,
                    TypewriterSpeed = 35
                }
            });
        }

        return scene;
    }

    public void Dispose()
    {
        isDisposed = true;
        typewriterTimer?.Dispose();
    }
}

<style>
/********************************************
 * Visual Novel Container & Base Styling
 ********************************************/
.visual-novel {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    overflow: hidden;
    font-family: 'Rajdhani', sans-serif;
    color: #fff;
    display: flex;
    flex-direction: column;
    z-index: 1000;
}

/********************************************
 * Theme-Specific Backgrounds
 ********************************************/
.visual-novel.piltover {
    background: linear-gradient(135deg, #2c1810 0%, #5a4a3a 30%, #c8aa6e 100%);
}

.visual-novel.zaun {
    background: linear-gradient(135deg, #0a1e16 0%, #1a3a2e 30%, #00d4aa 100%);
}

/********************************************
 * Scene Background
 ********************************************/
.scene-background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
}

.background-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    filter: brightness(0.8);
}

.background-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.4);
    z-index: 2;
}

.atmospheric-effects {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 3;
    pointer-events: none;
}

.background-piltover .atmospheric-effects {
    background: radial-gradient(circle at 20% 50%, rgba(200, 170, 110, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 215, 0, 0.05) 0%, transparent 50%);
}

.background-zaun .atmospheric-effects {
    background: radial-gradient(circle at 30% 70%, rgba(0, 212, 170, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 70% 30%, rgba(0, 255, 200, 0.05) 0%, transparent 50%);
}

/********************************************
 * Character Layer
 ********************************************/
.characters-layer {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 4;
    display: flex;
    align-items: flex-end;
    justify-content: center;
    
}

.characters-layer.single {
    justify-content: center;
}

.characters-layer.dualcharacters {
    justify-content: space-around;
    padding: 0 5%;
    
}

.character-container {
    position: relative;
    bottom: 35%;
    transition: all 0.6s cubic-bezier(0.25, 0.8, 0.25, 1);
    transform: scale(0.95) translateY(10px);
}

.character-container.active {
    transform: scale(1.05) translateY(0px);
    z-index: 5;
}

.character-container.inactive {
    transform: scale(0.88) translateY(15px);
}

.character-portrait {
    position: relative;
    display: flex;
    align-items: flex-end;
    justify-content: center;
}

.portrait-image {
    max-height: 70vh;
    max-width: 400px;
    object-fit: contain;
    transition: all 0.4s ease-in-out;
    transform-origin: center bottom;
}

/* Active character glow effect for transparent PNGs */
.character-container.active .portrait-image {
    filter: drop-shadow(0 0 20px rgba(255, 255, 255, 0.3))
            drop-shadow(0 10px 40px rgba(0, 0, 0, 0.8))
            drop-shadow(0 0 60px rgba(200, 170, 110, 0.2));
}

/* Inactive character subtle shadow */
.character-container.inactive .portrait-image {
    filter: drop-shadow(0 5px 20px rgba(0, 0, 0, 0.6));
    opacity: 0.6;
}

.character-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 120%;
    height: 120%;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.8s cubic-bezier(0.4, 0, 0.2, 1), 
                transform 0.8s cubic-bezier(0.4, 0, 0.2, 1);
    transform: translate(-50%, -50%) scale(0.8);
    z-index: -1;
}

.character-container.active .character-glow {
    opacity: 0.4;
    transform: translate(-50%, -50%) scale(1);
}

.visual-novel.piltover .character-container.active .character-glow {
    background: radial-gradient(ellipse at center, 
        rgba(200, 170, 110, 0.15) 0%, 
        rgba(200, 170, 110, 0.08) 30%, 
        transparent 70%);
    filter: blur(40px);
}

.visual-novel.zaun .character-container.active .character-glow {
    background: radial-gradient(ellipse at center, 
        rgba(0, 212, 170, 0.15) 0%, 
        rgba(0, 212, 170, 0.08) 30%, 
        transparent 70%);
    filter: blur(40px);
}

/* Enhanced theme-specific portrait shadows */
.visual-novel.piltover .character-container.active .portrait-image {
    filter: drop-shadow(0 0 15px rgba(200, 170, 110, 0.4))
            drop-shadow(0 10px 40px rgba(0, 0, 0, 0.7))
            drop-shadow(0 0 40px rgba(255, 215, 0, 0.15));
}

.visual-novel.zaun .character-container.active .portrait-image {
    filter: drop-shadow(0 0 15px rgba(0, 212, 170, 0.4))
            drop-shadow(0 10px 40px rgba(0, 0, 0, 0.7))
            drop-shadow(0 0 40px rgba(0, 255, 200, 0.15));
}

.left-character {
    align-self: flex-end;
}

.right-character {
    align-self: flex-end;
}

.center-character {
    align-self: flex-end;
}

/********************************************
 * Dialogue Section
 ********************************************/
.dialogue-section {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    z-index: 6;
    padding: 2rem;
}

.dialogue-box {
    position: relative;
    min-height: 140px;
    background: linear-gradient(135deg, rgba(0, 0, 0, 0.95) 0%, rgba(20, 20, 20, 0.9) 100%);
    border-radius: 0;
    padding: 2rem 2.5rem 1.5rem 2.5rem;
    border: none;
    overflow: hidden;
    animation: dialogueBoxEntrance 0.8s cubic-bezier(0.25, 0.8, 0.25, 1);
    
    /* Arcane-style border with layered effects */
    box-shadow: 
        inset 0 0 0 2px rgba(200, 170, 110, 0.6),
        inset 0 0 0 4px rgba(0, 0, 0, 0.8),
        inset 0 0 0 6px rgba(200, 170, 110, 0.3),
        0 8px 32px rgba(0, 0, 0, 0.6),
        0 0 40px rgba(200, 170, 110, 0.1);
    
    /* Clip path for angular Arcane-style corners */
    clip-path: polygon(
        0 10px, 10px 0, 
        calc(100% - 10px) 0, 100% 10px,
        100% calc(100% - 10px), calc(100% - 10px) 100%,
        10px 100%, 0 calc(100% - 10px)
    );
}

@@keyframes dialogueBoxEntrance {
    from {
        transform: translateY(50px);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}

/* Runic pattern overlay */
.dialogue-box::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: 
        /* Corner runes */
        radial-gradient(circle at 2rem 2rem, rgba(200, 170, 110, 0.15) 1px, transparent 2px),
        radial-gradient(circle at calc(100% - 2rem) 2rem, rgba(200, 170, 110, 0.15) 1px, transparent 2px),
        radial-gradient(circle at 2rem calc(100% - 2rem), rgba(200, 170, 110, 0.15) 1px, transparent 2px),
        radial-gradient(circle at calc(100% - 2rem) calc(100% - 2rem), rgba(200, 170, 110, 0.15) 1px, transparent 2px),
        /* Border pattern */
        linear-gradient(90deg, rgba(200, 170, 110, 0.2) 1px, transparent 1px),
        linear-gradient(0deg, rgba(200, 170, 110, 0.2) 1px, transparent 1px);
    background-size: 8px 8px, 8px 8px, 8px 8px, 8px 8px, 20px 4px, 4px 20px;
    background-position: top left, top right, bottom left, bottom right, top, left;
    background-repeat: no-repeat, no-repeat, no-repeat, no-repeat, repeat-x, repeat-y;
    pointer-events: none;
    opacity: 0.6;
}

/* Hextech energy glow effect */
.dialogue-box::after {
    content: '';
    position: absolute;
    top: 6px;
    left: 6px;
    right: 6px;
    bottom: 6px;
    background: linear-gradient(135deg, 
        rgba(200, 170, 110, 0.03) 0%, 
        transparent 20%, 
        transparent 80%, 
        rgba(200, 170, 110, 0.03) 100%);
    clip-path: polygon(
        0 8px, 8px 0, 
        calc(100% - 8px) 0, 100% 8px,
        100% calc(100% - 8px), calc(100% - 8px) 100%,
        8px 100%, 0 calc(100% - 8px)
    );
    pointer-events: none;
}

.dialogue-piltover {
    box-shadow: 
        inset 0 0 0 2px rgba(200, 170, 110, 0.8),
        inset 0 0 0 4px rgba(0, 0, 0, 0.8),
        inset 0 0 0 6px rgba(255, 215, 0, 0.4),
        0 8px 32px rgba(0, 0, 0, 0.6),
        0 0 50px rgba(200, 170, 110, 0.2);
}

.dialogue-piltover::before {
    background-image: 
        /* Enhanced corner patterns for Piltover */
        radial-gradient(circle at 2rem 2rem, rgba(200, 170, 110, 0.25) 1px, transparent 2px),
        radial-gradient(circle at calc(100% - 2rem) 2rem, rgba(200, 170, 110, 0.25) 1px, transparent 2px),
        radial-gradient(circle at 2rem calc(100% - 2rem), rgba(200, 170, 110, 0.25) 1px, transparent 2px),
        radial-gradient(circle at calc(100% - 2rem) calc(100% - 2rem), rgba(200, 170, 110, 0.25) 1px, transparent 2px),
        /* Hextech grid pattern */
        linear-gradient(90deg, rgba(255, 215, 0, 0.15) 1px, transparent 1px),
        linear-gradient(0deg, rgba(255, 215, 0, 0.15) 1px, transparent 1px);
}

.dialogue-zaun {
    box-shadow: 
        inset 0 0 0 2px rgba(0, 212, 170, 0.8),
        inset 0 0 0 4px rgba(0, 0, 0, 0.8),
        inset 0 0 0 6px rgba(0, 255, 200, 0.4),
        0 8px 32px rgba(0, 0, 0, 0.6),
        0 0 50px rgba(0, 212, 170, 0.2);
}

.dialogue-zaun::before {
    background-image: 
        /* Underground tech patterns for Zaun */
        radial-gradient(circle at 2rem 2rem, rgba(0, 212, 170, 0.25) 1px, transparent 2px),
        radial-gradient(circle at calc(100% - 2rem) 2rem, rgba(0, 212, 170, 0.25) 1px, transparent 2px),
        radial-gradient(circle at 2rem calc(100% - 2rem), rgba(0, 212, 170, 0.25) 1px, transparent 2px),
        radial-gradient(circle at calc(100% - 2rem) calc(100% - 2rem), rgba(0, 212, 170, 0.25) 1px, transparent 2px),
        /* Chemical grid pattern */
        linear-gradient(90deg, rgba(0, 255, 200, 0.15) 1px, transparent 1px),
        linear-gradient(0deg, rgba(0, 255, 200, 0.15) 1px, transparent 1px);
}

/********************************************
 * Dialogue Controls
 ********************************************/
.dialogue-controls-external {
    position: absolute;
    top: -50px;
    right: 0;
    display: flex;
    gap: 12px;
    z-index: 100;
    padding: 0 2rem;
}

.control-btn {
    padding: 10px 18px;
    border: none;
    background: linear-gradient(135deg, rgba(0, 0, 0, 0.9) 0%, rgba(30, 30, 30, 0.8) 100%);
    color: #fff;
    font-size: 1rem;
    font-family: 'Orbitron', monospace;
    font-weight: 600;
    cursor: pointer;
    position: relative;
    overflow: hidden;
    transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    animation: buttonEntrance 0.6s ease-out;
    
    /* Arcane-style angular shape */
    clip-path: polygon(0 0, calc(100% - 6px) 0, 100% 6px, 100% 100%, 6px 100%, 0 calc(100% - 6px));
    
    /* Glowing border effect */
    box-shadow: 
        inset 0 0 0 1px rgba(200, 170, 110, 0.5),
        0 0 12px rgba(200, 170, 110, 0.2),
        0 2px 8px rgba(0, 0, 0, 0.3);
}

@@keyframes buttonEntrance {
    from {
        transform: translateX(30px);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

.control-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg, 
        rgba(200, 170, 110, 0.1) 0%, 
        transparent 50%, 
        rgba(200, 170, 110, 0.1) 100%);
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
}

.control-btn:hover {
    transform: translateY(-3px) scale(1.05);
    box-shadow: 
        inset 0 0 0 1px rgba(200, 170, 110, 0.9),
        0 0 25px rgba(200, 170, 110, 0.5),
        0 6px 20px rgba(0, 0, 0, 0.4);
}

.control-btn:hover::before {
    opacity: 1;
}

.control-btn:active {
    transform: translateY(0);
    transition: all 0.1s ease;
}

.control-piltover {
    box-shadow: 
        inset 0 0 0 1px rgba(200, 170, 110, 0.6),
        0 0 15px rgba(200, 170, 110, 0.3),
        0 2px 8px rgba(0, 0, 0, 0.3);
}

.control-piltover::before {
    background: linear-gradient(90deg, 
        rgba(255, 215, 0, 0.15) 0%, 
        transparent 50%, 
        rgba(255, 215, 0, 0.15) 100%);
}

.control-piltover:hover {
    box-shadow: 
        inset 0 0 0 1px rgba(200, 170, 110, 0.9),
        0 0 25px rgba(200, 170, 110, 0.5),
        0 4px 16px rgba(0, 0, 0, 0.4);
}

.control-zaun {
    box-shadow: 
        inset 0 0 0 1px rgba(0, 212, 170, 0.6),
        0 0 15px rgba(0, 212, 170, 0.3),
        0 2px 8px rgba(0, 0, 0, 0.3);
}

.control-zaun::before {
    background: linear-gradient(90deg, 
        rgba(0, 255, 200, 0.15) 0%, 
        transparent 50%, 
        rgba(0, 255, 200, 0.15) 100%);
}

.control-zaun:hover {
    box-shadow: 
        inset 0 0 0 1px rgba(0, 212, 170, 0.9),
        0 0 25px rgba(0, 212, 170, 0.5),
        0 4px 16px rgba(0, 0, 0, 0.4);
}

.btn-effect {
    /* Removed */
}

.btn-icon {
    /* No special styling */
}

.btn-text {
    /* No special styling */
}

/********************************************
 * Character Name Tag
 ********************************************/
.character-name-tag {
    display: inline-block;
    margin-bottom: 1rem;
    padding: 8px 16px;
    background: linear-gradient(135deg, rgba(0, 0, 0, 0.8) 0%, rgba(20, 20, 20, 0.6) 100%);
    border: none;
    font-weight: 700;
    font-size: 1.1rem;
    color: #fff;
    font-family: 'Orbitron', monospace;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    position: relative;
    overflow: hidden;
    animation: nameTagEntrance 0.6s cubic-bezier(0.25, 0.8, 0.25, 1);
    
    /* Arcane-style angular shape */
    clip-path: polygon(0 0, calc(100% - 8px) 0, 100% 8px, 100% 100%, 8px 100%, 0 calc(100% - 8px));
    
    /* Glowing border effect */
    box-shadow: 
        inset 0 0 0 1px rgba(200, 170, 110, 0.6),
        0 0 15px rgba(200, 170, 110, 0.3);
}

@@keyframes nameTagEntrance {
    from {
        transform: translateX(-30px);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

.character-name-tag::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg, 
        rgba(200, 170, 110, 0.1) 0%, 
        transparent 30%, 
        transparent 70%, 
        rgba(200, 170, 110, 0.1) 100%);
    pointer-events: none;
}

.name-tag-piltover {
    box-shadow: 
        inset 0 0 0 1px rgba(200, 170, 110, 0.8),
        0 0 20px rgba(200, 170, 110, 0.4);
    color: rgba(200, 170, 110, 1);
}

.name-tag-piltover::before {
    background: linear-gradient(90deg, 
        rgba(255, 215, 0, 0.15) 0%, 
        transparent 30%, 
        transparent 70%, 
        rgba(255, 215, 0, 0.15) 100%);
}

.name-tag-zaun {
    box-shadow: 
        inset 0 0 0 1px rgba(0, 212, 170, 0.8),
        0 0 20px rgba(0, 212, 170, 0.4);
    color: rgba(0, 212, 170, 1);
}

.name-tag-zaun::before {
    background: linear-gradient(90deg, 
        rgba(0, 255, 200, 0.15) 0%, 
        transparent 30%, 
        transparent 70%, 
        rgba(0, 255, 200, 0.15) 100%);
}

.character-name {
    /* No special styling */
}

.name-tag-decoration {
    /* Removed */
}

/********************************************
 * Dialogue Content
 ********************************************/
.dialogue-content {
    /* No special styling */
}

.dialogue-text-container {
    /* No special styling */
}

.dialogue-text {
    font-size: 1.3rem;
    line-height: 1.6;
    color: #f8f8f8;
    font-family: 'Rajdhani', sans-serif;
    font-weight: 400;
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.5);
    position: relative;
    z-index: 10;
}

/* Text Animation Classes */
.dialogue-text.typewriter {
    /* Typewriter effect handled by C# code */
}

.dialogue-text.fadein {
    animation: fadeInText 1s ease-in;
}

.dialogue-text.slideup {
    animation: slideUpText 0.8s ease-out;
}

.dialogue-text.instant {
    /* No animation */
}

@@keyframes fadeInText {
    from {
        opacity: 0;
        transform: translateY(10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@@keyframes slideUpText {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/********************************************
 * Typing Cursor - REMOVED (was annoying)
 ********************************************/

/********************************************
 * Loading Screen
 ********************************************/
.loading-screen {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100vh;
}

.loading-content {
    text-align: center;
    color: #fff;
}

.loading-content h2 {
    font-family: 'Arcane Nine', 'Cinzel', serif;
    font-size: 2rem;
    margin-top: 2rem;
    opacity: 0.8;
}

.loading-spinner {
    width: 60px;
    height: 60px;
    border: 4px solid rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    border-top-color: #c8aa6e;
    animation: spin 1s linear infinite;
    margin: 0 auto;
}

.spinner-piltover {
    border-top-color: #c8aa6e;
}

.spinner-zaun {
    border-top-color: #00d4aa;
}

@@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}

/********************************************
 * Responsive Design
 ********************************************/
@@media (max-width: 768px) {
    .dialogue-section {
        padding: 1rem;
    }
    
    .dialogue-box {
        padding: 0.75rem;
        min-height: 100px;
    }
    
    .dialogue-text {
        font-size: 1.1rem;
    }
    
    .character-name-tag {
        font-size: 0.9rem;
        padding: 3px 6px;
    }
    
    .characters-layer.dualcharacters {
        padding: 0 2%;
        padding-bottom: 35%;
    }
    
    .portrait-image {
        max-height: 60vh;
        max-width: 300px;
    }
    
    .control-btn {
        padding: 8px 14px;
        font-size: 0.9rem;
    }
    
    .dialogue-controls-external {
        top: -45px;
        gap: 8px;
        padding: 0 1rem;
    }
}

@@media (max-width: 480px) {
    .dialogue-text {
        font-size: 1rem;
    }
    
    .portrait-image {
        max-height: 50vh;
        max-width: 250px;
    }
    
    .dialogue-box {
        min-height: 80px;
        padding: 0.5rem;
    }
    
    .character-name-tag {
        font-size: 0.8rem;
    }
    
    .control-btn {
        padding: 6px 12px;
        font-size: 0.8rem;
    }
    
    .dialogue-controls-external {
        top: -40px;
        gap: 6px;
        padding: 0 1rem;
    }
}

/********************************************
 * Hardware Acceleration & Performance
 ********************************************/
.character-container,
.dialogue-box,
.control-btn {
    will-change: transform;
    transform: translateZ(0);
}

.portrait-image {
    backface-visibility: hidden;
    perspective: 1000px;
}

/* Smooth scrolling for long dialogue */
.dialogue-text {
    scroll-behavior: smooth;
}
</style>
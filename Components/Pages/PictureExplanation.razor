@page "/picture-explanation"
@page "/picture-explanation/{*parameters}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using Arcane_Coop.Hubs
@using Arcane_Coop.Models
@implements IAsyncDisposable
@inject NavigationManager Navigation

<PageTitle>Picture Explanation Challenge</PageTitle>

<div class="picture-explanation-container">
    <div class="header-section">
        @if (isFromStory)
        {
            <h2 class="game-title">üîç Enforcer Database Search</h2>
            <p class="game-subtitle">Identify the marked scientists from Project Safeguard files</p>
            <div class="story-context">
                <div class="story-badge @GetRoleThemeClass()">
                    <span class="badge-icon">@(playerRole == "zaun" ? "‚ö°" : "üîß")</span>
                    <span>@(playerRole == "zaun" ? "ZAUN OPERATIVE" : "PILTOVER AGENT")</span>
                </div>
            </div>
        }
        else
        {
            <h2 class="game-title">üë§ Character Identification Challenge</h2>
            <p class="game-subtitle">Describe and identify key personnel from memory</p>
        }
    </div>
    
    <div class="connection-status mb-3">
        <strong>Connection Status:</strong> 
        <span class="@(IsConnected ? "text-success" : "text-danger")">
            @(IsConnected ? "Connected" : "Disconnected")
        </span>
    </div>

    @if (!inGame)
    {
        <div class="instructions-panel">
            <div class="instruction-header">
                <h3>‚ö†Ô∏è How to Access the Enforcer Database</h3>
            </div>
            <div class="instruction-content">
                <div class="step-by-step">
                    <div class="instruction-step">
                        <div class="step-number">1</div>
                        <div class="step-content">
                            <h4>Access the Database</h4>
                            <p>Both players enter the <strong>same Room ID</strong> below to access the enforcer database terminal.</p>
                        </div>
                    </div>
                    <div class="instruction-step">
                        <div class="step-number">2</div>
                        <div class="step-content">
                            <h4>Split Responsibilities</h4>
                            <p><strong>Zaun Operative</strong> accesses the visual records. <strong>Piltover Agent</strong> handles the identification terminal.</p>
                        </div>
                    </div>
                    <div class="instruction-step">
                        <div class="step-number">3</div>
                        <div class="step-content">
                            <h4>Identify the Targets</h4>
                            <p><strong>Zaun</strong> describes the person's features from the file photo. <strong>Piltover</strong> identifies them from the database options. Find all 4 marked scientists!</p>
                        </div>
                    </div>
                </div>
                
                <div class="role-preview">
                    <div class="role-card zaunite-preview">
                        <h4>üïµÔ∏è Vi (Database Access)</h4>
                        <p>You have visual access to the corrupted files:</p>
                        <ul class="preview-clues">
                            <li><strong>üìÅ File Access:</strong> View photos from Marcus's hidden files</li>
                            <li><strong>üîç Detail Analysis:</strong> Describe distinguishing features</li>
                            <li><strong>‚ö†Ô∏è Time Pressure:</strong> Files auto-corrupt after viewing</li>
                        </ul>
                    </div>
                    <div class="role-card piltover-preview">
                        <h4>üìã Caitlyn (Street Knowledge)</h4>
                        <p>You know these faces from the underground:</p>
                        <ul class="preview-clues">
                            <li><strong>üë• Recognition:</strong> Match descriptions to known faces</li>
                            <li><strong>üéØ Quick ID:</strong> Select from database matches</li>
                            <li><strong>‚è∞ Urgency:</strong> These people are in danger</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (!inGame)
    {
        <div class="game-setup mb-4">
        <div class="row">
            <div class="col-md-6">
                <label for="roomInput" class="form-label">Room ID:</label>
                <input @bind="roomId" id="roomInput" class="form-control" placeholder="Enter room code" />
            </div>
            <div class="col-md-6">
                <label for="nameInput" class="form-label">Player Name:</label>
                <input @bind="playerName" id="nameInput" class="form-control" placeholder="Enter your name" />
            </div>
        </div>

        <div class="setup-buttons">
            <button class="arcane-btn arcane-btn-primary" @onclick="JoinRoom" disabled="@(!IsConnected || string.IsNullOrEmpty(roomId) || string.IsNullOrEmpty(playerName))">
                üö™ Join Room
            </button>
            <button class="arcane-btn arcane-btn-secondary" @onclick="LeaveRoom" disabled="@(!IsConnected || string.IsNullOrEmpty(roomId))">
                üö∂ Leave Room
            </button>
            <button class="arcane-btn arcane-btn-success" @onclick="JoinGame" disabled="@(!IsConnected || string.IsNullOrEmpty(roomId) || string.IsNullOrEmpty(playerName))">
                üéØ Start Challenge
            </button>
            @if (inGame)
            {
                <button class="arcane-btn arcane-btn-warning" @onclick="RestartGame">
                    üîÑ Restart Challenge
                </button>
            }
        </div>
        
        @if (inRoom && !inGame)
        {
            <div class="arcane-alert arcane-alert-info">
                <strong>üì° In Room:</strong> @roomId - Waiting for challenge to start...
            </div>
        }
        @if (inGame && playerView != null)
        {
            <div class="arcane-alert arcane-alert-success">
                <strong>üéÆ Playing as:</strong> @playerView.DisplayName (@playerView.Role)
            </div>
        }
    </div>

    @if (inRoom && !inGame)
    {
        <div class="players-section">
            <div class="players-header">
                <h4>üë• Challenge Team</h4>
            </div>
            <div class="players-list">
                @foreach (var player in connectedPlayers)
                {
                    <div class="player-card">
                        <div class="player-icon">üë§</div>
                        <div class="player-name">@player</div>
                    </div>
                }
                @if (connectedPlayers.Count < 2)
                {
                    <div class="player-card waiting">
                        <div class="player-icon">‚è≥</div>
                        <div class="player-name">Waiting for partner...</div>
                    </div>
                }
            </div>
        </div>
    }
    }

    @if (inGame && playerView != null && gameState != null)
    {
        <div class="game-interface @playerView.Role.ToLower()">
            
            
            <!-- Zaun (Describer) Interface -->
            @if (playerView.Role == "Zaunite")
            {
                <div class="zaunite-interface describer-interface">
                    <div class="archive-panel">
                        <div class="panel-header">
                            <h4>üìÅ Marcus's Hidden Files - Project Safeguard</h4>
                            <div class="panel-round-info">
                                <span class="level-counter">Round @gameState.CurrentRound/@gameState.TotalRounds</span>
                                <span class="status-badge @(gameState.IsCompleted ? "completed" : "active")">@gameState.GameStatus</span>
                            </div>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(playerView.CurrentImageUrl))
                        {
                            <div class="image-display-container">
                                <img src="@playerView.CurrentImageUrl" alt="Archive Image" class="main-image" />
                                <div class="image-overlay">
                                    <div class="image-info">
                                        <span class="image-label">TARGET FILE - RED MARKED</span>
                                    </div>
                                </div>
                            </div>
                        }
                        
                        @if (playerView.CanFinishDescribing)
                        {
                            <div class="voice-description-panel">
                                <div class="voice-instructions">
                                    <h5>‚ö†Ô∏è Describe this person's features quickly</h5>
                                    <p>This file is corrupting - describe their face, hair, clothing, and any distinguishing features. Caitlyn might recognize them from the underground. Press below when done.</p>
                                </div>
                                <button class="arcane-btn arcane-btn-warning" @onclick="FinishDescribing">
                                    üìÅ Lock File & Send to Caitlyn
                                </button>
                            </div>
                        }
                        else if (!playerView.ImageVisible && !playerView.RoundCompleted)
                        {
                            <div class="description-finished">
                                <div class="status-text">Image hidden - waiting for partner's selection...</div>
                                <div class="voice-reminder">
                                    <small>üí¨ Continue discussing over voice chat if needed</small>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
            
            <!-- Piltover (Guesser) Interface -->
            @if (playerView.Role == "Piltover")
            {
                <div class="piltover-interface guesser-interface">
                    <div class="intelligence-panel">
                        <div class="panel-header">
                            <h4>üìã Piltover Database Terminal - Facial Recognition</h4>
                            <div class="panel-round-info">
                                <span class="level-counter">Round @gameState.CurrentRound/@gameState.TotalRounds</span>
                                <span class="status-badge @(gameState.IsCompleted ? "completed" : "active")">@gameState.GameStatus</span>
                            </div>
                        </div>
                        
                        @if (!playerView.CanChoose && !playerView.RoundCompleted)
                        {
                            <div class="waiting-description">
                                <div class="loading-spinner">üëÇ</div>
                                <p>Vi is accessing the corrupted file...</p>
                                <small class="voice-reminder">‚ö†Ô∏è Listen for descriptions - these people are marked for elimination!</small>
                            </div>
                        }
                        
                        @if (playerView.CanChoose && playerView.ChoiceImages.Any())
                        {
                            <div class="choices-container">
                                <div class="choices-header">
                                    <strong>üéØ Identify the target from these database matches:</strong>
                                </div>
                                <div class="image-choices">
                                    @for (int i = 0; i < playerView.ChoiceImages.Count; i++)
                                    {
                                        var index = i;
                                        var imageUrl = playerView.ChoiceImages[i];
                                        var isSelected = playerView.SelectedChoice == index;
                                        
                                        <div class="choice-item @(isSelected ? "selected" : "")" @onclick="() => SelectChoice(index)">
                                            <img src="@imageUrl" alt="Choice @(index + 1)" class="choice-image" />
                                            <div class="choice-label">Option @(index + 1)</div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        else if (playerView.SelectedChoice.HasValue)
                        {
                            <div class="choice-submitted">
                                <div class="status-text">Choice submitted! Selected option @(playerView.SelectedChoice.Value + 1)</div>
                            </div>
                        }
                    </div>
                </div>
            }
            
            <!-- Round Result Display -->
            @if (playerView.RoundCompleted && !string.IsNullOrEmpty(playerView.RoundResult) && !gameState.IsCompleted)
            {
                <div class="round-result-panel @(playerView.RoundResult.Contains("Correct") ? "success" : "incorrect")">
                    <div class="result-header">
                        <h4>Target @gameState.CurrentRound Status</h4>
                    </div>
                    <div class="result-content">
                        <div class="result-message">@playerView.RoundResult</div>
                        
                        @if (!gameState.IsCompleted)
                        {
                            <button class="arcane-btn arcane-btn-primary" @onclick="NextRound">
                                ‚û°Ô∏è Next Round
                            </button>
                        }
                    </div>
                </div>
            }
            
            <!-- Game Completion -->
            @if (gameState.IsCompleted)
            {
                <div class="completion-panel">
                    <div class="complete-animation">üéâ</div>
                    <h3>Database Search Complete!</h3>
                    <div class="final-score">
                        <strong>Targets Identified: @gameState.Score/@(gameState.TotalRounds * 10)</strong>
                        <div class="score-percentage">
                            (@(Math.Round((double)gameState.Score / (gameState.TotalRounds * 10) * 100, 1))% Success Rate)
                        </div>
                    </div>
                    <div class="completion-actions">
                        @if (isFromStory)
                        {
                            <button class="arcane-btn arcane-btn-success" @onclick="ContinueStory">
                                ‚û°Ô∏è Continue Story
                            </button>
                        }
                        else
                        {
                            <button class="arcane-btn arcane-btn-success" @onclick="RestartGame">
                                üîÑ Play Again
                            </button>
                        }
                    </div>
                </div>
            }
        </div>
    }
    
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="status-overlay">
            <div class="status-message @statusClass">
                @statusMessage
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string? Parameters { get; set; }
    
    // Connection and SignalR
    private HubConnection? hubConnection;
    private bool IsConnected => hubConnection?.State == HubConnectionState.Connected;
    
    // Game state
    private string roomId = "";
    private string playerName = "";
    private bool inRoom = false;
    private bool inGame = false;
    private PictureExplanationPlayerView? playerView;
    private PictureExplanationGameState? gameState;
    
    // UI state
    private PictureRoundResult? lastRoundResult;
    
    // URL parameters
    private string playerRole = "";
    private string playerAvatar = "";
    private string squadName = "";
    private bool isFromStory = false;
    private string transitionSource = "";
    
    // UI feedback
    private string statusMessage = "";
    private string statusClass = "";
    
    // Player tracking
    private List<string> connectedPlayers = new List<string>();
    
    protected override async Task OnInitializedAsync()
    {
        // Parse URL parameters if provided
        ParseUrlParameters();
        
        // Initialize SignalR connection
        await InitializeConnection();
        
        // Auto-connect if parameters are provided
        if (!string.IsNullOrEmpty(roomId) && !string.IsNullOrEmpty(playerName))
        {
            await AutoConnect();
        }
    }

    private void ParseUrlParameters()
    {
        try
        {
            var uri = new Uri(Navigation.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            
            playerRole = query["role"] ?? "";
            playerAvatar = query["avatar"] ?? "";
            var name = query["name"];
            var squad = query["squad"];
            isFromStory = query["story"] == "true";
            transitionSource = query["transition"] ?? "";
            
            if (!string.IsNullOrEmpty(name))
                playerName = Uri.UnescapeDataString(name);
            
            if (!string.IsNullOrEmpty(squad))
            {
                squadName = Uri.UnescapeDataString(squad);
                // Create unique room ID by combining squad name with transition source
                if (!string.IsNullOrEmpty(transitionSource))
                {
                    roomId = $"{squadName}_{transitionSource}";
                }
                else
                {
                    roomId = squadName;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[PictureExplanation] Error parsing URL parameters: {ex.Message}");
        }
        
        Console.WriteLine($"[PictureExplanation] Parsed parameters - Role: {playerRole}, Name: {playerName}, Squad: {squadName}, RoomId: {roomId}, Story: {isFromStory}, Transition: {transitionSource}");
        
        if (!string.IsNullOrEmpty(transitionSource))
        {
            Console.WriteLine($"[PictureExplanation] Using unique room ID with transition: {roomId}");
        }
    }

    private async Task InitializeConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
            .Build();

        // Basic room event handlers
        hubConnection.On<string, string>("PlayerJoined", (name, connectionId) =>
        {
            if (!connectedPlayers.Contains(name))
            {
                connectedPlayers.Add(name);
            }
            if (connectionId != hubConnection.ConnectionId)
            {
                ShowStatus($"{name} joined the room", "info");
            }
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string>("PlayerLeft", (name, connectionId) =>
        {
            connectedPlayers.Remove(name);
            ShowStatus($"{name} left the room", "info");
            InvokeAsync(StateHasChanged);
        });

        // Room state handler
        hubConnection.On<List<string>>("RoomState", (playerNames) =>
        {
            connectedPlayers.Clear();
            connectedPlayers.AddRange(playerNames);
            InvokeAsync(StateHasChanged);
        });

        // Picture Explanation game event handlers
        hubConnection.On<string, PictureExplanationPlayerView>("PictureExplanationGameJoined", (role, view) =>
        {
            Console.WriteLine($"[PictureExplanation] Game joined successfully - Role: {role}, DisplayName: {view.DisplayName}");
            inGame = true;
            playerView = view;
            ShowStatus($"Joined as {view.DisplayName}", "success");
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<PictureExplanationGameState>("PictureExplanationGameStateUpdated", (newGameState) =>
        {
            gameState = newGameState;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<PictureExplanationPlayerView>("PictureExplanationPlayerViewUpdated", (newView) =>
        {
            playerView = newView;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<PictureRoundResult>("PictureExplanationRoundCompleted", (roundResult) =>
        {
            lastRoundResult = roundResult;
            ShowStatus(roundResult.ResultMessage, roundResult.IsCorrect ? "success" : "warning");
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, int>("PictureExplanationGameCompleted", (message, finalScore) =>
        {
            ShowStatus(message, "success");
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("PictureExplanationInvalidAction", (message) =>
        {
            Console.WriteLine($"[PictureExplanation] Invalid action: {message}");
            ShowStatus(message, "warning");
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On("PictureExplanationGameFull", () =>
        {
            Console.WriteLine("[PictureExplanation] Game full - unable to join");
            ShowStatus("Game is full - maximum 2 players", "warning");
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("RedirectToStoryScene3", async (url) =>
        {
            Console.WriteLine($"[PictureExplanation] Received redirect to Scene 3: {url}");
            ShowStatus("Continuing story - Loading Scene 3...", "info");
            await InvokeAsync(StateHasChanged);
            
            // Small delay to ensure both players navigate together
            await Task.Delay(500);
            Console.WriteLine($"[PictureExplanation] Now navigating to: {url}");
            Navigation.NavigateTo(url, forceLoad: true);
        });

        await hubConnection.StartAsync();
    }

    private async Task AutoConnect()
    {
        try
        {
            // Small delay to ensure connection is established
            await Task.Delay(500);
            
            if (IsConnected && !string.IsNullOrEmpty(roomId) && !string.IsNullOrEmpty(playerName))
            {
                await JoinRoom();
                await Task.Delay(200); // Brief delay between operations
                await JoinGame();
                
                if (isFromStory)
                {
                    ShowStatus("Continuing story campaign - Visual Intelligence Analysis phase initiated", "info");
                }
                else
                {
                    ShowStatus("Auto-connecting to your squad...", "info");
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Auto-connect failed: {ex.Message}");
            ShowStatus("Auto-connection failed, please join manually", "warning");
        }
    }

    private async Task JoinRoom()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(roomId) && !string.IsNullOrEmpty(playerName))
        {
            await hubConnection.SendAsync("JoinRoom", roomId, playerName);
            inRoom = true;
            if (!connectedPlayers.Contains(playerName))
            {
                connectedPlayers.Add(playerName);
            }
            ShowStatus($"Joined room: {roomId}", "info");
        }
    }

    private async Task LeaveRoom()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(roomId))
        {
            await hubConnection.SendAsync("LeaveRoom", roomId, playerName);
            inRoom = false;
            inGame = false;
            playerView = null;
            gameState = null;
            connectedPlayers.Clear();
            ShowStatus("Left room", "info");
        }
    }

    private async Task JoinGame()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(roomId) && !string.IsNullOrEmpty(playerName))
        {
            try
            {
                // Prefer sending requested role if coming from story
                if (!string.IsNullOrEmpty(playerRole))
                {
                    Console.WriteLine($"[PictureExplanation] Joining with role: {playerRole}, room: {roomId}, name: {playerName}");
                    await hubConnection.SendAsync("JoinPictureExplanationGameWithRole", roomId, playerName, playerRole);
                }
                else
                {
                    Console.WriteLine($"[PictureExplanation] Joining without role: room: {roomId}, name: {playerName}");
                    await hubConnection.SendAsync("JoinPictureExplanationGame", roomId, playerName);
                }

                // If coming from the story, immediately hide the lobby and show game UI while waiting for server view
                if (isFromStory)
                {
                    inGame = true;
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                ShowStatus($"Error joining game: {ex.Message}", "danger");
            }
        }
    }

    private async Task FinishDescribing()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(roomId))
        {
            try
            {
                await hubConnection.SendAsync("FinishDescribing", roomId);
            }
            catch (Exception ex)
            {
                ShowStatus($"Error finishing description: {ex.Message}", "danger");
            }
        }
    }

    private async Task SelectChoice(int choiceIndex)
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(roomId))
        {
            try
            {
                await hubConnection.SendAsync("SubmitPictureChoice", roomId, choiceIndex);
            }
            catch (Exception ex)
            {
                ShowStatus($"Error selecting choice: {ex.Message}", "danger");
            }
        }
    }

    private async Task NextRound()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(roomId))
        {
            try
            {
                await hubConnection.SendAsync("NextPictureRound", roomId);
            }
            catch (Exception ex)
            {
                ShowStatus($"Error advancing round: {ex.Message}", "danger");
            }
        }
    }

    private async Task RestartGame()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(roomId))
        {
            await hubConnection.SendAsync("RestartPictureExplanationGame", roomId);
            lastRoundResult = null;
            ShowStatus("Challenge restarted", "info");
        }
    }

    private async Task ContinueStory()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(roomId))
        {
            try
            {
                ShowStatus("Continuing story - preparing Scene 3...", "info");
                await hubConnection.SendAsync("ContinueStoryToScene3", roomId);
            }
            catch (Exception ex)
            {
                ShowStatus($"Error continuing story: {ex.Message}", "danger");
            }
        }
    }

    private void ShowStatus(string message, string type)
    {
        statusMessage = message;
        statusClass = type;
        
        // Auto-hide status after 3 seconds
        _ = Task.Delay(3000).ContinueWith(_ =>
        {
            statusMessage = "";
            statusClass = "";
            InvokeAsync(StateHasChanged);
        });
    }

    private string GetRoleThemeClass()
    {
        return playerRole == "zaun" ? "story-badge-zaun" : "story-badge-piltover";
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

<style>
.picture-explanation-container {
    min-height: 100vh;
    background: linear-gradient(135deg, #0a0e27 0%, #1a1a2e 50%, #16213e 100%);
    color: #ffffff;
    font-family: 'Orbitron', 'Rajdhani', sans-serif;
    padding: 20px;
    position: relative;
    overflow-x: hidden;
    overflow-y: auto;
}

.picture-explanation-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: repeating-linear-gradient(
        0deg,
        transparent,
        transparent 2px,
        rgba(255, 0, 0, 0.03) 2px,
        rgba(255, 0, 0, 0.03) 4px
    );
    pointer-events: none;
    animation: scan-lines 8s linear infinite;
}

@@keyframes scan-lines {
    0% { background-position: 0 0; }
    100% { background-position: 0 10px; }
}

/* Header styling */
.header-section {
    text-align: center;
    margin-bottom: 2rem;
    padding: 2rem 0;
}

.game-title {
    font-size: 2.5rem;
    font-weight: 700;
    background: linear-gradient(45deg, #c89b3c, #00c8c8, #c8aa6e);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    margin-bottom: 0.5rem;
}

.game-subtitle {
    font-size: 1.2rem;
    color: #c8aa6e;
    margin-bottom: 0;
}

/* Story Context Styling */
.story-context {
    margin-top: 1rem;
    display: flex;
    justify-content: center;
}

.story-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: linear-gradient(135deg, rgba(0, 0, 0, 0.6) 0%, rgba(20, 20, 20, 0.4) 100%);
    border-radius: 25px;
    font-family: 'Orbitron', monospace;
    font-weight: 600;
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
}

.story-badge-zaun {
    border: 2px solid #00d4aa;
    color: #00d4aa;
    box-shadow: 0 0 20px rgba(0, 212, 170, 0.3);
}

.story-badge-piltover {
    border: 2px solid #c8aa6e;
    color: #c8aa6e;
    box-shadow: 0 0 20px rgba(200, 170, 110, 0.3);
}

.connection-status {
    position: absolute;
    top: 12px;
    right: 12px;
    z-index: 20;
    padding: 6px 10px;
    background: rgba(26, 26, 46, 0.6);
    border-radius: 16px;
    border: 1px solid #c8aa6e;
    backdrop-filter: blur(6px);
    font-family: 'Orbitron', sans-serif;
    font-weight: 600;
    font-size: 0.75rem;
    max-width: calc(100% - 24px);
}

.text-success {
    color: #00ff88 !important;
    text-shadow: 0 0 10px rgba(0, 255, 136, 0.3);
}

.text-danger {
    color: #ff4444 !important;
    text-shadow: 0 0 10px rgba(255, 68, 68, 0.3);
}

/* Instructions panel */
.instructions-panel {
    background: rgba(26, 26, 46, 0.8);
    border: 2px solid #c8aa6e;
    border-radius: 12px;
    padding: 2rem;
    margin-bottom: 2rem;
}

.instruction-header {
    text-align: center;
    margin-bottom: 1.5rem;
}

.instruction-header h3 {
    color: #c8aa6e;
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
}

.step-by-step {
    margin-bottom: 2rem;
}

.instruction-step {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    margin-bottom: 1.5rem;
    text-align: left;
}

.step-number {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: linear-gradient(45deg, #c89b3c, #c8aa6e);
    color: #0a0e27;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 1.2rem;
    flex-shrink: 0;
}

.step-content h4 {
    color: #f0e6d2;
    margin-bottom: 0.5rem;
    font-size: 1.1rem;
}

.step-content p {
    color: #cdbe91;
    margin: 0;
    line-height: 1.5;
}

.role-preview {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;
    margin-top: 1.5rem;
}

.role-card {
    background: rgba(0, 0, 0, 0.3);
    border: 2px solid;
    border-radius: 8px;
    padding: 1.5rem;
    text-align: left;
}

.role-card.piltover-preview {
    border-color: #c89b3c;
    background: linear-gradient(135deg, rgba(200, 155, 60, 0.1), rgba(240, 230, 210, 0.05));
}

.role-card.zaunite-preview {
    border-color: #00c8c8;
    background: linear-gradient(135deg, rgba(0, 153, 153, 0.1), rgba(0, 200, 200, 0.05));
}

.role-card h4 {
    margin-bottom: 0.5rem;
    font-size: 1.2rem;
}

.role-card p {
    margin-bottom: 1rem;
    opacity: 0.9;
}

.preview-clues {
    list-style: none;
    padding: 0;
    margin: 0;
}

.preview-clues li {
    margin-bottom: 0.5rem;
    padding-left: 0;
    color: #f0e6d2;
    font-size: 0.9rem;
}

/* Game setup form */
.game-setup {
    background: rgba(26, 26, 46, 0.8);
    border: 2px solid #c8aa6e;
    border-radius: 12px;
    padding: 2rem;
    backdrop-filter: blur(10px);
}

.form-label {
    color: #c8aa6e;
    font-weight: 600;
    font-size: 0.9rem;
    margin-bottom: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.form-control {
    background: rgba(0, 0, 0, 0.3);
    border: 2px solid rgba(200, 170, 110, 0.3);
    border-radius: 8px;
    color: #f0e6d2;
    padding: 0.75rem 1rem;
    font-family: 'Orbitron', monospace;
    font-size: 0.9rem;
    transition: all 0.3s ease;
}

.form-control:focus {
    background: rgba(0, 0, 0, 0.5);
    border-color: #c8aa6e;
    box-shadow: 0 0 0 0.2rem rgba(200, 170, 110, 0.25);
    color: #f0e6d2;
    outline: none;
}

.form-control::placeholder {
    color: rgba(240, 230, 210, 0.5);
    font-style: italic;
}

.setup-buttons {
    text-align: center;
    margin-top: 1.5rem;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 0.5rem;
}

/* Players Section */
.players-section {
    background: rgba(26, 26, 46, 0.8);
    border: 2px solid #c8aa6e;
    border-radius: 12px;
    padding: 1.5rem;
    margin-top: 2rem;
    backdrop-filter: blur(10px);
}

.players-header {
    text-align: center;
    margin-bottom: 1rem;
    border-bottom: 1px solid rgba(200, 170, 110, 0.3);
    padding-bottom: 0.75rem;
}

.players-header h4 {
    color: #c8aa6e;
    font-family: 'Orbitron', sans-serif;
    font-size: 1.1rem;
    margin: 0;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.players-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

.player-card {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(200, 170, 110, 0.3);
    border-radius: 8px;
    padding: 0.75rem 1rem;
    transition: all 0.3s ease;
}

.player-card:not(.waiting) {
    border-color: #00ff88;
    background: rgba(0, 255, 136, 0.1);
}

.player-card.waiting {
    border-color: rgba(200, 170, 110, 0.5);
    background: rgba(200, 170, 110, 0.05);
    opacity: 0.7;
}

.player-icon {
    font-size: 1.2rem;
    width: 30px;
    text-align: center;
}

.player-card:not(.waiting) .player-icon {
    color: #00ff88;
}

.player-card.waiting .player-icon {
    color: #c8aa6e;
    animation: pulse-waiting 2s infinite;
}

.player-name {
    color: #f0e6d2;
    font-family: 'Orbitron', sans-serif;
    font-weight: 600;
    font-size: 0.9rem;
}

.player-card.waiting .player-name {
    color: rgba(240, 230, 210, 0.7);
    font-style: italic;
}

@@keyframes pulse-waiting {
    0%, 100% { opacity: 0.5; }
    50% { opacity: 1; }
}

/* Arcane-themed custom buttons */
.arcane-btn {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    font-family: 'Orbitron', sans-serif;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    margin: 0.25rem;
    display: inline-block;
}

.arcane-btn:before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s;
}

.arcane-btn:hover:not(:disabled):before {
    left: 100%;
}

.arcane-btn-primary {
    background: linear-gradient(45deg, #c89b3c, #c8aa6e);
    color: #0a0e27;
    border: 2px solid #c8aa6e;
    box-shadow: 0 4px 15px rgba(200, 155, 60, 0.3);
}

.arcane-btn-primary:hover:not(:disabled) {
    background: linear-gradient(45deg, #d4a749, #d4b57a);
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(200, 155, 60, 0.4);
}

.arcane-btn-secondary {
    background: rgba(255, 255, 255, 0.1);
    color: #f0e6d2;
    border: 2px solid rgba(240, 230, 210, 0.3);
    backdrop-filter: blur(5px);
}

.arcane-btn-secondary:hover:not(:disabled) {
    background: rgba(255, 255, 255, 0.2);
    border-color: rgba(240, 230, 210, 0.5);
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(240, 230, 210, 0.2);
}

.arcane-btn-success {
    background: linear-gradient(45deg, #00ff88, #00cc6a);
    color: #0a0e27;
    border: 2px solid #00ff88;
    box-shadow: 0 4px 15px rgba(0, 255, 136, 0.3);
}

.arcane-btn-success:hover:not(:disabled) {
    background: linear-gradient(45deg, #1aff94, #1ad676);
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 255, 136, 0.4);
}

.arcane-btn-warning {
    background: linear-gradient(45deg, #ff6b6b, #ff5252);
    color: #ffffff;
    border: 2px solid #ff6b6b;
    box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);
    animation: urgent-pulse 2s infinite;
}

@@keyframes urgent-pulse {
    0%, 100% { box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3); }
    50% { box-shadow: 0 6px 25px rgba(255, 107, 107, 0.6); }
}

.arcane-btn-warning:hover:not(:disabled) {
    background: linear-gradient(45deg, #ff7a7a, #ff6161);
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(255, 107, 107, 0.4);
}

.arcane-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none !important;
    box-shadow: none !important;
}

.arcane-btn:disabled:before {
    display: none;
}

/* Custom alert styles */
.arcane-alert {
    border: none;
    border-radius: 8px;
    padding: 1rem;
    font-family: 'Orbitron', sans-serif;
    font-weight: 500;
    backdrop-filter: blur(10px);
    margin-top: 1rem;
}

.arcane-alert-info {
    background: rgba(0, 153, 255, 0.15);
    color: #66b3ff;
    border: 1px solid rgba(0, 153, 255, 0.3);
}

.arcane-alert-success {
    background: rgba(0, 255, 136, 0.15);
    color: #66ff99;
    border: 1px solid rgba(0, 255, 136, 0.3);
}

/* Game Interface Styles */
.game-interface {
    margin-top: 2rem;
    padding: 1rem;
    background: rgba(26, 26, 46, 0.6);
    border: 1px solid #c8aa6e;
    border-radius: 8px;
}

.interface-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding: 1rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
}

.character-info {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.character-portrait {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid #c8aa6e;
}

.character-details h3 {
    margin: 0;
    font-size: 1.2rem;
    color: #f0e6d2;
}

.role-subtitle {
    margin: 0;
    color: #c8aa6e;
    font-size: 0.9rem;
    opacity: 0.8;
}

.mission-status {
    text-align: right;
}

.level-counter {
    font-size: 0.9rem;
    color: #c8aa6e;
    font-weight: 600;
    display: block;
}

.status-badge {
    display: inline-block;
    padding: 2px 6px;
    border-radius: 12px;
    font-size: 0.7rem;
    font-weight: bold;
    margin-top: 4px;
}

.status-badge.success {
    background: rgba(0, 255, 136, 0.2);
    color: #00ff88;
    border: 1px solid #00ff88;
}

.status-badge.active {
    background: rgba(200, 155, 60, 0.2);
    color: #c8aa6e;
    border: 1px solid #c8aa6e;
}

.status-badge.completed {
    background: rgba(0, 255, 136, 0.3);
    color: #00ff88;
    border: 1px solid #00ff88;
}

.score-display {
    color: #f0e6d2;
    font-weight: bold;
    margin-top: 0.5rem;
}

/* Round info panel */
.round-info-panel {
    display: none;
}

.round-info-panel h4 {
    color: #c8aa6e;
    font-size: 1.3rem;
    margin-bottom: 1rem;
}

.round-progress {
    margin-top: 1rem;
}

.progress-bar {
    width: 100%;
    height: 10px;
    background: rgba(0, 0, 0, 0.3);
    border-radius: 5px;
    overflow: hidden;
    border: 1px solid rgba(200, 170, 110, 0.3);
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #c89b3c, #c8aa6e);
    transition: width 0.3s ease;
    border-radius: 4px;
}

/* Interface base styles */
.piltover-interface {
    background: linear-gradient(135deg, rgba(200, 155, 60, 0.1), rgba(240, 230, 210, 0.05));
    border: 2px solid #c89b3c;
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    position: relative;
    overflow: hidden;
}

.piltover-interface::before {
    content: 'ENFORCER ACCESS GRANTED';
    position: absolute;
    top: 10px;
    right: 10px;
    color: rgba(200, 155, 60, 0.3);
    font-size: 0.7rem;
    font-weight: bold;
    letter-spacing: 2px;
    transform: rotate(3deg);
}

.archive-panel {
    background: rgba(200, 155, 60, 0.05);
    border-radius: 8px;
    padding: 1.5rem;
}

.panel-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.75rem;
    border-bottom: 1px solid rgba(200, 155, 60, 0.3);
    padding-bottom: 0.5rem;
}

.panel-round-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.panel-header h4 {
    color: #c89b3c;
    font-size: 1rem;
    margin: 0;
}

.image-display-container {
    position: relative;
    margin-bottom: 1.5rem;
    text-align: center;
}

.main-image {
    max-width: 100%;
    max-height: 400px;
    border-radius: 8px;
    border: 3px solid #c89b3c;
    box-shadow: 0 0 20px rgba(200, 155, 60, 0.3);
    filter: contrast(1.1) saturate(0.9);
    position: relative;
}

.main-image:hover {
    filter: contrast(1.2) saturate(1);
    box-shadow: 0 0 30px rgba(200, 155, 60, 0.5);
}

.image-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(transparent 60%, rgba(200, 155, 60, 0.8));
    border-radius: 8px;
    display: flex;
    align-items: flex-end;
    justify-content: center;
    padding: 1rem;
}

.image-info {
    background: rgba(0, 0, 0, 0.7);
    padding: 0.5rem 1rem;
    border-radius: 20px;
    border: 1px solid #c89b3c;
}

.image-label {
    color: #ff4444;
    font-weight: 800;
    font-size: 0.9rem;
    text-transform: uppercase;
    animation: pulse-danger 1.5s infinite;
    letter-spacing: 1px;
}

@@keyframes pulse-danger {
    0%, 100% { opacity: 0.8; text-shadow: 0 0 5px rgba(255, 68, 68, 0.5); }
    50% { opacity: 1; text-shadow: 0 0 15px rgba(255, 68, 68, 0.8); }
}

.voice-description-panel {
    margin-top: 1rem;
    background: rgba(200, 155, 60, 0.1);
    border: 1px solid rgba(200, 155, 60, 0.3);
    border-radius: 8px;
    padding: 1.5rem;
    text-align: center;
}

.voice-instructions {
    margin-bottom: 1.5rem;
}

.voice-instructions h5 {
    color: #c89b3c;
    margin-bottom: 0.75rem;
    font-size: 1.1rem;
}

.voice-instructions p {
    color: #f0e6d2;
    margin: 0;
    line-height: 1.5;
    font-size: 0.95rem;
}

.description-finished {
    background: rgba(0, 255, 136, 0.1);
    border: 1px solid rgba(0, 255, 136, 0.3);
    border-radius: 8px;
    padding: 1rem;
    margin-top: 1rem;
    text-align: center;
}

.voice-reminder {
    margin-top: 0.5rem;
}

.voice-reminder small {
    color: rgba(240, 230, 210, 0.7);
    font-style: italic;
}

.status-text {
    color: #66ff99;
    font-weight: 600;
    font-size: 0.9rem;
}

/* Zaunite Interface */
.zaunite-interface {
    background: linear-gradient(135deg, rgba(0, 153, 153, 0.1), rgba(0, 200, 200, 0.05));
    border: 2px solid #00c8c8;
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    position: relative;
    overflow: hidden;
}

.zaunite-interface::before {
    content: 'UNDERGROUND NETWORK';
    position: absolute;
    top: 10px;
    right: 10px;
    color: rgba(0, 200, 200, 0.3);
    font-size: 0.7rem;
    font-weight: bold;
    letter-spacing: 2px;
    transform: rotate(3deg);
}

/* Describer interface styles (for Zaun now) */
.zaunite-interface.describer-interface .archive-panel {
    background: rgba(0, 200, 200, 0.05);
}

.zaunite-interface.describer-interface .panel-header {
    border-bottom: 1px solid rgba(0, 200, 200, 0.3);
}

.zaunite-interface.describer-interface .main-image {
    border: 3px solid #00c8c8;
    box-shadow: 0 0 20px rgba(0, 200, 200, 0.3);
}

.zaunite-interface.describer-interface .main-image:hover {
    box-shadow: 0 0 30px rgba(0, 200, 200, 0.5);
}

.zaunite-interface.describer-interface .image-overlay {
    background: linear-gradient(transparent 60%, rgba(0, 200, 200, 0.8));
}

.zaunite-interface.describer-interface .image-info {
    border: 1px solid #00c8c8;
}

.zaunite-interface.describer-interface .voice-description-panel {
    background: rgba(0, 200, 200, 0.1);
    border: 1px solid rgba(0, 200, 200, 0.3);
}

.zaunite-interface.describer-interface .voice-instructions h5 {
    color: #00c8c8;
}

/* Guesser interface styles (for Piltover now) */
.piltover-interface.guesser-interface .intelligence-panel {
    background: rgba(200, 155, 60, 0.05);
}

.piltover-interface.guesser-interface .panel-header h4 {
    color: #c89b3c;
}

.piltover-interface.guesser-interface .waiting-description {
    color: #c89b3c;
}

.piltover-interface.guesser-interface .choices-header {
    color: #c89b3c;
}

.piltover-interface.guesser-interface .choice-item {
    border: 2px solid rgba(200, 155, 60, 0.3);
}

.piltover-interface.guesser-interface .choice-item:hover {
    border-color: #c89b3c;
    background: rgba(200, 155, 60, 0.1);
}

.piltover-interface.guesser-interface .choice-image {
    border: 1px solid rgba(200, 155, 60, 0.3);
}

.piltover-interface.guesser-interface .choice-item:hover .choice-image {
    border-color: #c89b3c;
}

.piltover-interface.guesser-interface .choice-label {
    color: #c89b3c;
}

.intelligence-panel {
    background: rgba(0, 200, 200, 0.05);
    border-radius: 8px;
    padding: 1.5rem;
}

.description-display {
    background: rgba(0, 200, 200, 0.1);
    border: 1px solid rgba(0, 200, 200, 0.3);
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1.5rem;
}

.intel-label {
    color: #00c8c8;
    font-weight: 600;
    font-size: 0.9rem;
    text-transform: uppercase;
    margin-bottom: 0.5rem;
}

.intel-text {
    color: #e0ffff;
    font-style: italic;
    line-height: 1.4;
    font-size: 1rem;
    background: rgba(0, 0, 0, 0.2);
    padding: 0.75rem;
    border-radius: 6px;
    border-left: 3px solid #00c8c8;
}

.waiting-description {
    text-align: center;
    padding: 2rem;
    color: #00c8c8;
}

.loading-spinner {
    font-size: 2rem;
    margin-bottom: 1rem;
    animation: pulse-waiting 2s infinite;
}

.choices-container {
    margin-top: 1rem;
}

.choices-header {
    color: #00c8c8;
    font-weight: 600;
    margin-bottom: 1rem;
    text-transform: uppercase;
    font-size: 0.9rem;
}

.image-choices {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 1.5rem;
    padding: 1rem;
}

.choice-item {
    background: rgba(0, 0, 0, 0.3);
    border: 2px solid rgba(0, 200, 200, 0.3);
    border-radius: 8px;
    padding: 0.75rem;
    cursor: pointer;
    transition: all 0.3s ease;
    text-align: center;
    display: flex;
    flex-direction: column;
    align-items: center;
}

.choice-item:hover {
    border-color: #00c8c8;
    background: rgba(0, 200, 200, 0.1);
    transform: scale(1.02);
}

.choice-item.selected {
    border-color: #00ff88;
    background: rgba(0, 255, 136, 0.2);
    box-shadow: 0 0 15px rgba(0, 255, 136, 0.3);
}

.choice-image {
    width: 100%;
    max-width: 200px;
    height: 250px;
    object-fit: contain;
    background: rgba(0, 0, 0, 0.5);
    border-radius: 6px;
    margin-bottom: 0.5rem;
    border: 1px solid rgba(0, 200, 200, 0.3);
    filter: brightness(0.9) contrast(1.1);
    transition: all 0.3s ease;
    padding: 4px;
}

.choice-item:hover .choice-image {
    filter: brightness(1) contrast(1.2);
    border-color: #00c8c8;
}

.choice-label {
    color: #00c8c8;
    font-weight: 600;
    font-size: 0.9rem;
    text-transform: uppercase;
}

.choice-item.selected .choice-label {
    color: #00ff88;
}

.choice-submitted {
    text-align: center;
    padding: 1rem;
    background: rgba(0, 255, 136, 0.1);
    border: 1px solid rgba(0, 255, 136, 0.3);
    border-radius: 8px;
    margin-top: 1rem;
}

/* Round Result Panel */
.round-result-panel {
    background: rgba(26, 26, 46, 0.8);
    border: 2px solid;
    border-radius: 12px;
    padding: 2rem;
    margin: 2rem 0;
    text-align: center;
}

.round-result-panel.success {
    border-color: #00ff88;
    background: linear-gradient(135deg, rgba(0, 255, 136, 0.2), rgba(0, 200, 200, 0.1));
}

.round-result-panel.incorrect {
    border-color: #ff6b6b;
    background: linear-gradient(135deg, rgba(255, 107, 107, 0.2), rgba(255, 82, 82, 0.1));
}

.result-header h4 {
    color: #c8aa6e;
    font-size: 1.3rem;
    margin-bottom: 1rem;
}

.result-content {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    align-items: center;
}

.result-message {
    font-size: 1.2rem;
    font-weight: 600;
    margin-bottom: 1rem;
}

.round-result-panel.success .result-message {
    color: #00ff88;
}

.round-result-panel.incorrect .result-message {
    color: #ff6b6b;
}

.result-details {
    background: rgba(0, 0, 0, 0.3);
    border-radius: 8px;
    padding: 1rem;
    width: 100%;
    max-width: 500px;
}

.points-earned {
    color: #c8aa6e;
    font-weight: 600;
    margin-bottom: 0.5rem;
}

.communication-note {
    color: #f0e6d2;
    font-style: italic;
    font-size: 0.9rem;
    opacity: 0.8;
}

/* Completion Panel */
.completion-panel {
    background: linear-gradient(135deg, rgba(0, 255, 136, 0.2), rgba(0, 200, 200, 0.1));
    border: 2px solid #00ff88;
    border-radius: 12px;
    padding: 2rem;
    text-align: center;
    margin: 2rem 0;
    animation: none;
}

@@keyframes victory-pulse {
    0%, 100% { transform: scale(1); box-shadow: 0 0 20px rgba(0, 255, 136, 0.3); }
    50% { transform: scale(1.02); box-shadow: 0 0 30px rgba(0, 255, 136, 0.5); }
}

.complete-animation {
    font-size: 4rem;
    margin-bottom: 1rem;
    animation: none;
}

/* celebration animation removed to prevent layout shift causing scrollbar */

.completion-panel h3 {
    color: #00ff88;
    font-size: 1.5rem;
    margin-bottom: 1rem;
}

.final-score {
    margin: 1.5rem 0;
}

.final-score strong {
    color: #f0e6d2;
    font-size: 1.3rem;
}

.score-percentage {
    color: #c8aa6e;
    font-size: 1rem;
    margin-top: 0.5rem;
}

.completion-actions {
    margin-top: 2rem;
}

/* Status Messages */
.status-overlay {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 1000;
}

.status-message {
    padding: 0.75rem 1.5rem;
    border-radius: 6px;
    font-weight: 600;
    font-size: 0.9rem;
}

.status-message.success {
    background: rgba(0, 255, 136, 0.2);
    border: 1px solid #00ff88;
    color: #00ff88;
}

.status-message.warning {
    background: rgba(255, 193, 7, 0.2);
    border: 1px solid #ffc107;
    color: #ffc107;
}

.status-message.info {
    background: rgba(0, 123, 255, 0.2);
    border: 1px solid #007bff;
    color: #007bff;
}

.status-message.danger {
    background: rgba(255, 68, 68, 0.2);
    border: 1px solid #ff4444;
    color: #ff4444;
}

/* Responsive Design */
@@media (max-width: 1200px) {
    .image-choices {
        grid-template-columns: repeat(2, 1fr);
        gap: 1.2rem;
    }
    
    .choice-image {
        height: 220px;
        max-width: 180px;
    }
}

@@media (max-width: 768px) {
    .role-preview {
        grid-template-columns: 1fr;
    }
    
    .interface-header {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
    }
    
    .setup-buttons {
        flex-direction: column;
        align-items: center;
    }
    
    .arcane-btn {
        width: 100%;
        max-width: 250px;
    }
    
    .players-list {
        gap: 0.5rem;
    }
    
    .player-card {
        padding: 0.5rem 0.75rem;
    }
    
    .image-choices {
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
    }
    
    .choice-image {
        height: 200px;
        max-width: 150px;
    }
    
    .main-image {
        max-height: 250px;
    }
    
    .result-content {
        gap: 0.75rem;
    }
}

@@media (max-width: 480px) {
    .picture-explanation-container {
        padding: 10px;
    }
    
    .game-title {
        font-size: 2rem;
    }
    
    .image-choices {
        grid-template-columns: repeat(2, 1fr);
        gap: 0.5rem;
    }
    
    .choice-image {
        height: 180px;
        max-width: 120px;
    }
}
</style>
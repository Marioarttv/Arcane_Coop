@page "/lobby"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using Arcane_Coop.Models
@implements IAsyncDisposable
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Arcane Escape Room - Lobby</PageTitle>

<div class="lobby-container">
    <div class="lobby-header">
        <h1>ARCANE ESCAPE ROOM LOBBY</h1>
        <p>Create or join a cooperative escape room experience</p>
    </div>

    <div class="lobby-content">
        <!-- Create Room Section -->
        <div class="action-panel">
            <h2>Create New Room</h2>
            <div class="form-group">
                <label for="roomName">Room Name:</label>
                <input @bind="newRoomName" id="roomName" class="form-control" 
                       placeholder="Enter room name..." maxlength="50" />
            </div>
            <div class="form-group">
                <label for="creatorName">Your Name:</label>
                <input @bind="creatorName" id="creatorName" class="form-control" 
                       placeholder="Enter your name..." maxlength="20" />
            </div>
            
            <div class="city-selection">
                <h3>Choose Your City:</h3>
                <div class="city-options">
                    <button class="city-btn zaun-btn @(selectedCity == "Zaun" ? "selected" : "")" 
                            @onclick="() => SelectCity(City.Zaun)">
                        <h4>ZAUN</h4>
                        <p>The Undercity</p>
                    </button>
                    <button class="city-btn piltover-btn @(selectedCity == "Piltover" ? "selected" : "")" 
                            @onclick="() => SelectCity(City.Piltover)">
                        <h4>PILTOVER</h4>
                        <p>The City of Progress</p>
                    </button>
                </div>
            </div>

            <button class="create-btn" @onclick="CreateRoom" 
                    disabled="@(!CanCreateRoom)" 
                    title="@(CanCreateRoom ? "" : "Please fill in all fields")">
                @if (isCreatingRoom)
                {
                    <span>Creating Room...</span>
                }
                else
                {
                    <span>Create Room</span>
                }
            </button>
        </div>

        <!-- Join Room Section -->
        <div class="action-panel">
            <h2>Join Existing Room</h2>
            <div class="form-group">
                <label for="joinRoomId">Room Code:</label>
                <input @bind="joinRoomId" id="joinRoomId" class="form-control" 
                       placeholder="Enter 6-digit room code..." maxlength="6" 
                       style="text-transform: uppercase;" />
            </div>
            <div class="form-group">
                <label for="joinPlayerName">Your Name:</label>
                <input @bind="joinPlayerName" id="joinPlayerName" class="form-control" 
                       placeholder="Enter your name..." maxlength="20" />
            </div>
            
            <div class="join-info">
                <p>You will be automatically assigned to the opposite city from your partner!</p>
            </div>

            <button class="join-btn" @onclick="JoinExistingRoom" 
                    disabled="@(string.IsNullOrEmpty(joinRoomId) || joinRoomId.Length != 6 || string.IsNullOrEmpty(joinPlayerName) || isJoiningRoom)"
                    title="@(CanJoinRoom ? "" : "Please fill in all fields")">
                @if (isJoiningRoom)
                {
                    <span>Joining Room...</span>
                }
                else
                {
                    <span>Join Room</span>
                }
            </button>
        </div>
    </div>

    @if (messages.Any())
    {
        <div class="messages-panel">
            @foreach (var message in messages)
            {
                <div class="message @(message.IsError ? "error" : "info")">
                    @message.Text
                </div>
            }
        </div>
    }
</div>

@code {
    private HubConnection? hubConnection;
    private string newRoomName = "";
    private string creatorName = "";
    private string selectedCity = "";
    private string joinRoomId = "";
    private string joinPlayerName = "";
    private bool isCreatingRoom = false;
    private bool isJoiningRoom = false;
    private List<MessageItem> messages = new();

    private bool CanCreateRoom => 
        !string.IsNullOrEmpty(newRoomName) && 
        !string.IsNullOrEmpty(creatorName) && 
        !string.IsNullOrEmpty(selectedCity) &&
        !isCreatingRoom;

    private bool CanJoinRoom => 
        !string.IsNullOrEmpty(joinRoomId) && 
        joinRoomId.Length == 6 && 
        !string.IsNullOrEmpty(joinPlayerName) &&
        !isJoiningRoom;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
            .Build();

        // Set up event handlers
        hubConnection.On<Arcane_Coop.Models.GameRoom, List<int>>("JoinedRoom", async (room, puzzles) =>
        {
            string playerNameToStore = "";
            if (isCreatingRoom)
            {
                AddMessage($"Room created successfully! Room Code: {room.RoomId}", false);
                playerNameToStore = creatorName;
            }
            else if (isJoiningRoom)
            {
                AddMessage($"Successfully joined room: {room.RoomName}", false);
                playerNameToStore = joinPlayerName;
            }
            
            // Store player name in session storage for GameRoom.razor to use
            if (!string.IsNullOrEmpty(playerNameToStore))
            {
                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "playerName", playerNameToStore);
            }
            
            await Task.Delay(500); // Brief delay to show the success message
            Navigation.NavigateTo($"/room/{room.RoomId}");
        });

        hubConnection.On<string>("RoomCreationFailed", async (errorMessage) =>
        {
            AddMessage($"Failed to create room: {errorMessage}", true);
            isCreatingRoom = false;
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("JoinRoomFailed", async (errorMessage) =>
        {
            AddMessage($"Failed to join room: {errorMessage}", true);
            isJoiningRoom = false;
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("Error", async (errorMessage) =>
        {
            AddMessage($"Error: {errorMessage}", true);
            isCreatingRoom = false;
            isJoiningRoom = false;
            await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private void SelectCity(City city)
    {
        selectedCity = city.ToString();
    }

    private async Task CreateRoom()
    {
        if (!CanCreateRoom || hubConnection == null) return;

        isCreatingRoom = true;
        AddMessage("Creating room...", false);
        
        try
        {
            await hubConnection.SendAsync("CreateRoom", newRoomName, creatorName, selectedCity);
        }
        catch (Exception ex)
        {
            AddMessage($"Error creating room: {ex.Message}", true);
            isCreatingRoom = false;
        }
        
        StateHasChanged();
    }

    private async Task JoinExistingRoom()
    {
        if (!CanJoinRoom || hubConnection == null) return;

        isJoiningRoom = true;
        AddMessage("Joining room...", false);
        
        try
        {
            await hubConnection.SendAsync("JoinRoom", joinRoomId.ToUpper(), joinPlayerName);
        }
        catch (Exception ex)
        {
            AddMessage($"Error joining room: {ex.Message}", true);
            isJoiningRoom = false;
        }
        
        StateHasChanged();
    }

    private void AddMessage(string text, bool isError)
    {
        messages.Add(new MessageItem { Text = $"{DateTime.Now:HH:mm:ss} - {text}", IsError = isError });
        
        // Keep only the last 5 messages
        if (messages.Count > 5)
        {
            messages.RemoveAt(0);
        }
        
        InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public enum City
    {
        Zaun,
        Piltover
    }

    private class MessageItem
    {
        public string Text { get; set; } = "";
        public bool IsError { get; set; }
    }
}
@page "/code-cracker"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using Arcane_Coop.Hubs
@implements IAsyncDisposable
@inject NavigationManager Navigation

<PageTitle>Code Cracker: Lexical Puzzle</PageTitle>

<div class="container">
    <div class="header-section">
        <h2 class="game-title">üîê Code Cracker: Lexical Puzzle</h2>
        <p class="game-subtitle">Caitlyn vs Vi - Decode the Corrupted Archives</p>
    </div>
    
    <div class="connection-status mb-3">
        <strong>Connection Status:</strong> 
        <span class="@(IsConnected ? "text-success" : "text-danger")">
            @(IsConnected ? "Connected" : "Disconnected")
        </span>
    </div>

    <div class="game-setup mb-4">
        <div class="row">
            <div class="col-md-6">
                <label for="roomInput" class="form-label">Room ID:</label>
                <input @bind="roomId" id="roomInput" class="form-control" placeholder="Enter room code" />
            </div>
            <div class="col-md-6">
                <label for="nameInput" class="form-label">Player Name:</label>
                <input @bind="playerName" id="nameInput" class="form-control" placeholder="Enter your name" />
            </div>
        </div>

        <div class="setup-buttons mt-3">
            <button class="btn btn-primary" @onclick="JoinRoom" disabled="@(!IsConnected || string.IsNullOrEmpty(roomId) || string.IsNullOrEmpty(playerName))">
                Join Room
            </button>
            <button class="btn btn-secondary ms-2" @onclick="LeaveRoom" disabled="@(!IsConnected || string.IsNullOrEmpty(roomId))">
                Leave Room
            </button>
            <button class="btn btn-success ms-2" @onclick="JoinGame" disabled="@(!IsConnected || string.IsNullOrEmpty(roomId) || string.IsNullOrEmpty(playerName))">
                Join Game
            </button>
        </div>
    </div>

    @if (inGame && playerView != null)
    {
        <div class="game-section">
            <div class="game-header">
                <div class="row">
                    <div class="col-md-8">
                        <h4 class="player-role @GetRoleClass()">
                            @(playerView?.DisplayName ?? "Unknown Player")
                        </h4>
                        <p class="role-instruction">@(playerView?.Instruction ?? "")</p>
                    </div>
                    <div class="col-md-4">
                        <div class="game-progress">
                            <strong>Progress:</strong> @((gameState?.CurrentWordIndex ?? 0) + 1) / @(gameState?.TotalWords ?? 0)<br/>
                            <strong>Score:</strong> @gameState?.Score<br/>
                            <strong>Hints Used:</strong> @gameState?.HintsUsed / 3
                        </div>
                    </div>
                </div>
            </div>

            <div class="puzzle-area">
                @if (playerView?.Role == "Piltover")
                {
                    <div class="piltover-section">
                        <div class="distorted-word">
                            <h3>Corrupted Archive Data:</h3>
                            <div class="word-display">@(playerView?.DistortedWord ?? "")</div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="zaunite-section">
                        <h3>Intelligence Gathered:</h3>
                        <div class="clue-cards">
                            <div class="clue-card">
                                <strong>Definition:</strong> @(playerView?.Definition ?? "")
                            </div>
                            <div class="clue-card">
                                <strong>German:</strong> @(playerView?.GermanTranslation ?? "")
                            </div>
                            <div class="clue-card">
                                <strong>Synonym:</strong> @(playerView?.Synonym ?? "")
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div class="game-actions">
                <div class="guess-section">
                    <div class="input-group">
                        <input @bind="currentGuess" @onkeypress="@(async (e) => { if (e.Key == "Enter") await SubmitGuess(); })" 
                               class="form-control" placeholder="Enter your guess..." />
                        <button class="btn btn-primary" @onclick="SubmitGuess" disabled="@(!IsConnected || string.IsNullOrEmpty(currentGuess))">
                            Submit Guess
                        </button>
                    </div>
                </div>

                <div class="game-controls mt-3">
                    <button class="btn btn-info" @onclick="RequestHint" disabled="@(!IsConnected || gameState?.HintsUsed >= 3)">
                        Request Hint (@(3 - (gameState?.HintsUsed ?? 0)) left)
                    </button>
                    <button class="btn btn-warning ms-2" @onclick="RestartGame" disabled="@(!IsConnected)">
                        Restart Game
                    </button>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(gameStatus))
            {
                <div class="alert @GetStatusClass() mt-3">@gameStatus</div>
            }

            @if (!string.IsNullOrEmpty(latestHint))
            {
                <div class="alert alert-info mt-2">
                    <strong>Hint:</strong> @latestHint
                </div>
            }

            @if (playerView?.AttemptHistory?.Any() == true)
            {
                <div class="attempt-history mt-3">
                    <h5>Recent Attempts:</h5>
                    <ul class="list-group">
                        @foreach (var attempt in playerView.AttemptHistory)
                        {
                            <li class="list-group-item">@attempt</li>
                        }
                    </ul>
                </div>
            }

            @if (gameState?.PlayersNeeded > 0)
            {
                <div class="alert alert-warning mt-3">
                    Waiting for @gameState.PlayersNeeded more player(s) to join...
                </div>
            }
        </div>
    }

    <div class="chat-section mt-4">
        <h5>Team Communication</h5>
        <div class="input-group mb-3">
            <input @bind="messageInput" @onkeypress="@(async (e) => { if (e.Key == "Enter") await SendMessage(); })" 
                   class="form-control" placeholder="Coordinate with your partner..." />
            <button class="btn btn-success" @onclick="SendMessage" disabled="@(!IsConnected || string.IsNullOrEmpty(messageInput))">
                Send
            </button>
        </div>

        <div class="messages-container">
            @foreach (var message in messages)
            {
                <div class="message">@message</div>
            }
        </div>
    </div>
</div>

<style>
    @@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Cinzel:wght@400;600&family=Rajdhani:wght@300;400;500;600;700&display=swap');

    /* Load Arcane Nine font */
    @@font-face {
        font-family: 'Arcane Nine';
        src: url('/fonts/Arcane Nine.otf') format('opentype');
        font-weight: normal;
        font-style: normal;
        font-display: swap;
    }

    :root {
        --zaun-primary: #0f3427;
        --zaun-secondary: #1e5f47;
        --zaun-accent: #00d4aa;
        --zaun-glow: #00ffc8;
        --zaun-dark: #0a1e16;
        --shimmer-pink: #ff007f;
        --piltover-primary: #2c1810;
        --piltover-secondary: #5c3317;
        --piltover-accent: #c8aa6e;
        --piltover-glow: #ffd700;
        --piltover-light: #f5e6a3;
        --hextech-blue: #0596aa;
        --arcane-blue: #0596aa;
        --neutral-dark: #000a0f;
        --neutral-light: #f0f8ff;
    }

    .container {
        position: relative;
        min-height: 100vh;
        font-family: 'Rajdhani', sans-serif;
        color: var(--neutral-light);
        background: linear-gradient(135deg, var(--zaun-dark) 0%, var(--neutral-dark) 50%, var(--piltover-primary) 100%);
        background-attachment: fixed;
    }

    .container::before {
        content: '';
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: 
            radial-gradient(circle at 20% 80%, rgba(0, 212, 170, 0.1) 0%, transparent 50%),
            radial-gradient(circle at 80% 20%, rgba(200, 170, 110, 0.1) 0%, transparent 50%),
            radial-gradient(circle at 50% 50%, rgba(5, 150, 170, 0.05) 0%, transparent 60%);
        animation: atmosphereFlow 12s ease-in-out infinite alternate;
        pointer-events: none;
        z-index: -1;
    }

    @@keyframes atmosphereFlow {
        0% { opacity: 0.6; transform: scale(1) rotate(0deg); }
        50% { opacity: 1; transform: scale(1.02) rotate(1deg); }
        100% { opacity: 0.8; transform: scale(1.01) rotate(-1deg); }
    }

    .header-section {
        text-align: center;
        padding: 2rem 0;
        position: relative;
        z-index: 10;
    }

    .game-title {
        font-family: 'Arcane Nine', fantasy;
        font-size: 3.5rem;
        background: linear-gradient(45deg, var(--piltover-accent), var(--zaun-accent), var(--hextech-blue));
        -webkit-background-clip: text;
        background-clip: text;
        -webkit-text-fill-color: transparent;
        text-shadow: 0 0 30px rgba(200, 170, 110, 0.5), 0 0 60px rgba(0, 212, 170, 0.3);
        margin-bottom: 0.5rem;
        animation: titleGlow 4s ease-in-out infinite alternate;
    }

    @@keyframes titleGlow {
        0% { filter: brightness(1) drop-shadow(0 0 20px rgba(200, 170, 110, 0.4)); }
        100% { filter: brightness(1.2) drop-shadow(0 0 40px rgba(0, 212, 170, 0.6)); }
    }

    .game-subtitle {
        font-family: 'Cinzel', serif;
        font-size: 1.2rem;
        color: var(--neutral-light);
        opacity: 0.9;
        margin-bottom: 2rem;
        text-shadow: 0 2px 4px rgba(0,0,0,0.5);
    }

    .connection-status {
        background: rgba(0,0,0,0.3);
        border: 1px solid rgba(200, 170, 110, 0.3);
        border-radius: 10px;
        padding: 1rem;
        margin-bottom: 2rem;
        backdrop-filter: blur(10px);
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    }

    .game-setup {
        background: rgba(0,0,0,0.4);
        border: 1px solid rgba(200, 170, 110, 0.3);
        border-radius: 15px;
        padding: 2rem;
        margin-bottom: 2rem;
        backdrop-filter: blur(10px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.3);
    }

    .form-label {
        color: var(--piltover-accent);
        font-weight: 600;
        margin-bottom: 0.5rem;
        text-shadow: 0 1px 2px rgba(0,0,0,0.5);
    }

    .form-control {
        background: rgba(0,0,0,0.5);
        border: 1px solid rgba(200, 170, 110, 0.4);
        border-radius: 8px;
        color: var(--neutral-light);
        padding: 0.75rem;
        font-family: 'Rajdhani', sans-serif;
        font-size: 1.1rem;
        transition: all 0.3s ease;
    }

    .form-control:focus {
        background: rgba(0,0,0,0.7);
        border-color: var(--zaun-accent);
        box-shadow: 0 0 0 0.2rem rgba(0, 212, 170, 0.25), 0 0 20px rgba(0, 212, 170, 0.3);
        color: var(--neutral-light);
    }

    .btn {
        font-family: 'Rajdhani', sans-serif;
        font-weight: 600;
        font-size: 1.1rem;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        transition: all 0.3s ease;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        border: none;
        position: relative;
        overflow: hidden;
    }

    .btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: left 0.5s;
    }

    .btn:hover::before {
        left: 100%;
    }

    .btn-primary {
        background: linear-gradient(45deg, var(--hextech-blue), var(--zaun-accent));
        color: white;
        box-shadow: 0 4px 15px rgba(5, 150, 170, 0.4);
    }

    .btn-primary:hover {
        background: linear-gradient(45deg, var(--zaun-accent), var(--hextech-blue));
        box-shadow: 0 6px 20px rgba(0, 212, 170, 0.6);
        transform: translateY(-2px);
    }

    .btn-secondary {
        background: linear-gradient(45deg, var(--piltover-secondary), var(--piltover-accent));
        color: white;
        box-shadow: 0 4px 15px rgba(200, 170, 110, 0.4);
    }

    .btn-secondary:hover {
        background: linear-gradient(45deg, var(--piltover-accent), var(--piltover-secondary));
        box-shadow: 0 6px 20px rgba(200, 170, 110, 0.6);
        transform: translateY(-2px);
    }

    .btn-success {
        background: linear-gradient(45deg, var(--zaun-secondary), var(--zaun-accent));
        color: white;
        box-shadow: 0 4px 15px rgba(0, 212, 170, 0.4);
    }

    .btn-success:hover {
        background: linear-gradient(45deg, var(--zaun-accent), var(--zaun-glow));
        box-shadow: 0 6px 20px rgba(0, 255, 200, 0.6);
        transform: translateY(-2px);
    }

    .game-section {
        background: rgba(0,0,0,0.6);
        border: 2px solid;
        border-image: linear-gradient(45deg, var(--piltover-accent), var(--zaun-accent), var(--hextech-blue)) 1;
        border-radius: 20px;
        padding: 2rem;
        margin-bottom: 2rem;
        backdrop-filter: blur(15px);
        box-shadow: 
            0 8px 32px rgba(0,0,0,0.4),
            inset 0 1px 0 rgba(255,255,255,0.1);
        position: relative;
        overflow: hidden;
    }

    .game-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(45deg, rgba(200, 170, 110, 0.05), rgba(0, 212, 170, 0.05));
        animation: sectionGlow 8s ease-in-out infinite alternate;
        pointer-events: none;
    }

    @@keyframes sectionGlow {
        0% { opacity: 0.3; transform: scale(1); }
        100% { opacity: 0.6; transform: scale(1.01); }
    }

    .player-role {
        font-family: 'Orbitron', monospace;
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        text-transform: uppercase;
        letter-spacing: 2px;
        position: relative;
        z-index: 2;
    }

    .player-role.piltover {
        background: linear-gradient(45deg, var(--piltover-accent), var(--piltover-glow));
        -webkit-background-clip: text;
        background-clip: text;
        -webkit-text-fill-color: transparent;
        text-shadow: 0 0 20px rgba(200, 170, 110, 0.5);
        filter: drop-shadow(0 2px 4px rgba(200, 170, 110, 0.3));
    }

    .player-role.zaunite {
        background: linear-gradient(45deg, var(--zaun-accent), var(--zaun-glow));
        -webkit-background-clip: text;
        background-clip: text;
        -webkit-text-fill-color: transparent;
        text-shadow: 0 0 20px rgba(0, 212, 170, 0.5);
        filter: drop-shadow(0 2px 4px rgba(0, 212, 170, 0.3));
    }

    .role-instruction {
        color: var(--neutral-light);
        font-style: italic;
        margin-bottom: 1.5rem;
        opacity: 0.9;
        font-size: 1.1rem;
        position: relative;
        z-index: 2;
    }

    .game-progress {
        background: rgba(0,0,0,0.5);
        border: 1px solid rgba(200, 170, 110, 0.3);
        padding: 1.5rem;
        border-radius: 12px;
        text-align: right;
        backdrop-filter: blur(10px);
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        font-family: 'Orbitron', monospace;
        position: relative;
        z-index: 2;
    }

    .puzzle-area {
        margin: 2rem 0;
        padding: 2rem;
        border-radius: 15px;
        position: relative;
        overflow: hidden;
        box-shadow: 0 8px 25px rgba(0,0,0,0.3);
    }

    .piltover-section {
        background: linear-gradient(135deg, var(--piltover-primary) 0%, var(--piltover-secondary) 50%, var(--piltover-accent) 100%);
        color: var(--neutral-light);
        text-align: center;
        position: relative;
    }

    .piltover-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: radial-gradient(circle at 30% 70%, rgba(255, 215, 0, 0.1) 0%, transparent 70%);
        animation: piltoverPulse 6s ease-in-out infinite alternate;
        pointer-events: none;
    }

    @@keyframes piltoverPulse {
        0% { opacity: 0.5; transform: scale(1); }
        100% { opacity: 0.8; transform: scale(1.02); }
    }

    .zaunite-section {
        background: linear-gradient(135deg, var(--zaun-dark) 0%, var(--zaun-primary) 50%, var(--zaun-secondary) 100%);
        color: var(--neutral-light);
        position: relative;
    }

    .zaunite-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: radial-gradient(circle at 70% 30%, rgba(0, 255, 200, 0.1) 0%, transparent 70%);
        animation: zaunitePulse 8s ease-in-out infinite alternate;
        pointer-events: none;
    }

    @@keyframes zaunitePulse {
        0% { opacity: 0.4; transform: scale(1) rotate(0deg); }
        100% { opacity: 0.7; transform: scale(1.01) rotate(1deg); }
    }

    .word-display {
        font-family: 'Orbitron', monospace;
        font-size: 4rem;
        font-weight: 900;
        letter-spacing: 0.3em;
        margin: 2rem 0;
        padding: 2rem;
        background: rgba(0,0,0,0.4);
        border: 2px solid rgba(255,255,255,0.3);
        border-radius: 12px;
        text-transform: uppercase;
        text-shadow: 0 0 20px rgba(255,255,255,0.5);
        backdrop-filter: blur(10px);
        position: relative;
        z-index: 2;
    }

    .clue-cards {
        display: grid;
        gap: 1.5rem;
        position: relative;
        z-index: 2;
    }

    .clue-card {
        background: rgba(0,0,0,0.4);
        border-left: 4px solid var(--zaun-accent);
        padding: 1.5rem;
        border-radius: 10px;
        backdrop-filter: blur(10px);
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .clue-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 4px;
        height: 100%;
        background: linear-gradient(to bottom, var(--zaun-accent), var(--zaun-glow));
        animation: clueGlow 3s ease-in-out infinite alternate;
    }

    @@keyframes clueGlow {
        0% { box-shadow: 0 0 5px var(--zaun-accent); }
        100% { box-shadow: 0 0 15px var(--zaun-glow); }
    }

    .clue-card:hover {
        transform: translateX(5px);
        box-shadow: 0 6px 20px rgba(0, 212, 170, 0.3);
    }

    .game-actions {
        text-align: center;
        margin: 2rem 0;
        position: relative;
        z-index: 2;
    }

    .guess-section .input-group {
        max-width: 600px;
        margin: 0 auto 2rem;
    }

    .attempt-history {
        background: rgba(0,0,0,0.4);
        border: 1px solid rgba(200, 170, 110, 0.3);
        padding: 1.5rem;
        border-radius: 12px;
        max-height: 250px;
        overflow-y: auto;
        backdrop-filter: blur(10px);
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    }

    .list-group-item {
        background: rgba(0,0,0,0.3);
        border: 1px solid rgba(200, 170, 110, 0.2);
        color: var(--neutral-light);
        margin-bottom: 0.5rem;
        border-radius: 6px;
        padding: 0.75rem;
    }

    .chat-section {
        background: rgba(0,0,0,0.4);
        border-top: 2px solid rgba(200, 170, 110, 0.3);
        padding: 2rem;
        border-radius: 15px;
        backdrop-filter: blur(10px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.3);
    }

    .chat-section h5 {
        color: var(--piltover-accent);
        font-family: 'Orbitron', monospace;
        font-weight: 600;
        margin-bottom: 1rem;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .messages-container {
        height: 300px;
        overflow-y: auto;
        background: rgba(0,0,0,0.5);
        border: 1px solid rgba(200, 170, 110, 0.3);
        padding: 1rem;
        border-radius: 10px;
        backdrop-filter: blur(10px);
        box-shadow: inset 0 2px 10px rgba(0,0,0,0.3);
    }

    .message {
        color: var(--neutral-light);
        padding: 0.5rem 0;
        border-bottom: 1px solid rgba(200, 170, 110, 0.1);
        font-family: 'Rajdhani', sans-serif;
    }

    .alert {
        border-radius: 10px;
        border: none;
        backdrop-filter: blur(10px);
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        font-family: 'Rajdhani', sans-serif;
        font-weight: 500;
    }

    .alert-success {
        background: rgba(0, 212, 170, 0.2);
        color: var(--zaun-glow);
        border-left: 4px solid var(--zaun-accent);
    }

    .alert-danger {
        background: rgba(255, 0, 127, 0.2);
        color: #ff6b9d;
        border-left: 4px solid var(--shimmer-pink);
    }

    .alert-info {
        background: rgba(5, 150, 170, 0.2);
        color: var(--hextech-blue);
        border-left: 4px solid var(--arcane-blue);
    }

    .alert-warning {
        background: rgba(200, 170, 110, 0.2);
        color: var(--piltover-glow);
        border-left: 4px solid var(--piltover-accent);
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .game-title {
            font-size: 2.5rem;
        }
        
        .word-display {
            font-size: 2.5rem;
            letter-spacing: 0.2em;
        }
        
        .player-role {
            font-size: 1.5rem;
        }
        
        .container {
            padding: 1rem;
        }
        
        .game-section, .game-setup, .chat-section {
            padding: 1.5rem;
        }
    }
</style>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new();
    private string roomId = "";
    private string playerName = "";
    private string messageInput = "";
    private string currentGuess = "";
    private string gameStatus = "";
    private string latestHint = "";
    
    // Game state
    private bool inGame = false;
    private PlayerView? playerView;
    private GameState? gameState;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
            .Build();

        // Room management events
        hubConnection.On<string, string>("PlayerJoined", (name, connectionId) =>
        {
            var message = $"{DateTime.Now:HH:mm:ss} - {name} joined the room";
            messages.Add(message);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string>("PlayerLeft", (name, connectionId) =>
        {
            var message = $"{DateTime.Now:HH:mm:ss} - {name} left the room";
            messages.Add(message);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string>("ReceiveMessage", (name, message) =>
        {
            var formattedMessage = $"{DateTime.Now:HH:mm:ss} - {name}: {message}";
            messages.Add(formattedMessage);
            InvokeAsync(StateHasChanged);
        });

        // Code Cracker game events
        hubConnection.On<string, PlayerViewData>("CodeCrackerGameJoined", (role, view) =>
        {
            playerView = new PlayerView
            {
                Role = view.Role,
                DisplayName = view.DisplayName,
                Instruction = view.Instruction,
                DistortedWord = view.DistortedWord,
                Definition = view.Definition,
                GermanTranslation = view.GermanTranslation,
                Synonym = view.Synonym,
                AttemptHistory = view.AttemptHistory
            };
            inGame = true;
            gameStatus = $"Joined game as {role}. Waiting for opponent...";
            messages.Add($"{DateTime.Now:HH:mm:ss} - You joined as {role}");
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On("CodeCrackerGameFull", () =>
        {
            gameStatus = "Game is full! Cannot join.";
            messages.Add($"{DateTime.Now:HH:mm:ss} - Game is full");
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<GameStateData>("CodeCrackerGameStateUpdated", (state) =>
        {
            gameState = new GameState
            {
                CurrentWordIndex = state.CurrentWordIndex,
                TotalWords = state.TotalWords,
                IsCompleted = state.IsCompleted,
                Score = state.Score,
                HintsUsed = state.HintsUsed,
                PlayerCount = state.PlayerCount,
                PlayersNeeded = state.PlayersNeeded
            };
            
            if (gameState?.PlayerCount == 2 && gameState?.IsCompleted == false)
            {
                gameStatus = "Both players connected! Start guessing!";
            }
            else if (gameState?.PlayerCount < 2)
            {
                gameStatus = "Waiting for opponent...";
            }
            
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<PlayerViewData>("CodeCrackerPlayerViewUpdated", (view) =>
        {
            playerView = new PlayerView
            {
                Role = view.Role,
                DisplayName = view.DisplayName,
                Instruction = view.Instruction,
                DistortedWord = view.DistortedWord,
                Definition = view.Definition,
                GermanTranslation = view.GermanTranslation,
                Synonym = view.Synonym,
                AttemptHistory = view.AttemptHistory
            };
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, int, int>("CodeCrackerGameCompleted", (message, score, wordsCompleted) =>
        {
            gameStatus = $"üéâ {message} - Words completed: {wordsCompleted}";
            messages.Add($"{DateTime.Now:HH:mm:ss} - Game completed! Final score: {score}");
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("CodeCrackerInvalidGuess", (message) =>
        {
            gameStatus = $"‚ùå {message}";
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("CodeCrackerHintReceived", (hint) =>
        {
            latestHint = hint;
            messages.Add($"{DateTime.Now:HH:mm:ss} - Hint received: {hint}");
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task JoinRoom()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(roomId) && !string.IsNullOrEmpty(playerName))
        {
            await hubConnection.SendAsync("JoinRoom", roomId, playerName);
            messages.Add($"{DateTime.Now:HH:mm:ss} - You joined room: {roomId}");
        }
    }

    private async Task LeaveRoom()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(roomId))
        {
            await hubConnection.SendAsync("LeaveRoom", roomId, playerName);
            messages.Add($"{DateTime.Now:HH:mm:ss} - You left room: {roomId}");
            inGame = false;
            playerView = null;
            gameState = null;
            gameStatus = "";
            latestHint = "";
        }
    }

    private async Task JoinGame()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(roomId) && !string.IsNullOrEmpty(playerName))
        {
            await hubConnection.SendAsync("JoinCodeCrackerGame", roomId, playerName);
        }
    }

    private async Task SubmitGuess()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(roomId) && !string.IsNullOrEmpty(currentGuess))
        {
            await hubConnection.SendAsync("SubmitCodeCrackerGuess", roomId, currentGuess);
            currentGuess = "";
            latestHint = ""; // Clear hint after guess
        }
    }

    private async Task RequestHint()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(roomId))
        {
            await hubConnection.SendAsync("RequestCodeCrackerHint", roomId);
        }
    }

    private async Task RestartGame()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(roomId))
        {
            await hubConnection.SendAsync("RestartCodeCrackerGame", roomId);
            gameStatus = "Game restarted!";
            latestHint = "";
        }
    }

    private async Task SendMessage()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(messageInput) && !string.IsNullOrEmpty(roomId))
        {
            await hubConnection.SendAsync("SendMessageToRoom", roomId, playerName, messageInput);
            messageInput = "";
        }
    }

    private string GetRoleClass()
    {
        return playerView?.Role?.ToLower() ?? "";
    }

    private string GetStatusClass()
    {
        if (gameStatus.Contains("Correct") || gameStatus.Contains("üéâ"))
            return "alert-success";
        else if (gameStatus.Contains("‚ùå") || gameStatus.Contains("Incorrect"))
            return "alert-danger";
        else
            return "alert-info";
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    // Client-side data classes
    public class PlayerView
    {
        public string Role { get; set; } = "";
        public string DisplayName { get; set; } = "";
        public string Instruction { get; set; } = "";
        public string? DistortedWord { get; set; }
        public string? Definition { get; set; }
        public string? GermanTranslation { get; set; }
        public string? Synonym { get; set; }
        public List<string> AttemptHistory { get; set; } = new();
    }

    public class GameState
    {
        public int CurrentWordIndex { get; set; }
        public int TotalWords { get; set; }
        public bool IsCompleted { get; set; }
        public int Score { get; set; }
        public int HintsUsed { get; set; }
        public int PlayerCount { get; set; }
        public int PlayersNeeded { get; set; }
    }
}